//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "LoadableResource-Protocol.h"
#import "LoadingControllerDelegate-Protocol.h"
#import "QuickWebsiteSearchEventListener-Protocol.h"
#import "ReadingListMetadataProvider-Protocol.h"
#import "SFFormAutoFillControllerDelegate-Protocol.h"
#import "WBSFluidProgressControllerWindowDelegate-Protocol.h"
#import "WBSFluidProgressStateSource-Protocol.h"
#import "WBSOrderedTab-Protocol.h"
#import "WBSTabItemSearchSupport-Protocol.h"
#import "WBSTranslationConsentAlertHelperDelegate-Protocol.h"
#import "WBSTranslationContextDelegate-Protocol.h"
#import "WKNavigationDelegatePrivate-Protocol.h"
#import "WKUIDelegatePrivate-Protocol.h"
#import "_SFAppBannerMetaTagContentObserver-Protocol.h"
#import "_SFAppSuggestionBannerDelegate-Protocol.h"
#import "_SFAppleConnectExtensionUIDelegate-Protocol.h"
#import "_SFBrowserDocument-Protocol.h"
#import "_SFDialogControllerDelegate-Protocol.h"
#import "_SFDialogPresenting-Protocol.h"
#import "_SFDialogViewControllerPresenting-Protocol.h"
#import "_SFDownloadDelegate-Protocol.h"
#import "_SFFindOnPageViewDelegate-Protocol.h"
#import "_SFLinkPreviewHandler-Protocol.h"
#import "_SFMediaRecordingDocument-Protocol.h"
#import "_SFNavigationIntentHandling-Protocol.h"
#import "_SFPageLoadErrorControllerDelegate-Protocol.h"
#import "_SFPrintControllerDelegate-Protocol.h"
#import "_SFQuickLookDocumentSource-Protocol.h"
#import "_SFReaderControllerDelegate-Protocol.h"
#import "_SFWebViewDelegate-Protocol.h"
#import "_WKDiagnosticLoggingDelegate-Protocol.h"
#import "_WKFullscreenDelegate-Protocol.h"
#import "_WKIconLoadingDelegate-Protocol.h"
#import "_WKInputDelegate-Protocol.h"
#import "_WKWebAuthenticationPanelDelegate-Protocol.h"

@class BrowserController, CSSearchableItemAttributeSet, FindOnPageCompletionProvider, FindOnPageView, LinkPreviewViewController, LoadingController, NSArray, NSDictionary, NSError, NSMutableArray, NSNumber, NSPointerArray, NSString, NSTimer, NSURL, NSUUID, NSUserActivity, PageLoadTest, PageLoadTestStatistics, STBlockingViewController, TabBarItem, TabDocumentView, TabOverviewItem, TiltedTabItem, TouchIconFetcher, UIImage, UIView, WBSFluidProgressController, WBSFluidProgressState, WBSHistoryContextController, WBSHistoryVisit, WBSSameDocumentNavigationToHistoryVisitCorrelator, WBSTranslationContext, WBSURLSpoofingMitigator, WKBackForwardListItem, WebBookmark, _SFAppleConnectExtensionPageController, _SFApplicationManifestFetcher, _SFBrowserConfiguration, _SFCalendarEventDetector, _SFDialog, _SFDialogController, _SFDownload, _SFFluidProgressView, _SFFormAutoFillController, _SFInjectedJavaScriptController, _SFNavigationBarItem, _SFNavigationIntent, _SFNavigationUtilitiesManager, _SFPageLoadErrorController, _SFPinnableBanner, _SFPrintController, _SFQuickLookDocument, _SFQuickLookDocumentWriter, _SFReaderController, _SFReloadOptionsController, _SFSafariSharingExtensionController, _SFSafeBrowsingController, _SFSecIdentityPreferencesController, _SFTabStateData, _SFTelephonyNavigationMitigationPolicy, _SFWebClipMetadataFetcher, _SFWebView, _WKActivatedElementInfo, _WKRemoteObjectInterface, _WKSessionState, _WKUserInitiatedAction;
@protocol LoadProgressObserver, TabDocumentDelegate, UIDragSession, WBSFluidProgressStateSource, _SFAppSuggestionBanner, _SFAuthenticatorDialog;

@interface TabDocument : NSObject <_SFAppBannerMetaTagContentObserver, _SFAppSuggestionBannerDelegate, LoadingControllerDelegate, QuickWebsiteSearchEventListener, SFFormAutoFillControllerDelegate, WBSFluidProgressControllerWindowDelegate, WBSFluidProgressStateSource, WKNavigationDelegatePrivate, WKUIDelegatePrivate, _SFAppleConnectExtensionUIDelegate, _SFDialogControllerDelegate, _SFDialogViewControllerPresenting, _SFFindOnPageViewDelegate, _SFLinkPreviewHandler, _SFPageLoadErrorControllerDelegate, _SFPrintControllerDelegate, _SFReaderControllerDelegate, _SFWebViewDelegate, _WKDiagnosticLoggingDelegate, _WKFullscreenDelegate, _WKIconLoadingDelegate, _WKInputDelegate, _WKWebAuthenticationPanelDelegate, WBSTranslationConsentAlertHelperDelegate, WBSTranslationContextDelegate, _SFQuickLookDocumentSource, ReadingListMetadataProvider, LoadableResource, WBSTabItemSearchSupport, WBSOrderedTab, _SFBrowserDocument, _SFDialogPresenting, _SFDownloadDelegate, _SFMediaRecordingDocument, _SFNavigationIntentHandling>
{
    unsigned long long _progressAnimationSuppressedCount;	// 8 = 0x8
    NSString *_EVOrganizationName;	// 16 = 0x10
    NSUserActivity *_userActivity;	// 24 = 0x18
    NSError *_lastLoadError;	// 32 = 0x20
    NSError *_lastLoadErrorForFormatMenu;	// 40 = 0x28
    WBSURLSpoofingMitigator *_URLSpoofingMitigator;	// 48 = 0x30
    _WKSessionState *_savedSessionState;	// 56 = 0x38
    _WKRemoteObjectInterface *_siteSpecificSearchEventListenerInterface;	// 64 = 0x40
    _WKRemoteObjectInterface *_appBannerMetaTagContentObserverInterface;	// 72 = 0x48
    _SFSafariSharingExtensionController *_sharingExtensionController;	// 80 = 0x50
    _SFReloadOptionsController *_reloadOptionsController;	// 88 = 0x58
    _SFCalendarEventDetector *_calendarEventDetector;	// 96 = 0x60
    _SFInjectedJavaScriptController *_activityJSController;	// 104 = 0x68
    _SFWebClipMetadataFetcher *_webClipMetadataFetcher;	// 112 = 0x70
    TouchIconFetcher *_touchIconFetcher;	// 120 = 0x78
    NSMutableArray *_fallbackURLs;	// 128 = 0x80
    unsigned long long _lastReaderDeactivationMode;	// 136 = 0x88
    FindOnPageCompletionProvider *_findCompletionProvider;	// 144 = 0x90
    _SFFormAutoFillController *_autoFillController;	// 152 = 0x98
    CDUnknownBlockType _autoFillAuthenticationCompletionBlock;	// 160 = 0xa0
    LoadingController *_loadingController;	// 168 = 0xa8
    WBSFluidProgressController *_fluidProgressController;	// 176 = 0xb0
    NSDictionary *_initialArticleScrollDictionaryForCloudTab;	// 184 = 0xb8
    NSURL *_overrideURLForHTTPAuthenticationDialog;	// 192 = 0xc0
    WKBackForwardListItem *_parentTabItem;	// 200 = 0xc8
    _SFApplicationManifestFetcher *_applicationManifestFetcher;	// 208 = 0xd0
    _SFDownload *_activeDownload;	// 216 = 0xd8
    TabDocumentView *_cachedView;	// 224 = 0xe0
    unsigned long long _currentUsageState;	// 232 = 0xe8
    NSURL *_lastURLForWhichUsageStateWasSet;	// 240 = 0xf0
    long long _concurrentNavigationActionPolicyDecisions;	// 248 = 0xf8
    _SFFluidProgressView *_progressView;	// 256 = 0x100
    _SFNavigationBarItem *_navigationBarItem;	// 264 = 0x108
    _SFDialogController *_dialogController;	// 272 = 0x110
    WebBookmark *_bookmarkForIconFetching;	// 280 = 0x118
    WKBackForwardListItem *_backForwardListItemForCurrentAppLinkBannerCheck;	// 288 = 0x120
    _SFPinnableBanner<_SFAppSuggestionBanner> *_storeBanner;	// 296 = 0x128
    _SFPinnableBanner *_appBannerPendingFirstPaint;	// 304 = 0x130
    _SFTelephonyNavigationMitigationPolicy *_telephonyNavigationPolicy;	// 312 = 0x138
    _WKUserInitiatedAction *_lastUserInitiatedAction;	// 320 = 0x140
    _SFSecIdentityPreferencesController *_secIdentityPreferencesController;	// 328 = 0x148
    PageLoadTest *_pageLoadTest;	// 336 = 0x150
    NSTimer *_donateTextTimer;	// 344 = 0x158
    NSTimer *_unresponsiveWebProcessTimer;	// 352 = 0x160
    CDUnknownBlockType _unresponsiveWebProcessBlock;	// 360 = 0x168
    _SFNavigationIntent *_deferredDropNavigationIntent;	// 368 = 0x170
    unsigned long long _deferredDropNavigationIntentGeneration;	// 376 = 0x178
    NSNumber *_deferredDropWasHandledByWebKit;	// 384 = 0x180
    id <UIDragSession> _webKitDragSession;	// 392 = 0x188
    unsigned long long _cachedMediaStateIcon;	// 400 = 0x190
    NSPointerArray *_spawnedTabDocuments;	// 408 = 0x198
    NSURL *_cachedCanonicalURL;	// 416 = 0x1a0
    _SFAppleConnectExtensionPageController *_appleConnectPageController;	// 424 = 0x1a8
    CDUnknownBlockType _pendingNavigationActionDueToExternalSchemePromptHandler;	// 432 = 0x1b0
    NSURL *_cachedURL;	// 440 = 0x1b8
    id _faviconToken;	// 448 = 0x1c0
    NSURL *_originalURL;	// 456 = 0x1c8
    NSTimer *_updateFaviconTimer;	// 464 = 0x1d0
    NSURL *_urlToReloadForcingContentBlockers;	// 472 = 0x1d8
    _Bool _enableContentBlockersWhenReloading;	// 480 = 0x1e0
    _SFNavigationUtilitiesManager *_navigationUtilitiesManager;	// 488 = 0x1e8
    NSString *_domainWhereUserDeclinedAutomaticStrongPassword;	// 496 = 0x1f0
    _WKActivatedElementInfo *_elementInfoToAnimateForNextDownload;	// 504 = 0x1f8
    _SFDownload *_downloadReflectedInFluidProgress;	// 512 = 0x200
    _Bool _closeWhenNextDownloadStarts;	// 520 = 0x208
    _Bool _loadNextNavigationInline;	// 521 = 0x209
    _Bool _EVOrganizationNameIsValid;	// 522 = 0x20a
    _Bool _forwardActivityToCoreSpotlight;	// 523 = 0x20b
    _Bool _loadWasUserDriven;	// 524 = 0x20c
    _Bool _userDrivenLoadWasConsumed;	// 525 = 0x20d
    _Bool _shouldDismissReaderInReponseToSameDocumentNavigation;	// 526 = 0x20e
    _Bool _allowURLAsTitle;	// 527 = 0x20f
    _Bool _wasOpenedFromHistory;	// 528 = 0x210
    _Bool _displayingStandaloneImage;	// 529 = 0x211
    _Bool _displayingStandaloneMedia;	// 530 = 0x212
    _Bool _quickLookDocumentCheckCompleted;	// 531 = 0x213
    _Bool _didFirstPaint;	// 532 = 0x214
    _Bool _shouldSuppressDialogsThatBlockWebProcessForProvisionalNavigation;	// 533 = 0x215
    _Bool _shouldResetPrintSuppressionOnNextCommit;	// 534 = 0x216
    _Bool _sourceApplicationIsValid;	// 535 = 0x217
    _Bool _isDisplayingTelephonyPrompt;	// 536 = 0x218
    _Bool _isDecidingNavigationResponsePolicyForMainFrameDownload;	// 537 = 0x219
    NSURL *_urlForDisplayedContent;	// 544 = 0x220
    _Bool _hasFocusedInputFieldOnCurrentPage;	// 552 = 0x228
    _Bool _suppressCrashBanner;	// 553 = 0x229
    _Bool _needsSendTelemetryForProvisionalLoad;	// 554 = 0x22a
    _Bool _webViewIsLoading;	// 555 = 0x22b
    _Bool _gestureRequiresGoBackToParentTab;	// 556 = 0x22c
    _Bool _didCommitCurrentNavigation;	// 557 = 0x22d
    _Bool _didQuickStopWhileBlank;	// 558 = 0x22e
    _SFQuickLookDocumentWriter *_quickLookDocumentWriter;	// 560 = 0x230
    NSString *_suggestedFilenameForNextCommit;	// 568 = 0x238
    _Bool _shouldReflectTranslationAsFluidProgress;	// 576 = 0x240
    struct {
        long long impressionProvenance;
        unsigned int shouldIgnoreURLAsAnalyticsImpression:1;
        unsigned int shouldNotifyImpressionAnalyticsRecorder:1;
        unsigned int shouldNotifyImpressionAnalyticsRecorderWhenDisplayedToUser:1;
    } _flags;	// 584 = 0x248
    _SFDialog<_SFAuthenticatorDialog> *_authenticatorDialog;	// 600 = 0x258
    unsigned long long _phishingURLClassification;	// 608 = 0x260
    _Bool _hasDoneReaderAvailabilityDetection;	// 616 = 0x268
    _Bool _matchedLastSearch;	// 617 = 0x269
    _Bool _wasOpenedFromLink;	// 618 = 0x26a
    _Bool _showingReader;	// 619 = 0x26b
    _Bool _shouldRestoreReader;	// 620 = 0x26c
    _Bool _shouldRevealAppLinkBannerForNextCommit;	// 621 = 0x26d
    _Bool _storeBannersAreDisabled;	// 622 = 0x26e
    _Bool _siteCustomIconPrecomposed;	// 623 = 0x26f
    _Bool _suppressingProgressAnimationForNavigationGesture;	// 624 = 0x270
    _Bool _wantsReaderWhenActivated;	// 625 = 0x271
    _Bool _hibernatedDueToMemoryWarning;	// 626 = 0x272
    _Bool _webViewIsFullscreen;	// 627 = 0x273
    _Bool _wasLoadedWithContentBlockersEnabled;	// 628 = 0x274
    _Bool _exitingElementFullscreen;	// 629 = 0x275
    _Bool _allowsProgrammaticFocusToBeginInputSession;	// 630 = 0x276
    _Bool _showingContinuous;	// 631 = 0x277
    _Bool _showingInlineDialog;	// 632 = 0x278
    _Bool _persistWhenHibernated;	// 633 = 0x279
    _Bool _active;	// 634 = 0x27a
    _Bool _isBlank;	// 635 = 0x27b
    _Bool _isPlaceholder;	// 636 = 0x27c
    _Bool _preparingForNewUserActivity;	// 637 = 0x27d
    _Bool _hibernated;	// 638 = 0x27e
    _Bool _supportsReuseForSpotlightSearch;	// 639 = 0x27f
    _Bool _closed;	// 640 = 0x280
    _Bool _performingFirstLoadAfterOpenInBackground;	// 641 = 0x281
    _Bool _performingRedirectAfterOpenInBackground;	// 642 = 0x282
    _Bool _didFinishDocumentLoad;	// 643 = 0x283
    _Bool _didFirstLayout;	// 644 = 0x284
    _Bool _contentIsReadyForSnapshot;	// 645 = 0x285
    _Bool _mediaCaptureEnabled;	// 646 = 0x286
    _Bool _isMediaSuspendedForScreenTime;	// 647 = 0x287
    _Bool _hasFormControlInteraction;	// 648 = 0x288
    WBSFluidProgressState *_fluidProgressState;	// 656 = 0x290
    NSArray *_titleWords;	// 664 = 0x298
    NSString *_lastSearchTerm;	// 672 = 0x2a0
    NSString *_titleForLastSearch;	// 680 = 0x2a8
    NSString *_URLStringForLastSearch;	// 688 = 0x2b0
    NSArray *_URLStringComponents;	// 696 = 0x2b8
    WBSHistoryContextController *_contextController;	// 704 = 0x2c0
    BrowserController *_browserController;	// 712 = 0x2c8
    TabDocument *_parentTabDocumentForBackClosesSpawnedTab;	// 720 = 0x2d0
    FindOnPageView *_findOnPageView;	// 728 = 0x2d8
    _SFQuickLookDocument *_quickLookDocument;	// 736 = 0x2e0
    long long _readerViewTopScrollOffset;	// 744 = 0x2e8
    _SFPinnableBanner *_appBanner;	// 752 = 0x2f0
    NSString *_sourceApplicationBundleIdentifierForNextCommit;	// 760 = 0x2f8
    long long _externalAppRedirectState;	// 768 = 0x300
    UIImage *_siteCustomIcon;	// 776 = 0x308
    TabOverviewItem *_tabOverviewItem;	// 784 = 0x310
    TiltedTabItem *_tiltedTabItem;	// 792 = 0x318
    WebBookmark *_readingListBookmark;	// 800 = 0x320
    unsigned long long _sessionStateRestorationSource;	// 808 = 0x328
    id <TabDocumentDelegate> _delegate;	// 816 = 0x330
    id <LoadProgressObserver> _loadProgressObserver;	// 824 = 0x338
    _SFBrowserConfiguration *_configuration;	// 832 = 0x340
    LinkPreviewViewController *_linkPreviewViewController;	// 840 = 0x348
    PageLoadTestStatistics *_pageLoadStatistics;	// 848 = 0x350
    NSURL *_URLFromExternalApplication;	// 856 = 0x358
    _SFPageLoadErrorController *_pageLoadErrorController;	// 864 = 0x360
    WBSSameDocumentNavigationToHistoryVisitCorrelator *_sameDocumentNavigationToHistoryVisitCorrelator;	// 872 = 0x368
    _SFWebView *_webView;	// 880 = 0x370
    TabBarItem *_tabBarItem;	// 888 = 0x378
    _SFSafeBrowsingController *_safeBrowsingController;	// 896 = 0x380
    NSURL *_tabReuseURL;	// 904 = 0x388
    NSUUID *_UUID;	// 912 = 0x390
    double _lastViewedTime;	// 920 = 0x398
    WBSHistoryVisit *_lastVisit;	// 928 = 0x3a0
    _SFPrintController *_printController;	// 936 = 0x3a8
    NSUUID *_ownerUUID;	// 944 = 0x3b0
    CSSearchableItemAttributeSet *_searchableItemAttributes;	// 952 = 0x3b8
    NSString *_sourceApplicationBundleIdentifier;	// 960 = 0x3c0
    NSArray *_ancestorUUIDs;	// 968 = 0x3c8
    _SFReaderController *_readerContext;	// 976 = 0x3d0
    _SFWebView *_readerWebView;	// 984 = 0x3d8
    long long _policy;	// 992 = 0x3e0
    STBlockingViewController *_associatedBlockingViewController;	// 1000 = 0x3e8
    WBSTranslationContext *_translationContext;	// 1008 = 0x3f0
    struct CGPoint _scrollPoint;	// 1016 = 0x3f8
}

+ (id)tabDocumentForWKWebView:(id)arg1;	// IMP=0x00000001000fd94c
+ (id)urlForExternalURL:(id)arg1;	// IMP=0x00000001000f0c14
- (void).cxx_destruct;	// IMP=0x0000000100115ea8
@property(readonly, nonatomic) WBSTranslationContext *translationContext; // @synthesize translationContext=_translationContext;
@property(readonly, nonatomic) _Bool hasFormControlInteraction; // @synthesize hasFormControlInteraction=_hasFormControlInteraction;
@property(nonatomic) _Bool isMediaSuspendedForScreenTime; // @synthesize isMediaSuspendedForScreenTime=_isMediaSuspendedForScreenTime;
@property(nonatomic) __weak STBlockingViewController *associatedBlockingViewController; // @synthesize associatedBlockingViewController=_associatedBlockingViewController;
@property(nonatomic) long long policy; // @synthesize policy=_policy;
@property(nonatomic) _Bool mediaCaptureEnabled; // @synthesize mediaCaptureEnabled=_mediaCaptureEnabled;
@property(readonly, nonatomic) _SFWebView *readerWebView; // @synthesize readerWebView=_readerWebView;
@property(readonly, nonatomic) _SFReaderController *readerContext; // @synthesize readerContext=_readerContext;
@property(readonly, nonatomic) NSArray *ancestorUUIDs; // @synthesize ancestorUUIDs=_ancestorUUIDs;
@property(copy, nonatomic) NSString *sourceApplicationBundleIdentifier; // @synthesize sourceApplicationBundleIdentifier=_sourceApplicationBundleIdentifier;
@property(retain, nonatomic) CSSearchableItemAttributeSet *searchableItemAttributes; // @synthesize searchableItemAttributes=_searchableItemAttributes;
@property(retain, nonatomic) NSUUID *ownerUUID; // @synthesize ownerUUID=_ownerUUID;
@property(readonly, nonatomic) _SFPrintController *printController; // @synthesize printController=_printController;
@property(readonly, nonatomic) _Bool contentIsReadyForSnapshot; // @synthesize contentIsReadyForSnapshot=_contentIsReadyForSnapshot;
@property(readonly, nonatomic) _Bool didFirstLayout; // @synthesize didFirstLayout=_didFirstLayout;
@property(readonly, nonatomic) _Bool didFinishDocumentLoad; // @synthesize didFinishDocumentLoad=_didFinishDocumentLoad;
@property(nonatomic, getter=isPerformingRedirectAfterOpenInBackground) _Bool performingRedirectAfterOpenInBackground; // @synthesize performingRedirectAfterOpenInBackground=_performingRedirectAfterOpenInBackground;
@property(nonatomic, getter=isPerformingFirstLoadAfterOpenInBackground) _Bool performingFirstLoadAfterOpenInBackground; // @synthesize performingFirstLoadAfterOpenInBackground=_performingFirstLoadAfterOpenInBackground;
@property(retain, nonatomic) WBSHistoryVisit *lastVisit; // @synthesize lastVisit=_lastVisit;
@property(nonatomic, getter=isClosed) _Bool closed; // @synthesize closed=_closed;
@property(nonatomic) double lastViewedTime; // @synthesize lastViewedTime=_lastViewedTime;
@property(copy, nonatomic) NSUUID *UUID; // @synthesize UUID=_UUID;
@property(copy, nonatomic) NSURL *tabReuseURL; // @synthesize tabReuseURL=_tabReuseURL;
@property(nonatomic) _Bool supportsReuseForSpotlightSearch; // @synthesize supportsReuseForSpotlightSearch=_supportsReuseForSpotlightSearch;
@property(nonatomic) struct CGPoint scrollPoint; // @synthesize scrollPoint=_scrollPoint;
@property(readonly, nonatomic, getter=isHibernated) _Bool hibernated; // @synthesize hibernated=_hibernated;
@property(readonly, nonatomic) _SFSafeBrowsingController *safeBrowsingController; // @synthesize safeBrowsingController=_safeBrowsingController;
@property(readonly, nonatomic) TabBarItem *tabBarItem; // @synthesize tabBarItem=_tabBarItem;
@property(nonatomic, getter=isPreparingForNewUserActivity) _Bool preparingForNewUserActivity; // @synthesize preparingForNewUserActivity=_preparingForNewUserActivity;
@property(nonatomic) _Bool isPlaceholder; // @synthesize isPlaceholder=_isPlaceholder;
@property(nonatomic) _Bool isBlank; // @synthesize isBlank=_isBlank;
@property(readonly, nonatomic) _SFWebView *webView; // @synthesize webView=_webView;
@property(nonatomic, getter=isActive) _Bool active; // @synthesize active=_active;
@property(nonatomic) _Bool persistWhenHibernated; // @synthesize persistWhenHibernated=_persistWhenHibernated;
@property(readonly, nonatomic) WBSSameDocumentNavigationToHistoryVisitCorrelator *sameDocumentNavigationToHistoryVisitCorrelator; // @synthesize sameDocumentNavigationToHistoryVisitCorrelator=_sameDocumentNavigationToHistoryVisitCorrelator;
@property(readonly, nonatomic, getter=isShowingInlineDialog) _Bool showingInlineDialog; // @synthesize showingInlineDialog=_showingInlineDialog;
@property(readonly, nonatomic) _SFDialogController *dialogController; // @synthesize dialogController=_dialogController;
@property(readonly, nonatomic) _SFPageLoadErrorController *pageLoadErrorController; // @synthesize pageLoadErrorController=_pageLoadErrorController;
@property(retain, nonatomic) NSURL *URLFromExternalApplication; // @synthesize URLFromExternalApplication=_URLFromExternalApplication;
@property(nonatomic, getter=isShowingContinuous) _Bool showingContinuous; // @synthesize showingContinuous=_showingContinuous;
@property(nonatomic) _Bool allowsProgrammaticFocusToBeginInputSession; // @synthesize allowsProgrammaticFocusToBeginInputSession=_allowsProgrammaticFocusToBeginInputSession;
@property(retain, nonatomic) PageLoadTestStatistics *pageLoadStatistics; // @synthesize pageLoadStatistics=_pageLoadStatistics;
@property(retain, nonatomic) LinkPreviewViewController *linkPreviewViewController; // @synthesize linkPreviewViewController=_linkPreviewViewController;
@property(readonly, nonatomic, getter=isExitingElementFullscreen) _Bool exitingElementFullscreen; // @synthesize exitingElementFullscreen=_exitingElementFullscreen;
@property(readonly, nonatomic) _Bool wasLoadedWithContentBlockersEnabled; // @synthesize wasLoadedWithContentBlockersEnabled=_wasLoadedWithContentBlockersEnabled;
@property(readonly, nonatomic) _Bool webViewIsFullscreen; // @synthesize webViewIsFullscreen=_webViewIsFullscreen;
@property(readonly, nonatomic) _SFBrowserConfiguration *configuration; // @synthesize configuration=_configuration;
@property(nonatomic) __weak id <LoadProgressObserver> loadProgressObserver; // @synthesize loadProgressObserver=_loadProgressObserver;
@property(nonatomic) __weak id <TabDocumentDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) unsigned long long sessionStateRestorationSource; // @synthesize sessionStateRestorationSource=_sessionStateRestorationSource;
@property(nonatomic, getter=wasHibernatedDueToMemoryWarning) _Bool hibernatedDueToMemoryWarning; // @synthesize hibernatedDueToMemoryWarning=_hibernatedDueToMemoryWarning;
@property(nonatomic, getter=isDisplayingStandaloneMedia) _Bool displayingStandaloneMedia; // @synthesize displayingStandaloneMedia=_displayingStandaloneMedia;
@property(nonatomic, getter=isDisplayingStandaloneImage) _Bool displayingStandaloneImage; // @synthesize displayingStandaloneImage=_displayingStandaloneImage;
@property(nonatomic) _Bool wantsReaderWhenActivated; // @synthesize wantsReaderWhenActivated=_wantsReaderWhenActivated;
@property(nonatomic) _Bool suppressingProgressAnimationForNavigationGesture; // @synthesize suppressingProgressAnimationForNavigationGesture=_suppressingProgressAnimationForNavigationGesture;
@property(retain, nonatomic) WebBookmark *readingListBookmark; // @synthesize readingListBookmark=_readingListBookmark;
@property(readonly, nonatomic) TiltedTabItem *tiltedTabItem; // @synthesize tiltedTabItem=_tiltedTabItem;
@property(readonly, nonatomic) TabOverviewItem *tabOverviewItem; // @synthesize tabOverviewItem=_tabOverviewItem;
@property(nonatomic) _Bool siteCustomIconPrecomposed; // @synthesize siteCustomIconPrecomposed=_siteCustomIconPrecomposed;
@property(retain, nonatomic) UIImage *siteCustomIcon; // @synthesize siteCustomIcon=_siteCustomIcon;
@property(nonatomic) long long externalAppRedirectState; // @synthesize externalAppRedirectState=_externalAppRedirectState;
@property(nonatomic) _Bool storeBannersAreDisabled; // @synthesize storeBannersAreDisabled=_storeBannersAreDisabled;
@property(copy, nonatomic) NSString *sourceApplicationBundleIdentifierForNextCommit; // @synthesize sourceApplicationBundleIdentifierForNextCommit=_sourceApplicationBundleIdentifierForNextCommit;
@property(nonatomic) _Bool shouldRevealAppLinkBannerForNextCommit; // @synthesize shouldRevealAppLinkBannerForNextCommit=_shouldRevealAppLinkBannerForNextCommit;
@property(retain, nonatomic) _SFPinnableBanner *appBanner; // @synthesize appBanner=_appBanner;
@property(nonatomic) long long readerViewTopScrollOffset; // @synthesize readerViewTopScrollOffset=_readerViewTopScrollOffset;
@property(nonatomic) _Bool shouldRestoreReader; // @synthesize shouldRestoreReader=_shouldRestoreReader;
@property(nonatomic, getter=isShowingReader) _Bool showingReader; // @synthesize showingReader=_showingReader;
@property(nonatomic) _Bool wasOpenedFromLink; // @synthesize wasOpenedFromLink=_wasOpenedFromLink;
@property(retain, nonatomic) _SFQuickLookDocument *quickLookDocument; // @synthesize quickLookDocument=_quickLookDocument;
@property(readonly, nonatomic) FindOnPageView *findOnPageView; // @synthesize findOnPageView=_findOnPageView;
@property(readonly, nonatomic) _SFReloadOptionsController *reloadOptionsController; // @synthesize reloadOptionsController=_reloadOptionsController;
@property(nonatomic) __weak TabDocument *parentTabDocumentForBackClosesSpawnedTab; // @synthesize parentTabDocumentForBackClosesSpawnedTab=_parentTabDocumentForBackClosesSpawnedTab;
@property(nonatomic) __weak BrowserController *browserController; // @synthesize browserController=_browserController;
@property(nonatomic) _Bool matchedLastSearch; // @synthesize matchedLastSearch=_matchedLastSearch;
@property(copy, nonatomic) NSArray *URLStringComponents; // @synthesize URLStringComponents=_URLStringComponents;
@property(copy, nonatomic) NSString *URLStringForLastSearch; // @synthesize URLStringForLastSearch=_URLStringForLastSearch;
@property(copy, nonatomic) NSString *titleForLastSearch; // @synthesize titleForLastSearch=_titleForLastSearch;
@property(copy, nonatomic) NSString *lastSearchTerm; // @synthesize lastSearchTerm=_lastSearchTerm;
@property(copy, nonatomic) NSArray *titleWords; // @synthesize titleWords=_titleWords;
@property(readonly, nonatomic) _Bool hasDoneReaderDetection; // @synthesize hasDoneReaderDetection=_hasDoneReaderAvailabilityDetection;
@property(readonly, nonatomic) WBSFluidProgressState *progressState; // @synthesize progressState=_fluidProgressState;
- (void)_runImageClassifierIfNeeded;	// IMP=0x0000000100115734
- (void)_showPhishingDialogForIdentifier:(id)arg1 url:(id)arg2;	// IMP=0x00000001001154bc
- (void)_runURLClassifier;	// IMP=0x000000010011516c
- (id)translationConsentAlertHelperViewControllerToPresentDetailsFrom:(id)arg1;	// IMP=0x000000010011510c
- (void)_translationContextStateDidChange:(id)arg1;	// IMP=0x0000000100115070
- (void)translationContext:(id)arg1 shouldReportProgressInUnifiedField:(_Bool)arg2;	// IMP=0x0000000100115004
- (void)translationContext:(id)arg1 showTranslationErrorAlertWithTitle:(id)arg2 message:(id)arg3;	// IMP=0x0000000100114ea8
- (void)translationContext:(id)arg1 showFirstTimeConsentAlertWithCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100114be8
- (void)translationContext:(id)arg1 urlForCurrentPageWithCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100114b04
- (_Bool)translationContextIsUsingPrivateBrowsing:(id)arg1;	// IMP=0x0000000100114ae8
- (void)translationContextReloadPageInOriginalLanguage:(id)arg1;	// IMP=0x0000000100114a7c
@property(readonly, nonatomic) double lastActivationTime;
@property(readonly, nonatomic, getter=isClosing) _Bool closing;
@property(readonly, nonatomic) _Bool shouldSelectOriginatingTabWhenClosed;
@property(readonly, nonatomic) _Bool isPinnedTab;
@property(readonly, nonatomic) NSString *windowIdentifier;
@property(readonly, nonatomic) NSArray *ancestorTabIdentifiers;
@property(readonly, nonatomic) NSString *identifier;
- (void)updateAncestryToChildOfTopLevelAncestorRelatedTab:(id)arg1;	// IMP=0x00000001001147c0
- (void)updateAncestryWithParentTab:(id)arg1;	// IMP=0x00000001001146e4
- (void)_webViewDidExitElementFullscreen:(id)arg1;	// IMP=0x0000000100114668
- (void)_webViewWillExitElementFullscreen:(id)arg1;	// IMP=0x0000000100114640
- (void)appleConnectExtensionPageController:(id)arg1 dismissViewController:(id)arg2;	// IMP=0x00000001001145c0
- (void)appleConnectExtensionPageController:(id)arg1 presentViewController:(id)arg2;	// IMP=0x0000000100114540
@property(readonly, nonatomic) _Bool shouldObscureForDigitalHealth;
- (void)updateUsageTrackingInformationAfterLinkPreviewDismissal;	// IMP=0x0000000100114420
- (void)updateUsageTrackingInformationIfNecessaryGivenDocumentIsCurrent:(_Bool)arg1;	// IMP=0x00000001001143c0
- (void)_updateUsageTrackingInformationWithStateToSet:(unsigned long long)arg1;	// IMP=0x00000001001141b0
- (unsigned long long)_usageStateIfTabDocumentIsCurrent:(_Bool)arg1;	// IMP=0x0000000100114100
- (_Bool)_shouldUpdateUsageTrackingWhenTransitioningToState:(unsigned long long)arg1;	// IMP=0x0000000100113f30
- (id)_tabDocumentsSharingWebProcess;	// IMP=0x0000000100113bf4
- (void)_terminateWebProcessAndReloadIfActive:(_Bool)arg1;	// IMP=0x0000000100113b78
- (void)_terminateWebProcessThenDoUnresponsiveWebProcessBlock;	// IMP=0x0000000100113908
- (void)_unresponsiveWebProcessTimerFired:(id)arg1;	// IMP=0x0000000100113854
- (void)_terminateWebProcessIfNeededAndShowCrashBanner:(_Bool)arg1 thenDo:(CDUnknownBlockType)arg2;	// IMP=0x0000000100113678
- (void)fetchMetadataForBookmark:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000001001132b0
- (void)presentDialog:(id)arg1 sender:(id)arg2;	// IMP=0x0000000100113258
- (void)createReaderWebViewForReaderController:(id)arg1;	// IMP=0x0000000100113220
- (id)readerURLForReaderController:(id)arg1;	// IMP=0x0000000100113168
- (void)collectReadingListItemInfo;	// IMP=0x0000000100113038
- (void)clearReaderContext;	// IMP=0x000000010011302c
- (void)clearReaderView;	// IMP=0x0000000100112ff8
- (void)_createBrowserReaderViewIfNeeded;	// IMP=0x0000000100112b00
- (void)createBrowserReaderViewIfNeeded;	// IMP=0x0000000100112acc
- (void)prepareToUseReader;	// IMP=0x0000000100112a74
- (id)readerPageArchiveURL;	// IMP=0x0000000100112930
- (_Bool)isShowingReadingListArchive;	// IMP=0x00000001001128ac
@property(readonly, nonatomic) WBSHistoryContextController *contextController; // @synthesize contextController=_contextController;
- (void)readerController:(id)arg1 didExtractArticleText:(id)arg2 withMetadata:(id)arg3;	// IMP=0x00000001001126cc
- (void)readerController:(id)arg1 didTwoFingerTapLinkInReaderWithContext:(id)arg2;	// IMP=0x00000001001125c4
- (void)readerController:(id)arg1 didClickLinkRequestingNewWindowInReaderWithRequest:(id)arg2;	// IMP=0x0000000100112424
- (void)readerController:(id)arg1 didClickLinkInReaderWithRequest:(id)arg2;	// IMP=0x0000000100112228
- (void)readerController:(id)arg1 didDeactivateReaderWithMode:(unsigned long long)arg2;	// IMP=0x000000010011210c
- (void)readerController:(id)arg1 didDetermineReaderAvailability:(id)arg2 dueTo:(long long)arg3;	// IMP=0x000000010011193c
- (void)didActivateReader;	// IMP=0x0000000100111848
- (_Bool)isReaderAvailable;	// IMP=0x0000000100111824
- (void)updateReadingListItemPreviewText:(id)arg1;	// IMP=0x00000001001116d0
- (void)clearReaderScrollInformation;	// IMP=0x00000001001116a4
- (_Bool)shouldShowReaderOnActivate;	// IMP=0x000000010011165c
- (void)pageLoadErrorController:(id)arg1 allowLegacyTLSConnectionForURL:(id)arg2 navigateToURL:(id)arg3;	// IMP=0x0000000100111518
- (_Bool)pageLoadErrorControllerShouldReloadAfterError:(id)arg1;	// IMP=0x00000001001114c0
- (_Bool)pageLoadErrorControllerShouldPermanentlyAcceptCertificate:(id)arg1;	// IMP=0x00000001001114a0
- (void)pageLoadErrorController:(id)arg1 presentViewController:(id)arg2;	// IMP=0x0000000100111420
- (void)pageLoadErrorControllerClosePage:(id)arg1;	// IMP=0x0000000100111390
- (id)pageLoadErrorControllerGetSecIdentityPreferencesController:(id)arg1;	// IMP=0x0000000100111314
- (void)pageLoadErrorController:(id)arg1 setAllowsSpecificHTTPSCertificate:(id)arg2 forHost:(id)arg3;	// IMP=0x0000000100111244
- (void)pageLoadErrorController:(id)arg1 loadFailedRequestAfterError:(id)arg2;	// IMP=0x00000001001111ac
- (_Bool)pageLoadErrorControllerShouldHandleCertificateError:(id)arg1;	// IMP=0x000000010011114c
- (void)pageLoadErrorControllerDidAddAlert:(id)arg1;	// IMP=0x00000001001110f8
- (void)dialogController:(id)arg1 dismissViewController:(id)arg2 withAdditionalAnimations:(CDUnknownBlockType)arg3;	// IMP=0x000000010011103c
- (void)dialogController:(id)arg1 presentViewController:(id)arg2 withAdditionalAnimations:(CDUnknownBlockType)arg3;	// IMP=0x0000000100110f80
- (void)dialogController:(id)arg1 didDismissDialog:(id)arg2;	// IMP=0x0000000100110f28
- (void)dialogController:(id)arg1 willPresentDialog:(id)arg2;	// IMP=0x0000000100110ecc
- (long long)dialogController:(id)arg1 presentationPolicyForDialog:(id)arg2;	// IMP=0x0000000100110dcc
- (id)loadingDialogPageTitleForPrintController:(id)arg1;	// IMP=0x0000000100110da8
- (id)pageTitleForPrintController:(id)arg1;	// IMP=0x0000000100110d84
- (id)URLStringForPrintController:(id)arg1;	// IMP=0x0000000100110d60
- (id)presentingViewControllerForPrintController:(id)arg1;	// IMP=0x0000000100110d00
- (_Bool)printControllerCanPresentPrintUI:(id)arg1;	// IMP=0x0000000100110c78
- (void)printController:(id)arg1 didCreatePrintInfo:(id)arg2;	// IMP=0x0000000100110c54
- (_Bool)printControllerPageIsLoading:(id)arg1;	// IMP=0x0000000100110c38
- (_Bool)printControllerShouldPrintReader:(id)arg1;	// IMP=0x0000000100110b48
- (void)_getAuthenticationForAutoFillController:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;	// IMP=0x00000001001108c8
- (void)formAutoFillControllerGetAuthenticationForAutoFill:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0000000100110798
- (_Bool)formAutoFillControllerShouldShowIconsInPasswordPicker:(id)arg1;	// IMP=0x0000000100110790
- (void)formAutoFillControllerDidFocusSensitiveFormField:(id)arg1;	// IMP=0x0000000100110764
- (void)formAutoFillControllerUserChoseToUseGeneratedPassword:(id)arg1;	// IMP=0x0000000100110754
- (_Bool)formAutoFillControllerDidUserDeclineAutomaticStrongPasswordForCurrentDomain:(id)arg1;	// IMP=0x00000001001106a8
- (_Bool)formAutoFillControllerShouldDisableStreamlinedLogin:(id)arg1;	// IMP=0x0000000100110684
- (id)formAutoFillControllerURLForFormAutoFill:(id)arg1;	// IMP=0x0000000100110660
- (_Bool)formAutoFillControllerCanPrefillForm:(id)arg1;	// IMP=0x0000000100110624
- (struct UIEdgeInsets)_webView:(id)arg1 finalObscuredInsetsForScrollView:(id)arg2 withVelocity:(struct CGPoint)arg3 targetContentOffset:(inout struct CGPoint *)arg4;	// IMP=0x0000000100110560
- (void)findOnPageCompletionProvider:(id)arg1 setStringToComplete:(id)arg2;	// IMP=0x00000001001104cc
- (void)updateFindCompletionProviderWithMatchesCount:(unsigned long long)arg1 forString:(id)arg2 forFindOnPageView:(id)arg3;	// IMP=0x0000000100110334
- (void)visibilityWillChangeForFindOnPageView:(id)arg1;	// IMP=0x000000010011026c
- (id)webViewForFindOnPageView:(id)arg1;	// IMP=0x0000000100110230
- (void)didFindAppBannerWithContent:(id)arg1;	// IMP=0x0000000100110030
- (void)didAutoDetectSiteSpecificSearchProviderWithOriginatingURL:(id)arg1 searchURLTemplate:(id)arg2;	// IMP=0x000000010010fee8
- (void)_webView:(id)arg1 logDiagnosticMessage:(id)arg2 description:(id)arg3 valueDictionary:(id)arg4;	// IMP=0x000000010010fe30
- (void)_webView:(id)arg1 logDiagnosticMessageWithEnhancedPrivacy:(id)arg2 description:(id)arg3;	// IMP=0x000000010010fde4
- (void)_webView:(id)arg1 logDiagnosticMessageWithValue:(id)arg2 description:(id)arg3 value:(id)arg4;	// IMP=0x000000010010fc78
- (void)_webView:(id)arg1 logDiagnosticMessageWithResult:(id)arg2 description:(id)arg3 result:(long long)arg4;	// IMP=0x000000010010fb68
- (void)_webView:(id)arg1 logDiagnosticMessage:(id)arg2 description:(id)arg3;	// IMP=0x000000010010f994
- (void)loadingControllerWillStartUserDrivenLoad:(id)arg1;	// IMP=0x000000010010f964
- (void)loadingController:(id)arg1 willLoadRequest:(id)arg2 userDriven:(_Bool)arg3;	// IMP=0x000000010010f8ec
- (long long)_webView:(id)arg1 decidePolicyForFocusedElement:(id)arg2;	// IMP=0x000000010010f768
- (void)_webView:(id)arg1 insertTextSuggestion:(id)arg2 inInputSession:(id)arg3;	// IMP=0x000000010010f710
- (void)_webView:(id)arg1 accessoryViewCustomButtonTappedInFormInputSession:(id)arg2;	// IMP=0x000000010010f6f4
- (void)_webView:(id)arg1 willSubmitFormValues:(id)arg2 userObject:(id)arg3 submissionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000010010f450
- (id)_webViewAdditionalContextForStrongPasswordAssistance:(id)arg1;	// IMP=0x000000010010f348
- (void)_webView:(id)arg1 didResignInputElementStrongPasswordAppearanceWithUserInfo:(id)arg2;	// IMP=0x000000010010f328
- (_Bool)_webView:(id)arg1 focusRequiresStrongPasswordAssistance:(id)arg2;	// IMP=0x000000010010f270
- (void)_webView:(id)arg1 didStartInputSession:(id)arg2;	// IMP=0x000000010010f1c4
- (void)_webView:(id)arg1 willStartInputSession:(id)arg2;	// IMP=0x000000010010f100
- (void)_webView:(id)arg1 hasVideoInPictureInPictureDidChange:(_Bool)arg2;	// IMP=0x000000010010f06c
- (long long)_webView:(id)arg1 dataOwnerForDragSession:(id)arg2;	// IMP=0x000000010010f014
- (long long)_webView:(id)arg1 dataOwnerForDropSession:(id)arg2;	// IMP=0x000000010010efbc
- (void)_webView:(id)arg1 didChangeSafeAreaShouldAffectObscuredInsets:(_Bool)arg2;	// IMP=0x000000010010ef68
- (_Bool)_webView:(id)arg1 fileUploadPanelContentIsManagedWithInitiatingFrame:(id)arg2;	// IMP=0x000000010010ee5c
- (void)_webView:(id)arg1 requestGeolocationAuthorizationForURL:(id)arg2 frame:(id)arg3 decisionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000010010ed74
- (id)_webView:(id)arg1 adjustedDataInteractionItemProvidersForItemProvider:(id)arg2 representingObjects:(id)arg3 additionalData:(id)arg4;	// IMP=0x000000010010ea98
- (void)_attemptDeferredDropNavigation;	// IMP=0x000000010010ea00
- (void)_webView:(id)arg1 dataInteractionOperationWasHandled:(_Bool)arg2 forSession:(id)arg3 itemProviders:(id)arg4;	// IMP=0x000000010010e9a4
- (_Bool)_webView:(id)arg1 performDataInteractionOperationWithItemProviders:(id)arg2;	// IMP=0x000000010010e7dc
- (unsigned long long)_webView:(id)arg1 willUpdateDataInteractionOperationToOperation:(unsigned long long)arg2 forSession:(id)arg3;	// IMP=0x000000010010e704
- (void)_webView:(id)arg1 dataInteraction:(id)arg2 session:(id)arg3 didEndWithOperation:(unsigned long long)arg4;	// IMP=0x000000010010e6f8
- (void)_webView:(id)arg1 dataInteraction:(id)arg2 sessionWillBegin:(id)arg3;	// IMP=0x000000010010e6ec
- (void)_webView:(id)arg1 imageOrMediaDocumentSizeChanged:(struct CGSize)arg2;	// IMP=0x000000010010e6cc
- (void)_webView:(id)arg1 printFrame:(id)arg2;	// IMP=0x000000010010e648
- (void)_webView:(id)arg1 decideWebApplicationCacheQuotaForSecurityOrigin:(id)arg2 currentQuota:(unsigned long long)arg3 totalBytesNeeded:(unsigned long long)arg4 decisionHandler:(CDUnknownBlockType)arg5;	// IMP=0x000000010010e4b0
- (void)_webView:(id)arg1 decideDatabaseQuotaForSecurityOrigin:(id)arg2 currentQuota:(unsigned long long)arg3 currentOriginUsage:(unsigned long long)arg4 currentDatabaseUsage:(unsigned long long)arg5 expectedUsage:(unsigned long long)arg6 decisionHandler:(CDUnknownBlockType)arg7;	// IMP=0x000000010010e2fc
- (id)_presentingViewControllerForWebView:(id)arg1;	// IMP=0x000000010010e210
- (_Bool)_webView:(id)arg1 shouldIncludeAppLinkActionsForElement:(id)arg2;	// IMP=0x000000010010e208
- (struct CGRect)sourceRectForPopoverActionPicker:(id)arg1;	// IMP=0x000000010010e100
- (id)presentingViewControllerForAction:(id)arg1;	// IMP=0x000000010010e08c
- (id)_webView:(id)arg1 alternateURLFromImage:(id)arg2 userInfo:(id *)arg3;	// IMP=0x000000010010dfac
- (void)animateElement:(id)arg1 toBarItem:(long long)arg2;	// IMP=0x000000010010de7c
- (struct CGRect)_convertRectFromDocumentToWebView:(struct CGRect)arg1;	// IMP=0x000000010010dd6c
- (void)_webViewDidExitFullscreen:(id)arg1;	// IMP=0x000000010010dc6c
- (void)_webViewDidEnterFullscreen:(id)arg1;	// IMP=0x000000010010db68
- (void)_webViewFullscreenMayReturnToInline:(id)arg1;	// IMP=0x000000010010db14
- (void)webViewDidClose:(id)arg1;	// IMP=0x000000010010da18
- (void)_webView:(id)arg1 takeFocus:(long long)arg2;	// IMP=0x000000010010d9c4
- (void)_webView:(id)arg1 createWebViewWithConfiguration:(id)arg2 forNavigationAction:(id)arg3 windowFeatures:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;	// IMP=0x000000010010d2d0
- (void)_webView:(id)arg1 requestStorageAccessPanelForDomain:(id)arg2 underCurrentDomain:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000010010d19c
- (void)webView:(id)arg1 runJavaScriptTextInputPanelWithPrompt:(id)arg2 defaultText:(id)arg3 initiatedByFrame:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;	// IMP=0x000000010010cfe0
- (void)webView:(id)arg1 runJavaScriptConfirmPanelWithMessage:(id)arg2 initiatedByFrame:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000010010ce4c
- (void)webView:(id)arg1 runJavaScriptAlertPanelWithMessage:(id)arg2 initiatedByFrame:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000010010ccbc
- (void)_webView:(id)arg1 mediaCaptureStateDidChange:(unsigned long long)arg2;	// IMP=0x000000010010cc08
- (void)_webView:(id)arg1 checkUserMediaPermissionForURL:(id)arg2 mainFrameURL:(id)arg3 frameIdentifier:(unsigned long long)arg4 decisionHandler:(CDUnknownBlockType)arg5;	// IMP=0x000000010010cb20
- (void)_webView:(id)arg1 requestUserMediaAuthorizationForDevices:(unsigned long long)arg2 url:(id)arg3 mainFrameURL:(id)arg4 decisionHandler:(CDUnknownBlockType)arg5;	// IMP=0x000000010010ca30
- (void)_webView:(id)arg1 willGoToBackForwardListItem:(id)arg2 inPageCache:(_Bool)arg3;	// IMP=0x000000010010ca08
- (void)_webView:(id)arg1 willSnapshotBackForwardListItem:(id)arg2;	// IMP=0x000000010010c988
- (void)_webViewDidEndNavigationGesture:(id)arg1 withNavigationToBackForwardListItem:(id)arg2;	// IMP=0x000000010010c858
- (void)_webViewWillEndNavigationGesture:(id)arg1 withNavigationToBackForwardListItem:(id)arg2;	// IMP=0x000000010010c7b4
- (void)_webViewDidBeginNavigationGesture:(id)arg1;	// IMP=0x000000010010c760
- (void)_webView:(id)arg1 didFinishLoadForQuickLookDocumentInMainFrame:(id)arg2;	// IMP=0x000000010010c6a4
- (void)_webView:(id)arg1 didStartLoadForQuickLookDocumentInMainFrameWithFileName:(id)arg2 uti:(id)arg3;	// IMP=0x000000010010c600
- (id)_webCryptoMasterKeyForWebView:(id)arg1;	// IMP=0x000000010010c5e4
- (void)_webViewWebProcessDidCrash:(id)arg1;	// IMP=0x000000010010c2a0
- (void)_webView:(id)arg1 renderingProgressDidChange:(unsigned long long)arg2;	// IMP=0x000000010010c108
- (void)_webView:(id)arg1 navigation:(id)arg2 didSameDocumentNavigation:(long long)arg3;	// IMP=0x000000010010bb60
- (void)_webView:(id)arg1 didNegotiateModernTLS:(id)arg2;	// IMP=0x000000010010ba2c
- (void)_webView:(id)arg1 authenticationChallenge:(id)arg2 shouldAllowLegacyTLS:(CDUnknownBlockType)arg3;	// IMP=0x000000010010b784
- (void)webView:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000010010b350
- (void)webView:(id)arg1 didFailNavigation:(id)arg2 withError:(id)arg3;	// IMP=0x000000010010b168
- (void)webView:(id)arg1 didFinishNavigation:(id)arg2;	// IMP=0x000000010010a554
- (_Bool)_isLowMemoryDevice;	// IMP=0x000000010010a520
- (void)getApplicationManifestWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010010a494
- (id)touchIconFetcher;	// IMP=0x000000010010a440
@property(readonly, nonatomic) _SFWebClipMetadataFetcher *webClipMetadataFetcher;
@property(readonly, nonatomic) _SFInjectedJavaScriptController *activityJSController;
- (void)_commitPreviewedViewControllerInSafari:(id)arg1;	// IMP=0x000000010010a2a4
- (void)commitPreviewViewController:(id)arg1;	// IMP=0x000000010010a234
- (id)previewViewControllerForURL:(id)arg1;	// IMP=0x000000010010a1fc
- (_Bool)isAutomationEnabledForLinkPreviewHelper:(id)arg1;	// IMP=0x000000010010a1e0
- (_Bool)isPrivateBrowsingEnabledForPreviewHelper:(id)arg1;	// IMP=0x000000010010a1c4
- (void)linkPreviewHelperWillOpenUniveralLinkLocally:(id)arg1;	// IMP=0x000000010010a1b8
- (void)linkPreviewHelper:(id)arg1 addURLToReadingList:(id)arg2;	// IMP=0x0000000100109f1c
- (void)linkPreviewHelperWillBeginDownload:(id)arg1;	// IMP=0x0000000100109eac
- (void)linkPreviewHelper:(id)arg1 didProduceNavigationIntent:(id)arg2 forAction:(long long)arg3;	// IMP=0x0000000100109d84
- (void)linkPreviewHelper:(id)arg1 redirectToExternalNavigationResult:(id)arg2;	// IMP=0x0000000100109ca4
- (id)linkPreviewHelper:(id)arg1 resultOfLoadingURL:(id)arg2;	// IMP=0x0000000100109c7c
- (_Bool)linkPreviewHelper:(id)arg1 supportsAction:(long long)arg2 forURL:(id)arg3;	// IMP=0x0000000100109bb0
- (void)linkPreviewHelper:(id)arg1 commitPreviewViewControllerForAction:(long long)arg2;	// IMP=0x0000000100109a14
- (id)linkPreviewHelper:(id)arg1 previewViewControllerForURL:(id)arg2;	// IMP=0x0000000100109828
- (void)willDismissLinkPreviewViewController;	// IMP=0x00000001001097bc
- (void)_webView:(id)arg1 contextMenuDidEndForElement:(id)arg2;	// IMP=0x0000000100109768
- (void)_webView:(id)arg1 contextMenuForElement:(id)arg2 willCommitWithAnimator:(id)arg3;	// IMP=0x00000001001095c8
- (void)_webView:(id)arg1 contextMenuWillPresentForElement:(id)arg2;	// IMP=0x00000001001095a8
- (void)_webView:(id)arg1 contextMenuConfigurationForElement:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000001001094e0
- (_Bool)_webView:(id)arg1 gestureRecognizerCouldPinch:(id)arg2;	// IMP=0x0000000100109450
- (id)tabDocumentForPreviewURL:(id)arg1 relatedToWebView:(id)arg2;	// IMP=0x00000001001091e8
- (void)_didCommitPreviewViewController:(id)arg1;	// IMP=0x0000000100109148
- (void)_willCommitPreviewViewController:(id)arg1;	// IMP=0x0000000100108f9c
- (void)userDeclinedAutomaticStrongPasswordForCurrentDomainOnTabWithUUID:(id)arg1;	// IMP=0x0000000100108e88
- (void)automaticPasswordSheetDismissed;	// IMP=0x0000000100108e78
- (void)removeAutomaticPasswordButton;	// IMP=0x0000000100108e64
- (void)_webView:(id)arg1 navigationDidFinishDocumentLoad:(id)arg2;	// IMP=0x0000000100108e3c
- (void)_webView:(id)arg1 navigation:(id)arg2 didFailProvisionalLoadInSubframe:(id)arg3 withError:(id)arg4;	// IMP=0x0000000100108e18
- (void)webView:(id)arg1 didCommitNavigation:(id)arg2;	// IMP=0x0000000100108414
- (void)_donateTextAllowingDonationWithoutReaderText:(_Bool)arg1;	// IMP=0x0000000100107eec
- (void)_donateTextSoon;	// IMP=0x0000000100107d94
- (void)_clearNavigationSource;	// IMP=0x0000000100107d58
- (void)panel:(id)arg1 decidePolicyForLocalAuthenticatorWithCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100107c98
- (void)panel:(id)arg1 selectAssertionResponse:(id)arg2 source:(long long)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000100107ba4
- (void)panel:(id)arg1 requestPINWithRemainingRetries:(unsigned long long)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000100107ad0
- (void)panel:(id)arg1 dismissWebAuthenticationPanelWithResult:(long long)arg2;	// IMP=0x0000000100107a3c
- (void)panel:(id)arg1 updateWebAuthenticationPanel:(long long)arg2;	// IMP=0x000000010010791c
- (void)_webView:(id)arg1 runWebAuthenticationPanel:(id)arg2 initiatedByFrame:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000010010782c
- (void)_webView:(id)arg1 decidePolicyForSOAuthorizationLoadWithCurrentPolicy:(long long)arg2 forExtension:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000100107784
- (void)_webView:(id)arg1 contentRuleListWithIdentifier:(id)arg2 performedAction:(id)arg3 forURL:(id)arg4;	// IMP=0x0000000100107628
- (void)webView:(id)arg1 didFailProvisionalNavigation:(id)arg2 withError:(id)arg3;	// IMP=0x00000001001073d0
- (void)webView:(id)arg1 didReceiveServerRedirectForProvisionalNavigation:(id)arg2;	// IMP=0x00000001001073b4
- (void)webView:(id)arg1 didStartProvisionalNavigation:(id)arg2;	// IMP=0x000000010010702c
- (void)webView:(id)arg1 decidePolicyForNavigationResponse:(id)arg2 decisionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000010010622c
- (void)_didDecideNavigationPolicy:(long long)arg1 forNavigationResponse:(id)arg2;	// IMP=0x0000000100106134
- (void)_internalWebView:(id)arg1 decidePolicyForNavigationAction:(id)arg2 preferences:(id)arg3 decisionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000010010394c
- (void)webView:(id)arg1 decidePolicyForNavigationAction:(id)arg2 preferences:(id)arg3 decisionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000100103518
- (_Bool)_handleTwoFingerTapOnLinkWithContext:(id)arg1;	// IMP=0x00000001001031f8
- (void)setMediaStateIcon:(unsigned long long)arg1;	// IMP=0x0000000100103090
@property(readonly, nonatomic) unsigned long long mediaStateIcon;
- (void)toggleMediaStateMuted;	// IMP=0x0000000100103044
- (void)muteMediaCapture;	// IMP=0x0000000100102ff8
@property(readonly, nonatomic) _Bool audioOnly;
@property(readonly, nonatomic) _Bool canOverrideStatusBar;
- (void)statusBarIndicatorTappedWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000100102dbc
- (id)sfWebView:(id)arg1 didStartDownload:(id)arg2;	// IMP=0x0000000100102c88
- (void)sfWebViewDidEndFormControlInteraction:(id)arg1;	// IMP=0x0000000100102c80
- (void)sfWebViewDidStartFormControlInteraction:(id)arg1;	// IMP=0x0000000100102c5c
- (void)sfWebViewDidBecomeFirstResponder:(id)arg1;	// IMP=0x0000000100102c3c
- (void)sfWebViewDidChangeSafeAreaInsets:(id)arg1;	// IMP=0x0000000100102be8
- (void)_checkForAppLink;	// IMP=0x00000001001025dc
- (void)_openAppLinkInApp:(id)arg1 fromOriginalRequest:(id)arg2 updateAppLinkStrategy:(_Bool)arg3 webBrowserState:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;	// IMP=0x00000001001022bc
- (id)tabStateDataForQuickUpdate;	// IMP=0x0000000100102148
@property(readonly, nonatomic) _SFTabStateData *tabStateData;
- (void)invalidateSourceApplication;	// IMP=0x0000000100101c18
- (void)saveWebArchiveToPath:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0000000100101938
- (void)setQuickLookDocumentForCurrentBackForwardListItem:(id)arg1;	// IMP=0x0000000100101874
- (id)quickLookDocumentForCurrentBackForwardListItem;	// IMP=0x00000001001017cc
@property(readonly, nonatomic) _SFSafariSharingExtensionController *sharingExtensionController;
- (void)loadTestURL:(id)arg1 withCallback:(CDUnknownBlockType)arg2 pagesNeedingMemoryWarningSent:(id)arg3;	// IMP=0x000000010010159c
- (void)loadTestURL:(id)arg1 withCallback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100101530
- (id)suggestedFileExtensionForQuickLookDocument:(id)arg1;	// IMP=0x0000000100101524
- (id)suggestedFileNameForQuickLookDocument:(id)arg1;	// IMP=0x00000001001014fc
- (id)dataForQuickLookDocument:(id)arg1;	// IMP=0x00000001001014d4
- (id)suggestedFilenameForDisplayedPDF;	// IMP=0x00000001001014c4
- (id)dataForDisplayedPDF;	// IMP=0x00000001001014b4
@property(copy, nonatomic) NSString *customUserAgent;
- (id)_addTitlePrefixToString:(id)arg1;	// IMP=0x000000010010101c
- (void)_forceStopLoading;	// IMP=0x0000000100100fe0
- (void)_loadStartedDuringSimulatedClickForURL:(id)arg1;	// IMP=0x0000000100100fdc
- (void)_updateInitialZoomScaleForPPT;	// IMP=0x0000000100100fd8
- (id)_backForwardList;	// IMP=0x0000000100100fc8
- (void)loadAlternateHTMLString:(id)arg1 baseURL:(id)arg2 forUnreachableURL:(id)arg3;	// IMP=0x0000000100100f3c
- (void)_destroyDocumentView;	// IMP=0x0000000100100b34
- (void)_createDocumentViewWithConfiguration:(id)arg1;	// IMP=0x00000001001000e0
- (void)_createDocumentViewRelatedTo:(id)arg1;	// IMP=0x00000001000fffb4
- (id)_webViewConfiguration;	// IMP=0x00000001000ff8bc
- (void)performAutoFillAction;	// IMP=0x00000001000ff8ac
- (void)_authenticateForAutoFillIfNeeded;	// IMP=0x00000001000ff824
- (void)presentNextDialogIfNeeded;	// IMP=0x00000001000ff7f0
- (void)setAllowsRemoteInspection:(_Bool)arg1;	// IMP=0x00000001000ff7e0
- (_Bool)hasFailedURL;	// IMP=0x00000001000ff7a0
- (id)expectedOrCurrentURL;	// IMP=0x00000001000ff790
- (id)committedURL;	// IMP=0x00000001000ff780
- (void)becomeFirstResponderWithSelectionMovingForward:(_Bool)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000ff6b0
- (struct __SecTrust *)_serverTrust;	// IMP=0x00000001000ff6a0
- (_Bool)mustShowBarsForBackForwardListItem:(id)arg1;	// IMP=0x00000001000ff638
- (void)restoreSessionState:(id)arg1 andNavigate:(_Bool)arg2 fromSafariViewService:(_Bool)arg3;	// IMP=0x00000001000ff4fc
- (void)restoreSessionState:(id)arg1 andNavigate:(_Bool)arg2;	// IMP=0x00000001000ff4dc
@property(readonly, nonatomic) _WKSessionState *sessionState;
@property(readonly, nonatomic, getter=isAlive) _Bool alive;
- (void)unhibernate;	// IMP=0x00000001000ff140
- (void)hibernate;	// IMP=0x00000001000fef30
- (void)clearBackForwardList;	// IMP=0x00000001000feed4
- (void)clearBackForwardListKeepingCurrentItem;	// IMP=0x00000001000fee78
- (void)goToBackForwardListItem:(id)arg1;	// IMP=0x00000001000fec78
- (id)_forwardListWithLimit:(unsigned long long)arg1;	// IMP=0x00000001000feba0
- (id)_backListWithLimit:(unsigned long long)arg1;	// IMP=0x00000001000feacc
- (_Bool)isPDFDocument;	// IMP=0x0000000100004e04
- (void)stopLoading;	// IMP=0x000000010000a834
- (void)stopLoadingUserInitiated;	// IMP=0x00000001000feaac
- (id)_loadNextFallbackURLWithWebClip:(id)arg1;	// IMP=0x00000001000fe880
- (id)loadWebClip:(id)arg1 userDriven:(_Bool)arg2;	// IMP=0x00000001000fe69c
- (void)_updateFallbackURLsForUserTypedAddress:(id)arg1;	// IMP=0x00000001000fe53c
- (id)_loadSearchResultForQuery:(id)arg1;	// IMP=0x00000001000fe2e8
- (id)_loadUserTypedAddress:(id)arg1;	// IMP=0x00000001000fe20c
- (void)setOverlaidAccessoryViewsInset:(struct CGSize)arg1;	// IMP=0x00000001000fe1fc
- (id)pdfView;	// IMP=0x0000000100004e14
@property(readonly, nonatomic) NSString *URLString;
- (void)_loadingControllerDidStopLoadingWithError:(id)arg1;	// IMP=0x00000001000fe098
- (void)_didFinishLoading;	// IMP=0x00000001000fe05c
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;	// IMP=0x00000001000fdba0
- (id)_initWithBrowserController:(id)arg1 configuration:(id)arg2;	// IMP=0x00000001000fda34
- (void)doneWaitingToContinueUserActivity;	// IMP=0x00000001000fd938
- (void)didFailToContinueUserActivity;	// IMP=0x00000001000fd924
- (void)prepareToContinueUserActivity;	// IMP=0x00000001000fd898
- (_Bool)shouldBlockAppSuggestionBanner:(id)arg1;	// IMP=0x00000001000fd840
- (void)setAppSuggestionBanner:(id)arg1 isPinned:(_Bool)arg2;	// IMP=0x00000001000fd7dc
- (void)dismissAppSuggestionBanner:(id)arg1;	// IMP=0x00000001000fd778
- (void)setClosed:(_Bool)arg1 userDriven:(_Bool)arg2;	// IMP=0x00000001000fd6f4
- (void)userDidManipulateVisibleRegion;	// IMP=0x00000001000fd6d4
- (void)downloadShouldContinueAfterReceivingResponse:(id)arg1 decisionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000fd424
- (void)_presentDialogToAllowDownload:(id)arg1 allowViewAction:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000001000fd184
- (void)_showGenericDownloadAlert;	// IMP=0x00000001000fd170
- (void)downloadDidFinish:(id)arg1;	// IMP=0x00000001000fceb0
- (void)downloadDidFail:(id)arg1;	// IMP=0x00000001000fce5c
- (void)animateElementToDownloadsBarItemSoon:(id)arg1;	// IMP=0x00000001000fce50
- (void)downloadDidStart:(id)arg1;	// IMP=0x00000001000fcd48
- (_Bool)_canShowDownloadWithoutPrompting:(id)arg1;	// IMP=0x00000001000fcc18
- (void)_showDownload:(id)arg1 path:(id)arg2;	// IMP=0x00000001000fc200
- (void)showDownload:(id)arg1;	// IMP=0x00000001000fc040
- (_Bool)_showICSControllerForPath:(id)arg1 sourceURL:(id)arg2 beforeDismissHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000001000fbef8
- (void)_showPassBookControllerForPass:(id)arg1;	// IMP=0x00000001000fbe3c
- (id)resultOfLoadingURL:(id)arg1;	// IMP=0x00000001000fbdac
- (id)_resultOfLoadingRequest:(id)arg1 inMainFrame:(_Bool)arg2 userInitiated:(_Bool)arg3;	// IMP=0x00000001000fba08
- (id)_readingListArchiveNextPageLinkForRequest:(id)arg1 targetFrame:(id)arg2;	// IMP=0x00000001000fb7d4
- (void)_redirectToExternalNavigationResult:(id)arg1 fromOriginalRequest:(id)arg2 promptPolicy:(long long)arg3 isMainFrame:(_Bool)arg4 userAction:(id)arg5;	// IMP=0x00000001000faee4
- (void)loadWindowDotOpenExternalNavigationResult:(id)arg1 fromOriginalRequest:(id)arg2;	// IMP=0x00000001000fae70
- (void)_queueAlertForRedirectToExternalNavigationResult:(id)arg1 fromOriginalRequest:(id)arg2 isMainFrame:(_Bool)arg3 promptPolicy:(long long)arg4 userAction:(id)arg5;	// IMP=0x00000001000fa894
- (void)_addNoFeedAppSupportAlert;	// IMP=0x00000001000fa6dc
- (void)_completeRedirectToExternalNavigationResult:(id)arg1 fromOriginalRequest:(id)arg2 dialogResult:(long long)arg3;	// IMP=0x00000001000fa580
- (void)_cleanUpAfterRedirectToExternalApp;	// IMP=0x00000001000fa52c
- (_Bool)_shouldCleanUpAfterRedirectToExternalApp;	// IMP=0x00000001000fa4ac
- (void)_stoppedLoadingResources;	// IMP=0x00000001000fa43c
- (void)_startedLoadingResources;	// IMP=0x00000001000fa3cc
- (void)_setAppBannerWhenPainted:(id)arg1;	// IMP=0x00000001000fa2ec
- (void)_clearAppBannerIfNotCurrentStoreBanner;	// IMP=0x00000001000fa254
- (id)_EVOrganizationName;	// IMP=0x00000001000fa030
- (void)_invalidateEVOrganizationName;	// IMP=0x00000001000fa004
@property(readonly, nonatomic) _Bool canGoBackToParentTab;
@property(readonly, nonatomic) _Bool isSecure;
- (_Bool)isPageEligibileToShowNotSecureWarning;	// IMP=0x00000001000f9b38
- (id)_menuElementForBackForwardListItem:(id)arg1;	// IMP=0x00000001000f991c
- (id)forwardListMenuWithLimit:(int)arg1;	// IMP=0x00000001000f9838
- (id)backListMenuWithLimit:(int)arg1;	// IMP=0x00000001000f944c
- (_Bool)canGoForward;	// IMP=0x00000001000053a4
- (_Bool)canGoBack;	// IMP=0x0000000100005394
- (void)_updateShowingContinuous;	// IMP=0x00000001000f93a0
- (int)readingListBookmarkID;	// IMP=0x0000000100005024
@property(readonly, nonatomic, getter=isShowingErrorPage) _Bool showingErrorPage;
- (_Bool)shouldActivateReaderWhenAvailable;	// IMP=0x00000001000f91e0
- (_Bool)currentPageLoadedFromReadingList;	// IMP=0x00000001000053c8
@property(readonly, nonatomic) NSURL *URLForPerSitePreferences;
@property(readonly, nonatomic) _Bool canHideToolbar;
- (void)perSiteSettingsUIPresentSettings;	// IMP=0x00000001000f9098
@property(readonly, nonatomic) _SFWebView *activeWebView;
- (void)_showPerSitePreferencesPopoverViewControllerIfPossible;	// IMP=0x00000001000f8dc8
@property(readonly, nonatomic) _Bool canShowPageFormatMenu;
- (void)reloadEnablingContentBlockers:(_Bool)arg1;	// IMP=0x00000001000f8c64
- (void)resetPageZoomSetting;	// IMP=0x00000001000f8948
- (void)decreasePageZoomSetting;	// IMP=0x00000001000f8668
- (void)increasePageZoomSetting;	// IMP=0x00000001000f8388
- (void)_updatePageZoomWithPreference;	// IMP=0x00000001000f80ec
@property(nonatomic) double pageZoomFactor;
- (void)_reloadFromOrigin:(_Bool)arg1;	// IMP=0x00000001000f7f8c
- (void)reloadFromOrigin;	// IMP=0x00000001000f7f7c
- (void)reload;	// IMP=0x00000001000f7f6c
- (void)goForwardAllowingNewTabToSpawnIfNeeded:(_Bool)arg1;	// IMP=0x00000001000f7cf0
- (void)goForward;	// IMP=0x00000001000f7ce0
- (void)goBackToParentTab;	// IMP=0x00000001000f7c8c
- (void)goBackAllowingNewTabToSpawnIfNeeded:(_Bool)arg1;	// IMP=0x00000001000f79e8
- (void)goBack;	// IMP=0x00000001000f79d8
- (void)restoreScrollPositionWithCloudTab:(id)arg1;	// IMP=0x00000001000f78f8
- (id)loadCloudTab:(id)arg1;	// IMP=0x00000001000f7830
- (id)_loadBookmark:(id)arg1;	// IMP=0x00000001000f7650
- (void)loadURLForContinuousReadingList:(id)arg1 fromBookmark:(id)arg2;	// IMP=0x00000001000f75dc
- (id)_loadURL:(id)arg1 fromBookmark:(id)arg2;	// IMP=0x00000001000f7464
- (void)setNeedsSendTelemetryForProvisionalLoad;	// IMP=0x00000001000f7458
- (void)clearPageLoadStatistics;	// IMP=0x00000001000f7448
- (_Bool)_loadExternalURL:(id)arg1 withOptions:(id)arg2;	// IMP=0x00000001000f71a0
- (id)_loadURLInternal:(id)arg1 userDriven:(_Bool)arg2;	// IMP=0x00000001000f7038
- (id)loadURL:(id)arg1 userDriven:(_Bool)arg2;	// IMP=0x0000000100007528
- (void)handleNavigationIntent:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000001000f6ca4
- (void)dispatchNavigationIntent:(id)arg1;	// IMP=0x00000001000f6b6c
- (void)snapshotWithSize:(struct CGSize)arg1 topBackdropHeight:(double)arg2 options:(unsigned long long)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x00000001000f6abc
- (void)snapshotWithSize:(struct CGSize)arg1 options:(unsigned long long)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00000001000f6a18
- (void)snapshotForWebClipIcon:(CDUnknownBlockType)arg1;	// IMP=0x00000001000f6934
- (void)_updateSnapshotForWebClip:(id)arg1;	// IMP=0x00000001000f6744
- (id)_loadRequest:(id)arg1 userDriven:(_Bool)arg2 shouldOpenExternalURLs:(_Bool)arg3;	// IMP=0x00000001000f6588
- (id)loadRequest:(id)arg1 userDriven:(_Bool)arg2;	// IMP=0x00000001000075b8
@property(readonly, nonatomic) NSString *suggestedTitleForCurrentURL;
- (id)titleForSharing;	// IMP=0x00000001000f6494
- (id)titleForNewBookmark;	// IMP=0x00000001000f647c
@property(readonly, copy, nonatomic) NSString *title;
- (_Bool)hasQuickLookContent;	// IMP=0x00000001000051b8
@property(readonly, nonatomic, getter=isLoading) _Bool loading;
- (void)clearBrowserController;	// IMP=0x00000001000f63d8
- (void)clearTabReuseURL;	// IMP=0x00000001000f63c8
- (id)URLForStatePersisting;	// IMP=0x00000001000f63b8
@property(readonly, nonatomic) NSURL *cachedCanonicalURLOrURLForSharing;
- (void)_clearCachedCanonicalURL;	// IMP=0x00000001000f6370
- (void)fetchCanonicalURLWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000001000f615c
- (id)URLForSharing;	// IMP=0x00000001000f604c
- (id)URL;	// IMP=0x000000010000500c
- (id)customUserVisibleStringForReadingListBookmarkURL:(id)arg1;	// IMP=0x00000001000f5f34
@property(readonly, nonatomic) __weak id <WBSFluidProgressStateSource> currentFluidProgressStateSource;
- (void)fluidProgressRocketAnimationDidComplete;	// IMP=0x00000001000f5e88
- (void)endSuppressingProgressAnimationAnimated:(_Bool)arg1;	// IMP=0x00000001000f5e00
- (void)endSuppressingProgressAnimation;	// IMP=0x00000001000f5df0
- (void)beginSuppressingProgressAnimation;	// IMP=0x00000001000f5d88
- (void)clearFluidProgressState;	// IMP=0x00000001000f5d44
- (_Bool)createFluidProgressState;	// IMP=0x00000001000f5c64
- (void)animateProgressForCompletedDocument;	// IMP=0x00000001000f5c10
@property(readonly, nonatomic, getter=isContentReady) _Bool contentReady;
- (void)_notifyImpressionAnalyticsRecorderIfNeededTabDocumentDidBecomeActive:(_Bool)arg1;	// IMP=0x00000001000f5aa8
- (_Bool)_analyticsRecorderShouldIgnoreURLWithNavigationPolicy:(long long)arg1 forNavigationAction:(id)arg2;	// IMP=0x00000001000f5970
- (void)_didDecideNavigationPolicy:(long long)arg1 forNavigationAction:(id)arg2;	// IMP=0x00000001000f57c0
- (void)_loadingControllerEstimatedProgressChangedTo:(double)arg1;	// IMP=0x00000001000f5718
- (void)_loadingControllerDidStartLoading;	// IMP=0x00000001000f5690
- (void)_loadingControllerWillLoadRequest:(id)arg1 userDriven:(_Bool)arg2;	// IMP=0x00000001000f54c0
- (_Bool)_shouldSuppressDialogsThatBlockWebProcess;	// IMP=0x00000001000f54a0
@property(readonly, nonatomic) double estimatedProgress;
- (void)willClose;	// IMP=0x00000001000f52e4
- (void)_closeTabDocumentAnimated:(_Bool)arg1;	// IMP=0x00000001000f5280
- (void)stopAdvertisingProactiveActivityContent;	// IMP=0x00000001000f5248
- (void)invalidateUserActivity;	// IMP=0x00000001000f5160
- (void)updateUserActivity;	// IMP=0x00000001000f4d30
@property(readonly, nonatomic) UIView *frontView;
- (void)setNeedsNewTabSnapshot;	// IMP=0x00000001000f4c84
- (void)unfreezeAfterNavigationGesture:(_Bool)arg1;	// IMP=0x00000001000f4c6c
- (void)freezeForNavigationGesture;	// IMP=0x00000001000f4c5c
@property(readonly, nonatomic) _SFNavigationBarItem *navigationBarItem;
- (id)initWithTabStateData:(id)arg1 hibernated:(_Bool)arg2 browserController:(id)arg3;	// IMP=0x00000001000f46e8
- (id)initWithTitle:(id)arg1 URL:(id)arg2 UUID:(id)arg3 privateBrowsingEnabled:(_Bool)arg4 controlledByAutomation:(_Bool)arg5 hibernated:(_Bool)arg6 bookmark:(id)arg7 browserController:(id)arg8 relatedWebView:(id)arg9;	// IMP=0x00000001000f4500
- (void)_removeParentChildTabDocumentRelations;	// IMP=0x00000001000f437c
- (id)_sessionStateWithoutParentItem;	// IMP=0x00000001000f426c
@property(readonly, nonatomic) NSArray *tabCollectionItems;
- (id)itemForTabCollectionView:(id)arg1;	// IMP=0x00000001000f3d68
- (void)resetTabViewItems;	// IMP=0x00000001000f3bb8
- (id)_initWithTitle:(id)arg1 URL:(id)arg2 UUID:(id)arg3 privateBrowsingEnabled:(_Bool)arg4 controlledByAutomation:(_Bool)arg5 bookmark:(id)arg6 browserController:(id)arg7 createDocumentView:(CDUnknownBlockType)arg8;	// IMP=0x00000001000f35e8
- (void)_translationAvailabilityDidChange:(id)arg1;	// IMP=0x00000001000f3460
- (void)_updateNavigationBarItem;	// IMP=0x00000001000f2d98
- (void)_searchEngineControllerDidBecomeAvailable:(id)arg1;	// IMP=0x00000001000f2d0c
- (void)webView:(id)arg1 shouldLoadIconWithParameters:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000001000f2684
- (void)_setIcon:(id)arg1 isMonogram:(_Bool)arg2;	// IMP=0x00000001000f25f4
- (void)updateTabIcon;	// IMP=0x00000001000f214c
- (void)updateUsesDarkTheme;	// IMP=0x00000001000f1fac
- (void)_cancelFaviconUpdate;	// IMP=0x00000001000f1f14
- (void)_updateFaviconSoon;	// IMP=0x00000001000f1dcc
- (void)updateTabTitle;	// IMP=0x00000001000f1c2c
- (id)tabBarTitle;	// IMP=0x0000000100004e74
- (id)_titleIncludeLoading:(_Bool)arg1 allowURLStringFallback:(_Bool)arg2;	// IMP=0x0000000100004f7c
- (id)_titleIncludeLoading:(_Bool)arg1 allowURLStringFallback:(_Bool)arg2 allowUntitled:(_Bool)arg3;	// IMP=0x00000001000f19f4
@property(readonly, nonatomic, getter=isControlledByAutomation) _Bool controlledByAutomation;
@property(readonly, nonatomic, getter=isPrivateBrowsingEnabled) _Bool privateBrowsingEnabled;
- (void)updateAccessibilityIdentifier;	// IMP=0x00000001000f176c
- (void)_updateSubviews;	// IMP=0x00000001000f172c
@property(readonly, nonatomic) TabDocumentView *view;
- (void)dealloc;	// IMP=0x00000001000f1548
- (void)setInitialURLForStatePersisting:(id)arg1 title:(id)arg2;	// IMP=0x00000001000f14b4
@property(readonly, copy) NSString *description;
- (id)initWithTitle:(id)arg1 URL:(id)arg2 UUID:(id)arg3 privateBrowsingEnabled:(_Bool)arg4 hibernated:(_Bool)arg5 bookmark:(id)arg6 browserController:(id)arg7;	// IMP=0x00000001000f11f4
- (id)initWithBrowserController:(id)arg1;	// IMP=0x00000001000f1130

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

