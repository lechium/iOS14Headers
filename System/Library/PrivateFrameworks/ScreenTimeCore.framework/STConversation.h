/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:43:32 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/ScreenTimeCore.framework/ScreenTimeCore
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol OS_dispatch_queue;
@class NSMapTable, NSObject, CNContactStore, CNDowntimeWhitelist, STManagementState, DMFCommunicationPolicyMonitor, DMFApplicationPolicyMonitor, NSString, DMFEmergencyModeMonitor;

@interface STConversation : NSObject {

	NSMapTable* _contextByHandles;
	NSObject*<OS_dispatch_queue> _stateChangeQueue;
	NSObject* _didFetchInitialStateLock;
	BOOL _isThirdPartyBundleIdentifier;
	BOOL _emergencyModeEnabled;
	BOOL _didFetchInitialScreenTimePolicyState;
	BOOL _didFetchInitialApplicationState;
	BOOL _didFetchInitialEmergencyModeState;
	BOOL _didFetchInitialThirdPartyApplicationState;
	int _policyNotifyToken;
	int _emergencyModeNotifyToken;
	CNContactStore* _contactStore;
	CNDowntimeWhitelist* _whitelist;
	STManagementState* _managementState;
	DMFCommunicationPolicyMonitor* _communicationPolicyMonitor;
	DMFApplicationPolicyMonitor* _thirdPartyApplicationPolicyMonitor;
	NSString* _bundleIdentifier;
	long long _generalScreenTimePolicy;
	long long _whileLimitedPolicy;
	unsigned long long _currentApplicationState;
	long long _currentThirdPartyApplicationState;
	DMFEmergencyModeMonitor* _emergencyModeMonitor;
	STConversation* _me;
	/*^block*/id _conversationCompletionHandler;

}

@property (readonly) CNContactStore * contactStore;                                               //@synthesize contactStore=_contactStore - In the implementation block
@property (readonly) CNDowntimeWhitelist * whitelist;                                             //@synthesize whitelist=_whitelist - In the implementation block
@property (retain) STManagementState * managementState;                                           //@synthesize managementState=_managementState - In the implementation block
@property (retain) DMFCommunicationPolicyMonitor * communicationPolicyMonitor;                    //@synthesize communicationPolicyMonitor=_communicationPolicyMonitor - In the implementation block
@property (retain) DMFApplicationPolicyMonitor * thirdPartyApplicationPolicyMonitor;              //@synthesize thirdPartyApplicationPolicyMonitor=_thirdPartyApplicationPolicyMonitor - In the implementation block
@property (copy,readonly) NSString * bundleIdentifier;                                            //@synthesize bundleIdentifier=_bundleIdentifier - In the implementation block
@property (readonly) BOOL isThirdPartyBundleIdentifier;                                           //@synthesize isThirdPartyBundleIdentifier=_isThirdPartyBundleIdentifier - In the implementation block
@property (assign) long long generalScreenTimePolicy;                                             //@synthesize generalScreenTimePolicy=_generalScreenTimePolicy - In the implementation block
@property (assign) long long whileLimitedPolicy;                                                  //@synthesize whileLimitedPolicy=_whileLimitedPolicy - In the implementation block
@property (assign) unsigned long long currentApplicationState;                                    //@synthesize currentApplicationState=_currentApplicationState - In the implementation block
@property (assign) long long currentThirdPartyApplicationState;                                   //@synthesize currentThirdPartyApplicationState=_currentThirdPartyApplicationState - In the implementation block
@property (retain) DMFEmergencyModeMonitor * emergencyModeMonitor;                                //@synthesize emergencyModeMonitor=_emergencyModeMonitor - In the implementation block
@property (assign) BOOL emergencyModeEnabled;                                                     //@synthesize emergencyModeEnabled=_emergencyModeEnabled - In the implementation block
@property (assign) BOOL didFetchInitialScreenTimePolicyState;                                     //@synthesize didFetchInitialScreenTimePolicyState=_didFetchInitialScreenTimePolicyState - In the implementation block
@property (assign) BOOL didFetchInitialApplicationState;                                          //@synthesize didFetchInitialApplicationState=_didFetchInitialApplicationState - In the implementation block
@property (assign) BOOL didFetchInitialEmergencyModeState;                                        //@synthesize didFetchInitialEmergencyModeState=_didFetchInitialEmergencyModeState - In the implementation block
@property (assign) BOOL didFetchInitialThirdPartyApplicationState;                                //@synthesize didFetchInitialThirdPartyApplicationState=_didFetchInitialThirdPartyApplicationState - In the implementation block
@property (readonly) int policyNotifyToken;                                                       //@synthesize policyNotifyToken=_policyNotifyToken - In the implementation block
@property (readonly) int emergencyModeNotifyToken;                                                //@synthesize emergencyModeNotifyToken=_emergencyModeNotifyToken - In the implementation block
@property (retain) STConversation * me;                                                           //@synthesize me=_me - In the implementation block
@property (copy) id conversationCompletionHandler;                                                //@synthesize conversationCompletionHandler=_conversationCompletionHandler - In the implementation block
+(void)requestConversationWithBundleIdentifier:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(STConversation *)me;
-(long long)generalScreenTimePolicy;
-(BOOL)_shouldGeneralScreenTimeAllowHandles:(id)arg1 context:(id)arg2 ;
-(void)callCompletionHandlerIfNeededWithThirdPartyConversation:(id)arg1 error:(id)arg2 ;
-(id)initWithBundleIdentifier:(id)arg1 contactStore:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)_populateThirdPartyAllowedContactsByHandlesForContactHandles:(id)arg1 context:(id)arg2 ;
-(NSString *)bundleIdentifier;
-(int)emergencyModeNotifyToken;
-(BOOL)emergencyModeEnabled;
-(id)conversationCompletionHandler;
-(void)_emergencyModeDidChange;
-(void)setDidFetchInitialApplicationState:(BOOL)arg1 ;
-(void)setDidFetchInitialThirdPartyApplicationState:(BOOL)arg1 ;
-(void)dealloc;
-(void)_updateThirdPartyContext:(id)arg1 forHandles:(id)arg2 ;
-(void)setEmergencyModeMonitor:(DMFEmergencyModeMonitor *)arg1 ;
-(CNContactStore *)contactStore;
-(unsigned long long)currentApplicationState;
-(long long)currentThirdPartyApplicationState;
-(void)setEmergencyModeEnabled:(BOOL)arg1 ;
-(long long)whileLimitedPolicy;
-(id)initWithBundleIdentifier:(id)arg1 ;
-(void)setConversationCompletionHandler:(id)arg1 ;
-(id)_filteredArrayForKnownHandlesInArray:(id)arg1 ;
-(void)_updateAllContextsUpdateGeneral:(BOOL)arg1 updateLimited:(BOOL)arg2 updateCurrentApplicationState:(BOOL)arg3 updateAllowedByContactsHandle:(BOOL)arg4 refreshContacts:(BOOL)arg5 refreshWhitelist:(BOOL)arg6 updateEmergencyMode:(BOOL)arg7 ;
-(void)setCurrentApplicationState:(unsigned long long)arg1 ;
-(BOOL)isThirdPartyBundleIdentifier;
-(void)_updateAllContextsForNewWhileLimitedPolicyOrWhitelist;
-(DMFApplicationPolicyMonitor *)thirdPartyApplicationPolicyMonitor;
-(void)setDidFetchInitialScreenTimePolicyState:(BOOL)arg1 ;
-(void)_stConversationCommonInitSetupObservationOfStateChanges;
-(void)_currentApplicationStateDidChange;
-(void)_stConversationCommonInitWithThirdPartyBundleIdentifier:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(void)setDidFetchInitialEmergencyModeState:(BOOL)arg1 ;
-(id)initWithBundleIdentifier:(id)arg1 contactStore:(id)arg2 ;
-(BOOL)didFetchInitialScreenTimePolicyState;
-(id)initWithThirdPartyBundleIdentifier:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(id)_contactsByHandle:(id)arg1 error:(id*)arg2 ;
-(id)initSynchronouslyWithBundleIdentifier:(id)arg1 ;
-(BOOL)didFetchInitialThirdPartyApplicationState;
-(void)callCompletionHandlerIfNeededWithConversation:(id)arg1 error:(id)arg2 ;
-(void)setWhileLimitedPolicy:(long long)arg1 ;
-(void)_currentThirdPartyApplicationStateDidChange;
-(void)setGeneralScreenTimePolicy:(long long)arg1 ;
-(void)_updateAllThirdPartyContexts;
-(DMFEmergencyModeMonitor *)emergencyModeMonitor;
-(void)_updateContext:(id)arg1 forHandles:(id)arg2 updateGeneral:(BOOL)arg3 updateLimited:(BOOL)arg4 updateCurrentApplicationState:(BOOL)arg5 updateAllowedByContactsHandle:(BOOL)arg6 refreshContacts:(BOOL)arg7 refreshWhitelist:(BOOL)arg8 updateEmergencyMode:(BOOL)arg9 ;
-(void)setMe:(STConversation *)arg1 ;
-(DMFCommunicationPolicyMonitor *)communicationPolicyMonitor;
-(void)_screenTimePolicyDidChange;
-(void)setManagementState:(STManagementState *)arg1 ;
-(CNDowntimeWhitelist *)whitelist;
-(void)_stConversationCommonInitWithBundleIdentifier:(id)arg1 contactStore:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)_populateAllowedContactsByHandlesForContactHandles:(id)arg1 context:(id)arg2 ;
-(void)setCurrentThirdPartyApplicationState:(long long)arg1 ;
-(id)initSynchronouslyWithThirdPartyBundleIdentifier:(id)arg1 ;
-(void)setCommunicationPolicyMonitor:(DMFCommunicationPolicyMonitor *)arg1 ;
-(BOOL)_shouldWhileLimitedAllowHandles:(id)arg1 context:(id)arg2 ;
-(void)_contactStoreDidChange;
-(BOOL)didFetchInitialApplicationState;
-(void)setThirdPartyApplicationPolicyMonitor:(DMFApplicationPolicyMonitor *)arg1 ;
-(BOOL)_doesContainAtLeastOneContactInHandles:(id)arg1 contactsByHandle:(id)arg2 ;
-(BOOL)didFetchInitialEmergencyModeState;
-(STManagementState *)managementState;
-(id)allowableByContactsHandles:(id)arg1 ;
-(int)policyNotifyToken;
@end

