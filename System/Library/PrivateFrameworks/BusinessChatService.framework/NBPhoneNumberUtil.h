/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:54:00 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/BusinessChatService.framework/BusinessChatService
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSLock, NSMutableDictionary, NSRegularExpression, NBMetadataHelper, NBRegExMatcher, CTTelephonyNetworkInfo, NSDictionary;

@interface NBPhoneNumberUtil : NSObject {

	NSLock* _entireStringCacheLock;
	NSMutableDictionary* _entireStringRegexCache;
	NSLock* _lockPatternCache;
	NSMutableDictionary* _regexPatternCache;
	NSRegularExpression* _CAPTURING_DIGIT_PATTERN;
	NSRegularExpression* _VALID_ALPHA_PHONE_PATTERN;
	NBMetadataHelper* _helper;
	NBRegExMatcher* _matcher;

}

@property (nonatomic,retain) NSLock * entireStringCacheLock;                               //@synthesize entireStringCacheLock=_entireStringCacheLock - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * entireStringRegexCache;                 //@synthesize entireStringRegexCache=_entireStringRegexCache - In the implementation block
@property (nonatomic,retain) NSLock * lockPatternCache;                                    //@synthesize lockPatternCache=_lockPatternCache - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * regexPatternCache;                      //@synthesize regexPatternCache=_regexPatternCache - In the implementation block
@property (nonatomic,retain) NSRegularExpression * CAPTURING_DIGIT_PATTERN;                //@synthesize CAPTURING_DIGIT_PATTERN=_CAPTURING_DIGIT_PATTERN - In the implementation block
@property (nonatomic,retain) NSRegularExpression * VALID_ALPHA_PHONE_PATTERN;              //@synthesize VALID_ALPHA_PHONE_PATTERN=_VALID_ALPHA_PHONE_PATTERN - In the implementation block
@property (nonatomic,retain) NBMetadataHelper * helper;                                    //@synthesize helper=_helper - In the implementation block
@property (nonatomic,retain) NBRegExMatcher * matcher;                                     //@synthesize matcher=_matcher - In the implementation block
@property (nonatomic,readonly) CTTelephonyNetworkInfo * telephonyNetworkInfo; 
@property (nonatomic,readonly) NSDictionary * DIGIT_MAPPINGS; 
+(id)sharedInstance;
+(void)initialize;
-(NBMetadataHelper *)helper;
-(id)regularExpressionWithPattern:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3 ;
-(NBRegExMatcher *)matcher;
-(id)init;
-(void)setHelper:(NBMetadataHelper *)arg1 ;
-(void)setMatcher:(NBRegExMatcher *)arg1 ;
-(id)normalize:(id)arg1 ;
-(id)getCountryCodeForRegion:(id)arg1 ;
-(id)getRegionCodeForCountryCode:(id)arg1 ;
-(BOOL)formattingRuleHasFirstGroupOnly:(id)arg1 ;
-(int)stringPositionByRegex:(id)arg1 regex:(id)arg2 ;
-(id)matchedStringByRegex:(id)arg1 regex:(id)arg2 ;
-(id)replaceStringByRegex:(id)arg1 regex:(id)arg2 withTemplate:(id)arg3 ;
-(id)matchesByRegex:(id)arg1 regex:(id)arg2 ;
-(id)extractCountryCode:(id)arg1 nationalNumber:(id*)arg2 ;
-(NSDictionary *)DIGIT_MAPPINGS;
-(id)parse:(id)arg1 defaultRegion:(id)arg2 error:(id*)arg3 ;
-(id)format:(id)arg1 numberFormat:(long long)arg2 error:(id*)arg3 ;
-(id)entireRegularExpressionWithPattern:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3 ;
-(void)initRegularExpressionSet;
-(void)initNormalizationMappings;
-(BOOL)matchesEntirely:(id)arg1 string:(id)arg2 ;
-(id)normalizeHelper:(id)arg1 normalizationReplacements:(id)arg2 removeNonMatches:(BOOL)arg3 ;
-(id)normalizeDigitsOnly:(id)arg1 ;
-(id)stringByReplacingOccurrencesString:(id)arg1 withMap:(id)arg2 removeNonMatches:(BOOL)arg3 ;
-(int)getLengthOfGeographicalAreaCode:(id)arg1 ;
-(id)getRegionCodeForNumber:(id)arg1 ;
-(BOOL)isNumberGeographical:(id)arg1 ;
-(int)getLengthOfNationalDestinationCode:(id)arg1 ;
-(id)format:(id)arg1 numberFormat:(long long)arg2 ;
-(id)componentsSeparatedByRegex:(id)arg1 regex:(id)arg2 ;
-(long long)getNumberType:(id)arg1 ;
-(id)getNationalSignificantNumber:(id)arg1 ;
-(id)prefixNumberWithCountryCallingCode:(id)arg1 phoneNumberFormat:(long long)arg2 formattedNationalNumber:(id)arg3 formattedExtension:(id)arg4 ;
-(BOOL)hasValidCountryCallingCode:(id)arg1 ;
-(id)getMetadataForRegionOrCallingCode:(id)arg1 regionCode:(id)arg2 ;
-(id)maybeGetFormattedExtension:(id)arg1 metadata:(id)arg2 numberFormat:(long long)arg3 ;
-(id)formatNsn:(id)arg1 metadata:(id)arg2 phoneNumberFormat:(long long)arg3 carrierCode:(id)arg4 ;
-(id)formatByPattern:(id)arg1 numberFormat:(long long)arg2 userDefinedFormats:(id)arg3 ;
-(id)chooseFormattingPatternForNumber:(id)arg1 nationalNumber:(id)arg2 ;
-(id)formatNsnUsingPattern:(id)arg1 formattingPattern:(id)arg2 numberFormat:(long long)arg3 carrierCode:(id)arg4 ;
-(id)formatNationalNumberWithCarrierCode:(id)arg1 carrierCode:(id)arg2 ;
-(id)formatNumberForMobileDialing:(id)arg1 regionCallingFrom:(id)arg2 withFormatting:(BOOL)arg3 ;
-(id)formatNationalNumberWithPreferredCarrierCode:(id)arg1 fallbackCarrierCode:(id)arg2 ;
-(BOOL)canBeInternationallyDialled:(id)arg1 ;
-(id)formatOutOfCountryCallingNumber:(id)arg1 regionCallingFrom:(id)arg2 ;
-(BOOL)isValidRegionCode:(id)arg1 ;
-(BOOL)isNANPACountry:(id)arg1 ;
-(id)getCountryCodeForValidRegion:(id)arg1 error:(id*)arg2 ;
-(id)formatInOriginalFormat:(id)arg1 regionCallingFrom:(id)arg2 ;
-(BOOL)hasFormattingPatternForNumber:(id)arg1 ;
-(id)getNddPrefixForRegion:(id)arg1 stripNonDigits:(BOOL)arg2 ;
-(BOOL)rawInputContainsNationalPrefix:(id)arg1 nationalPrefix:(id)arg2 regionCode:(id)arg3 ;
-(BOOL)isStartingStringByRegex:(id)arg1 regex:(id)arg2 ;
-(BOOL)isValidNumber:(id)arg1 ;
-(BOOL)isLeadingZeroPossible:(id)arg1 ;
-(id)formatOutOfCountryKeepingAlphaChars:(id)arg1 regionCallingFrom:(id)arg2 ;
-(int)indexOfStringByString:(id)arg1 target:(id)arg2 ;
-(id)replaceFirstStringByRegex:(id)arg1 regex:(id)arg2 withTemplate:(id)arg3 ;
-(id)getExampleNumberForType:(id)arg1 type:(long long)arg2 error:(id*)arg3 ;
-(id)getNumberDescByType:(id)arg1 type:(long long)arg2 ;
-(long long)getNumberTypeHelper:(id)arg1 metadata:(id)arg2 ;
-(BOOL)isNumberMatchingDesc:(id)arg1 numberDesc:(id)arg2 ;
-(BOOL)isValidNumberForRegion:(id)arg1 regionCode:(id)arg2 ;
-(id)getRegionCodeForNumberFromRegionList:(id)arg1 regionCodes:(id)arg2 ;
-(BOOL)isViablePhoneNumber:(id)arg1 ;
-(id)maybeStripExtension:(id*)arg1 ;
-(BOOL)isPossibleNumber:(id)arg1 ;
-(long long)isPossibleNumberWithReason:(id)arg1 ;
-(long long)validateNumberLength:(id)arg1 metadata:(id)arg2 type:(long long)arg3 ;
-(BOOL)descHasPossibleNumberData:(id)arg1 ;
-(long long)testNumberLength:(id)arg1 desc:(id)arg2 ;
-(long long)maybeStripInternationalPrefixAndNormalize:(id*)arg1 possibleIddPrefix:(id)arg2 ;
-(BOOL)maybeStripNationalPrefixAndCarrierCode:(id*)arg1 metadata:(id)arg2 carrierCode:(id*)arg3 ;
-(void)normalizeSB:(id*)arg1 ;
-(BOOL)parsePrefixAsIdd:(id)arg1 sourceString:(id*)arg2 ;
-(id)matchFirstByRegex:(id)arg1 regex:(id)arg2 ;
-(id)parseHelper:(id)arg1 defaultRegion:(id)arg2 keepRawInput:(BOOL)arg3 checkRegion:(BOOL)arg4 error:(id*)arg5 ;
-(id)errorWithObject:(id)arg1 withDomain:(id)arg2 ;
-(id)countryCodeByCarrier;
-(CTTelephonyNetworkInfo *)telephonyNetworkInfo;
-(void)buildNationalNumberForParsing:(id)arg1 nationalNumber:(id*)arg2 ;
-(BOOL)checkRegionForParsing:(id)arg1 defaultRegion:(id)arg2 ;
-(id)maybeExtractCountryCode:(id)arg1 metadata:(id)arg2 nationalNumber:(id*)arg3 keepRawInput:(BOOL)arg4 phoneNumber:(id*)arg5 error:(id*)arg6 ;
-(long long)validateNumberLength:(id)arg1 metadata:(id)arg2 ;
-(void)setItalianLeadingZerosForPhoneNumber:(id)arg1 phoneNumber:(id)arg2 ;
-(id)extractPossibleNumber:(id)arg1 ;
-(long long)isNumberMatch:(id)arg1 second:(id)arg2 ;
-(BOOL)isNationalNumberSuffixOfTheOther:(id)arg1 second:(id)arg2 ;
-(BOOL)isAllDigits:(id)arg1 ;
-(id)normalizeDiallableCharsOnly:(id)arg1 ;
-(id)convertAlphaCharactersInNumber:(id)arg1 ;
-(int)getLengthOfGeographicalAreaCode:(id)arg1 error:(id*)arg2 ;
-(int)getLengthOfNationalDestinationCode:(id)arg1 error:(id*)arg2 ;
-(id)getCountryMobileTokenFromCountryCode:(long long)arg1 ;
-(id)formatByPattern:(id)arg1 numberFormat:(long long)arg2 userDefinedFormats:(id)arg3 error:(id*)arg4 ;
-(id)formatNationalNumberWithCarrierCode:(id)arg1 carrierCode:(id)arg2 error:(id*)arg3 ;
-(id)formatNationalNumberWithPreferredCarrierCode:(id)arg1 fallbackCarrierCode:(id)arg2 error:(id*)arg3 ;
-(id)formatNumberForMobileDialing:(id)arg1 regionCallingFrom:(id)arg2 withFormatting:(BOOL)arg3 error:(id*)arg4 ;
-(id)formatOutOfCountryCallingNumber:(id)arg1 regionCallingFrom:(id)arg2 error:(id*)arg3 ;
-(id)formatInOriginalFormat:(id)arg1 regionCallingFrom:(id)arg2 error:(id*)arg3 ;
-(BOOL)hasUnexpectedItalianLeadingZero:(id)arg1 ;
-(id)formatOutOfCountryKeepingAlphaChars:(id)arg1 regionCallingFrom:(id)arg2 error:(id*)arg3 ;
-(id)getExampleNumber:(id)arg1 error:(id*)arg2 ;
-(id)getExampleNumberForNonGeoEntity:(id)arg1 error:(id*)arg2 ;
-(id)getRegionCodesForCountryCode:(id)arg1 ;
-(BOOL)isAlphaNumber:(id)arg1 ;
-(BOOL)isPossibleNumber:(id)arg1 error:(id*)arg2 ;
-(long long)isPossibleNumberWithReason:(id)arg1 error:(id*)arg2 ;
-(BOOL)isPossibleNumberString:(id)arg1 regionDialingFrom:(id)arg2 error:(id*)arg3 ;
-(BOOL)truncateTooLongNumber:(id)arg1 ;
-(id)getSupportedRegions;
-(id)parseWithPhoneCarrierRegion:(id)arg1 error:(id*)arg2 ;
-(id)parseAndKeepRawInput:(id)arg1 defaultRegion:(id)arg2 error:(id*)arg3 ;
-(long long)isNumberMatch:(id)arg1 second:(id)arg2 error:(id*)arg3 ;
-(BOOL)canBeInternationallyDialled:(id)arg1 error:(id*)arg2 ;
-(NSLock *)entireStringCacheLock;
-(void)setEntireStringCacheLock:(NSLock *)arg1 ;
-(NSMutableDictionary *)entireStringRegexCache;
-(void)setEntireStringRegexCache:(NSMutableDictionary *)arg1 ;
-(NSLock *)lockPatternCache;
-(void)setLockPatternCache:(NSLock *)arg1 ;
-(NSMutableDictionary *)regexPatternCache;
-(void)setRegexPatternCache:(NSMutableDictionary *)arg1 ;
-(NSRegularExpression *)CAPTURING_DIGIT_PATTERN;
-(void)setCAPTURING_DIGIT_PATTERN:(NSRegularExpression *)arg1 ;
-(NSRegularExpression *)VALID_ALPHA_PHONE_PATTERN;
-(void)setVALID_ALPHA_PHONE_PATTERN:(NSRegularExpression *)arg1 ;
@end

