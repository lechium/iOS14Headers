/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:51:39 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/Transparency.framework/Transparency
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSString, TransparencyTranscript, KTApplicationPublicKeyStore, TransparencyManagedDataStore, KTContextVerifier, KTLogClient;

@interface KTContext : NSObject {

	NSString* _applicationID;
	TransparencyTranscript* _transcript;
	KTApplicationPublicKeyStore* _applicationKeyStore;
	TransparencyManagedDataStore* _dataStore;
	KTContextVerifier* _verifier;
	KTLogClient* _logClient;

}

@property (retain) NSString * applicationID;                                       //@synthesize applicationID=_applicationID - In the implementation block
@property (retain) KTApplicationPublicKeyStore * applicationKeyStore;              //@synthesize applicationKeyStore=_applicationKeyStore - In the implementation block
@property (retain) TransparencyManagedDataStore * dataStore;                       //@synthesize dataStore=_dataStore - In the implementation block
@property (retain) KTLogClient * logClient;                                        //@synthesize logClient=_logClient - In the implementation block
@property (retain) KTContextVerifier * verifier;                                   //@synthesize verifier=_verifier - In the implementation block
@property (retain) TransparencyTranscript * transcript;                            //@synthesize transcript=_transcript - In the implementation block
+(id)validateEventName:(unsigned long long)arg1 application:(id)arg2 ;
-(TransparencyTranscript *)transcript;
-(void)setApplicationID:(NSString *)arg1 ;
-(NSString *)applicationID;
-(void)setDataStore:(TransparencyManagedDataStore *)arg1 ;
-(TransparencyManagedDataStore *)dataStore;
-(BOOL)ready:(id*)arg1 ;
-(void)clearState:(/*^block*/id)arg1 ;
-(void)setTranscript:(TransparencyTranscript *)arg1 ;
-(KTContextVerifier *)verifier;
-(void)setVerifier:(KTContextVerifier *)arg1 ;
-(id)initWithApplicationKeyStore:(id)arg1 dataStore:(id)arg2 logClient:(id)arg3 applicationID:(id)arg4 ;
-(unsigned long long)validatePeerWithAnalytics:(id)arg1 transparentData:(id*)arg2 error:(id*)arg3 ;
-(unsigned long long)validateSelfWithAnalytics:(id)arg1 transparentData:(id*)arg2 error:(id*)arg3 ;
-(unsigned long long)validateEnrollmentWithAnalytics:(id)arg1 transparentData:(id*)arg2 error:(id*)arg3 ;
-(BOOL)verifyInclusionProofDownload:(id)arg1 error:(id*)arg2 ;
-(unsigned long long)verifyConsistencyProofDownload:(id)arg1 error:(id*)arg2 ;
-(void)failHeadDownload:(id)arg1 failure:(id)arg2 retry:(BOOL)arg3 ;
-(BOOL)verifySMTDownload:(id)arg1 error:(id*)arg2 ;
-(void)failSMTDownload:(id)arg1 failure:(id)arg2 retry:(BOOL)arg3 ;
-(BOOL)verifyRequestDownload:(id)arg1 error:(id*)arg2 ;
-(void)failRequestDownload:(id)arg1 failure:(id)arg2 retry:(BOOL)arg3 ;
-(void)handlePendingConsistencyProofs:(id*)arg1 ;
-(void)handleHeadsWithUnverifiedSignature:(id*)arg1 ;
-(void)garbageCollectHeads:(id*)arg1 ;
-(BOOL)runDutyCycleForActivity:(id)arg1 ;
-(KTLogClient *)logClient;
-(KTApplicationPublicKeyStore *)applicationKeyStore;
-(void)downloadInclusionProofsForRevisions:(id)arg1 downloadType:(unsigned long long)arg2 retry:(BOOL)arg3 error:(id*)arg4 ;
-(BOOL)verifyInclusionProofDownloadRecord:(id)arg1 error:(id*)arg2 ;
-(void)failHeadDownloadRecord:(id)arg1 failure:(id)arg2 retry:(BOOL)arg3 error:(id*)arg4 ;
-(unsigned long long)verifyConsistencyProofDownloadRecord:(id)arg1 error:(id*)arg2 ;
-(id)createErrorFromSTHFailure:(id)arg1 underlyingError:(id)arg2 ;
-(id)createChainOfErrorsFromSTHFailures:(id)arg1 type:(unsigned long long)arg2 ;
-(void)failExpiredSTHs:(id*)arg1 ;
-(void)downloadConsistencyProof:(id*)arg1 retry:(BOOL)arg2 ;
-(void)downloadSMHInclusionProofs:(id*)arg1 retry:(BOOL)arg2 ;
-(void)downloadSTHInclusionProofs:(id*)arg1 retry:(BOOL)arg2 ;
-(void)handleDownloadOfType:(unsigned long long)arg1 retry:(BOOL)arg2 error:(id*)arg3 ;
-(void)handleDownloadOfType:(unsigned long long)arg1 error:(id*)arg2 ;
-(void)handlePendingHeadInclusionProofs:(id*)arg1 ;
-(BOOL)hasTooManyVRFRequests:(id)arg1 ;
-(unsigned long long)writeResult:(unsigned long long)arg1 request:(id)arg2 proof:(id)arg3 error:(id*)arg4 ;
-(void)checkInclusionProofEpoch:(id)arg1 ;
-(unsigned long long)handleVerifyPeerResponse:(id)arg1 queryRequest:(id)arg2 request:(id)arg3 transparentData:(id*)arg4 error:(id*)arg5 ;
-(id)queryRequestForKTRequest:(id)arg1 error:(id*)arg2 ;
-(id)parseQueryRequestFromKTRequest:(id)arg1 error:(id*)arg2 ;
-(unsigned long long)validatePeer:(id)arg1 queryRequest:(id)arg2 queryResponse:(id)arg3 transparentData:(id*)arg4 error:(id*)arg5 ;
-(void)fetchQueryForKTRequest:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(unsigned long long)validateSelf:(id)arg1 queryRequest:(id)arg2 queryResponse:(id)arg3 transparentData:(id*)arg4 error:(id*)arg5 ;
-(unsigned long long)handleVerifySelfResponse:(id)arg1 queryRequest:(id)arg2 request:(id)arg3 transparentData:(id*)arg4 error:(id*)arg5 ;
-(unsigned long long)validateEnrollment:(id)arg1 queryRequest:(id)arg2 queryResponse:(id)arg3 transparentData:(id*)arg4 error:(id*)arg5 ;
-(unsigned long long)handleVerifyInsertResponse:(id)arg1 request:(id)arg2 transparentData:(id*)arg3 error:(id*)arg4 ;
-(unsigned long long)validatePeer:(id)arg1 transparentData:(id*)arg2 error:(id*)arg3 ;
-(id)analyticsForRequestValidation:(id)arg1 initialResult:(unsigned long long)arg2 result:(unsigned long long)arg3 ;
-(unsigned long long)validateSelf:(id)arg1 transparentData:(id*)arg2 error:(id*)arg3 ;
-(unsigned long long)validateEnrollment:(id)arg1 transparentData:(id*)arg2 error:(id*)arg3 ;
-(unsigned long long)downloadTypeForValidateType:(unsigned long long)arg1 ;
-(id)createErrorFromRequestFailure:(id)arg1 underlyingError:(id)arg2 ;
-(id)createChainOfErrorsFromRequestFailures:(id)arg1 ;
-(void)downloadQueryForKTRequest:(id)arg1 retry:(BOOL)arg2 completionHandler:(/*^block*/id)arg3 ;
-(BOOL)failExpiredRequest:(id)arg1 error:(id)arg2 ;
-(void)handleKTRequestDownload:(id)arg1 retry:(BOOL)arg2 ;
-(BOOL)checkDeferActivity:(id)arg1 ;
-(void)handleKTRequestDownload:(id)arg1 ;
-(void)verifyRequestDownloadRecord:(id)arg1 error:(id*)arg2 ;
-(void)saveRequestFailure:(id)arg1 failure:(id)arg2 ;
-(void)failRequestDownloadRecord:(id)arg1 failure:(id)arg2 retry:(BOOL)arg3 ;
-(void)handlePendingQueryRequests:(id)arg1 error:(id*)arg2 ;
-(void)downloadSMTQueryResponse:(id)arg1 retry:(BOOL)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)handleSMTInclusionDownload:(id)arg1 request:(id)arg2 retry:(BOOL)arg3 ;
-(void)handleSMTInclusionDownload:(id)arg1 request:(id)arg2 ;
-(void)verifySMTDownloadRecord:(id)arg1 error:(id*)arg2 ;
-(void)failSMTDownloadRecord:(id)arg1 failure:(id)arg2 retry:(BOOL)arg3 error:(id*)arg4 ;
-(void)handleURIsWithPendingSMTs:(id)arg1 error:(id*)arg2 ;
-(void)handleSMTsWithUnverifiedSignature:(id*)arg1 ;
-(void)setApplicationKeyStore:(KTApplicationPublicKeyStore *)arg1 ;
-(void)setLogClient:(KTLogClient *)arg1 ;
-(void)logStartEvent:(id)arg1 ;
-(void)logFinishSuccessEvent:(id)arg1 ;
-(void)handleGarbageCollection:(id)arg1 error:(id*)arg2 ;
-(void)logFinishFailureEvent:(id)arg1 error:(id)arg2 ;
-(id)copyState;
@end

