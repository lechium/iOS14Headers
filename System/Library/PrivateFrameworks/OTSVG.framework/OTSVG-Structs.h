/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:54:51 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/OTSVG.framework/OTSVG
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct _compressed_pair<std::__1::reference_wrapper<SVG::Element> *, std::__1::allocator<std::__1::reference_wrapper<SVG::Element> > > {
	const eference_wrapper<SVG::Element> __value_;
} compressed_pair<std::__1::reference_wrapper<SVG::Element> *, std::__1::allocator<std::__1::reference_wrapper<SVG::Element> > >;

typedef struct vector<std::__1::reference_wrapper<SVG::Element>, std::__1::allocator<std::__1::reference_wrapper<SVG::Element> > > {
	const eference_wrapper<SVG::Element> __begin_;
	const eference_wrapper<SVG::Element> __end_;
	compressed_pair<std::__1::reference_wrapper<SVG::Element> *, std::__1::allocator<std::__1::reference_wrapper<SVG::Element> > > __end_cap_;
} vector<std::__1::reference_wrapper<SVG::Element>, std::__1::allocator<std::__1::reference_wrapper<SVG::Element> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::hash<std::__1::basic_string<char> >, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::hash<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::equal_to<std::__1::basic_string<char> >, true> > {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::equal_to<std::__1::basic_string<char> >, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > > > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::hash<std::__1::basic_string<char> >, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::equal_to<std::__1::basic_string<char> >, true> > __p3_;
} hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > > > >;

typedef struct unordered_map<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > >, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > > > > {
	hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > > > > __table_;
} unordered_map<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > >, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > > > >;

