/*
                       * This header is generated by classdump-dyld 1.0
                       * on Monday, September 28, 2020 at 5:58:35 PM Mountain Standard Time
                       * Operating System: Version 14.0 (Build 18A373)
                       * Image Source: /System/Library/PrivateFrameworks/MessageLegacy.framework/MailServices/IMAP.framework/IMAP
                       * classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
                       */

#import <IMAP/IMAP-Structs.h>
#import <Message/MFLibraryStore.h>
#import <libobjc.A.dylib/MFIMAPConnectionDelegate.h>
#import <libobjc.A.dylib/MFIMAPSequenceIdentifierProvider.h>
#import <libobjc.A.dylib/ECIMAPLocalActionReplayerDelegate.h>
#import <libobjc.A.dylib/EFLoggable.h>

@class NSString, MFIMAPConnection, NSLock, EFFuture, EFCancelationToken, EDServerMessagePersistence;

@interface MFLibraryIMAPStore : MFLibraryStore <MFIMAPConnectionDelegate, MFIMAPSequenceIdentifierProvider, ECIMAPLocalActionReplayerDelegate, EFLoggable> {

	unsigned _supportsCustomPermanentFlags : 1;
	unsigned _supportsJunkFlag : 1;
	unsigned _supportsDollarJunkFlag : 1;
	unsigned _supportsNotJunkFlag : 1;
	unsigned _supportsDollarNotJunkFlag : 1;
	unsigned _supportsForwardedFlag : 1;
	unsigned _supportsDollarForwardedFlag : 1;
	unsigned _supportsFlagColorBitFlags : 1;
	unsigned _updatingCache : 1;
	unsigned _updateMetadata : 1;
	unsigned _readyToDealloc : 1;
	unsigned _didSynchronizeOldMessages : 1;
	unsigned _recentsExist : 1;
	unsigned _settingServerCount : 1;
	unsigned _reserved : 15;
	os_unfair_lock_s _activeFetchVsReplayLock;
	NSString* _mailboxName;
	os_unfair_lock_s _serverCountLock;
	unsigned long long _serverMessageCount;
	unsigned long long _serverDeletedCount;
	unsigned long long _serverUidNext;
	unsigned long long _lastHighestModSequence;
	unsigned long long _highestModSequence;
	NSString* _selectedUID;
	unsigned _currentFetchUid;
	NSString* _relativePath;
	MFIMAPConnection* _cachedConnection;
	NSLock* _cachedConnectionLock;
	EFFuture* _serverMessagePersistenceFuture;
	NSString* _loggingPrefix;
	BOOL _shouldUseIDLE;
	EFCancelationToken* _cancelationToken;

}

@property (assign) BOOL shouldUseIDLE;                                                                    //@synthesize shouldUseIDLE=_shouldUseIDLE - In the implementation block
@property (nonatomic,retain) EFCancelationToken * cancelationToken;                                       //@synthesize cancelationToken=_cancelationToken - In the implementation block
@property (nonatomic,retain,readonly) EDServerMessagePersistence * serverMessagePersistence; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)log;
+(id)copyRemoteIDForTemporaryUid:(unsigned)arg1 ;
-(void)close;
-(id)mailboxName;
-(id)initWithMailboxUid:(id)arg1 readOnly:(BOOL)arg2 ;
-(void)_handleFlagsChangedForMessages:(id)arg1 flags:(id)arg2 oldFlagsByMessage:(id)arg3 ;
-(BOOL)_fetchDataForMimePart:(id)arg1 range:(NSRange)arg2 isComplete:(BOOL*)arg3 consumer:(id)arg4 ;
-(id)_fetchFullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id*)arg2 downloadIfNecessary:(BOOL)arg3 didDownload:(BOOL*)arg4 ;
-(id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id*)arg2 downloadIfNecessary:(BOOL)arg3 partial:(BOOL*)arg4 ;
-(BOOL)canCompact;
-(void)doCompact;
-(unsigned long long)growFetchWindow;
-(BOOL)bodyFetchRequiresNetworkActivity;
-(id)_fetchHeaderDataForMessage:(id)arg1 downloadIfNecessary:(BOOL)arg2 ;
-(void)deleteMessagesOlderThanNumberOfDays:(int)arg1 compact:(BOOL)arg2 ;
-(void)setFlagsForAllMessagesFromDictionary:(id)arg1 ;
-(BOOL)allowsAppend;
-(EFCancelationToken *)cancelationToken;
-(void)dealloc;
-(id)relativePath;
-(BOOL)canFetchMessageIDs;
-(void)setCancelationToken:(EFCancelationToken *)arg1 ;
-(long long)fetchMessagesWithMessageIDs:(id)arg1 andSetFlags:(unsigned long long)arg2 ;
-(void)setLibrary:(id)arg1 ;
-(unsigned long long)serverMessageCount;
-(id)storeSearchResultMatchingCriterion:(id)arg1 limit:(unsigned)arg2 offset:(id)arg3 error:(id*)arg4 ;
-(long long)fetchNumMessages:(unsigned long long)arg1 preservingUID:(id)arg2 options:(unsigned long long)arg3 ;
-(BOOL)canFetchSearchResults;
-(long long)fetchMessagesMatchingCriterion:(id)arg1 limit:(unsigned)arg2 ;
-(id)remoteIDsFromUniqueRemoteIDs:(id)arg1 ;
-(long long)fetchMessagesWithRemoteIDs:(id)arg1 andSetFlags:(unsigned long long)arg2 ;
-(id)messageForRemoteID:(id)arg1 ;
-(id)messageForRemoteID:(id)arg1 inMailbox:(id)arg2 ;
-(id)uniqueRemoteIDsForMessages:(id)arg1 ;
-(void)updateServerUnreadCountClosingConnection:(BOOL)arg1 ;
-(BOOL)setPreferredEncoding:(unsigned)arg1 forMessage:(id)arg2 ;
-(id)messageIdRollCall:(id)arg1 ;
-(id)messageDataForMessage:(id)arg1 ;
-(BOOL)moveSupportedFromMailboxURL:(id)arg1 toURL:(id)arg2 ;
-(id)replayAction:(id)arg1 ;
-(id)imapMailboxNameForMailboxURL:(id)arg1 ;
-(id)flagsForIMAPUIDs:(id)arg1 mailboxURL:(id)arg2 ;
-(BOOL)checkUIDValidity:(unsigned)arg1 mailboxURL:(id)arg2 ;
-(id)messageDataForRemoteID:(id)arg1 mailboxURL:(id)arg2 ;
-(BOOL)errorIsIMAPError:(id)arg1 ;
-(id)offlineCache;
-(id)offlineCacheIfOffline;
-(void)reselectMailbox;
-(BOOL)connection:(id)arg1 shouldHandleUntaggedResponse:(id)arg2 forCommand:(id)arg3 ;
-(void)connection:(id)arg1 didReceiveResponse:(id)arg2 forCommand:(id)arg3 ;
-(void)connectionDidDisconnect:(id)arg1 ;
-(void)willRemoveDelegation:(id)arg1 ;
-(void)setServerMessageCount:(unsigned long long)arg1 ;
-(void)setHighestModSequence:(unsigned long long)arg1 ;
-(BOOL)shouldStartIdleForConnection:(id)arg1 ;
-(id)sequenceIdentifierForUIDs:(id)arg1 ;
-(void)setSequenceIdentifier:(id)arg1 forUIDs:(id)arg2 ;
-(BOOL)hasValidCacheFileForMessage:(id)arg1 ;
-(EDServerMessagePersistence *)serverMessagePersistence;
-(void)focusedMessageDidChange:(id)arg1 ;
-(id)_observeChangesInIdleConditions;
-(unsigned long long)fetchMessagesWithUIDs:(id)arg1 connection:(id)arg2 newCount:(unsigned long long)arg3 flagsToSet:(unsigned long long)arg4 queueClass:(Class)arg5 ;
-(unsigned long long)syncMessagesWithUIDs:(id)arg1 connection:(id)arg2 serverMessages:(id)arg3 flagSearchResults:(id)arg4 ;
-(void)_updateSelectedUID:(unsigned long long*)arg1 ;
-(id)_searchFlagsForUIDs:(id)arg1 usingConnection:(id)arg2 ;
-(void)_performActionsOnConnection:(id)arg1 uidsToFetch:(id*)arg2 uidsToSync:(id*)arg3 messagesToCompact:(id*)arg4 serverMessages:(id)arg5 flagSearchResults:(id)arg6 shouldForce:(BOOL)arg7 newUIDsToFetch:(unsigned*)arg8 ;
-(BOOL)performOperationRequiringConnection:(BOOL)arg1 withOptions:(int)arg2 failedToSelectMailbox:(BOOL*)arg3 operation:(/*^block*/id)arg4 ;
-(void)updateDeletedCountWithNotDeletedCount:(unsigned long long)arg1 ;
-(BOOL)_selectMailbox:(id)arg1 withConnection:(id)arg2 ;
-(BOOL)_shouldContinueToPreservedUID:(unsigned long long)arg1 ;
-(unsigned long long)_fetchMessagesWithArguments:(id)arg1 idRange:(id)arg2 onConnection:(id)arg3 synchronize:(BOOL)arg4 limit:(unsigned long long)arg5 topUIDToCompact:(unsigned long long)arg6 topKnownUID:(unsigned long long)arg7 success:(BOOL*)arg8 examinedRange:(NSRange*)arg9 fetchableUIDsFound:(unsigned long long*)arg10 preserveUID:(unsigned long long*)arg11 numFetchedUIDs:(unsigned long long*)arg12 ;
-(void)_fetchServerUnreadCountWithConnection:(id)arg1 ;
-(void)_updateServerUnreadCount:(unsigned long long)arg1 ;
-(id)_remoteBodySearchForCriterion:(id)arg1 ;
-(id)_newSearchResponseQueueForConnection:(id)arg1 limit:(unsigned)arg2 ;
-(void)_fetchMessagesMatchingCriterion:(id)arg1 limit:(unsigned)arg2 withOptions:(int)arg3 handler:(/*^block*/id)arg4 ;
-(id)deletedMessages;
-(id)_fetchFullMessageDataForMessage:(id)arg1 download:(id*)arg2 ;
-(id)downloadCacheForConnection:(id)arg1 ;
-(BOOL)_waitForDataFromDownload:(id)arg1 uid:(unsigned)arg2 downloadCache:(id)arg3 connection:(id)arg4 ;
-(id)fetchPipelineForConnection:(id)arg1 ;
-(id)_dataForMessage:(id)arg1 readHeadersOnly:(BOOL)arg2 ;
-(id)_downloadForMessageBodyData:(id)arg1 usingDownloadCache:(id)arg2 ;
-(id)_performBodyDataDownload:(id)arg1 usingConnection:(id)arg2 downloadCache:(id)arg3 isPartial:(BOOL*)arg4 ;
-(void)setMailboxUidValidity:(unsigned)arg1 ;
-(BOOL)shouldUseIDLE;
-(id)_idleConditionsObservable;
-(void)_scheduleIdleTransition:(BOOL)arg1 ;
-(void)setShouldUseIDLE:(BOOL)arg1 ;
-(void)updateDeletedCount;
-(unsigned)mailboxUidValidity;
@end

