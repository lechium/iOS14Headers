/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 12:26:36 PM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/TSReading.framework/TSReading
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol MTLTexture, TSDMTLDataBuffer, TSDAnimationRandomGenerator, MTLCommandBuffer;
#import <TSReading/TSReading-Structs.h>
@class TSDMetalShader, MTLRenderPassDescriptor, TSDMetalContext;

@interface TSDMetalMotionBlurEffect : NSObject {

	CGSize _framebufferSize;
	CGSize _slideSize;
	id<MTLTexture> _combinedTextureColor1;
	id<MTLTexture> _combinedTextureColor2;
	id<MTLTexture> _combinedTextureVelocity;
	TSDMetalShader* _defaultTextureShader;
	TSDMetalShader* _colorAndVelocityShader;
	TSDMetalShader* _colorAndVelocityBlendingShader;
	TSDMetalShader* _velocityVisualizerShader;
	TSDMetalShader* _velocityCollectionShader;
	TSDMetalShader* _velocityTileMaxVerticalShader;
	TSDMetalShader* _velocityTileMaxHorizontalShader;
	TSDMetalShader* _velocityNeighborMaxHorizontalShader;
	TSDMetalShader* _velocityNeighborMaxVerticalShader;
	id<MTLTexture> _colorTexture1;
	id<MTLTexture> _colorTexture2;
	id<TSDMTLDataBuffer> _colorFBODataBuffer;
	id<MTLTexture> _velocityTexture1;
	id<MTLTexture> _velocityTexture2;
	id<MTLTexture> _velocityTextureSquashed;
	id<TSDMTLDataBuffer> _velocityFBODataBuffer;
	id<TSDMTLDataBuffer> _velocitySquashedFBODataBuffer;
	id<TSDMTLDataBuffer> _FBODataBuffer;
	id<TSDMTLDataBuffer> _FBODataBufferFlipped;
	MTLRenderPassDescriptor* _colorAndVelocityPassDescriptor;
	MTLRenderPassDescriptor* _tileHorizontalPassDescriptor;
	MTLRenderPassDescriptor* _tileVerticalPassDescriptor;
	MTLRenderPassDescriptor* _neighborHorizontalPassDescriptor;
	MTLRenderPassDescriptor* _neighborVerticalPassDescriptor;
	MTLRenderPassDescriptor* _combined1PassDescriptor;
	id<TSDAnimationRandomGenerator> _randomGenerator;
	id<MTLCommandBuffer> _currentCommandBuffer;
	TSDMetalContext* _metalContext;
	BOOL _isSingleObject;
	double _motionBlurStrength;
	long long _debugDrawMode;
	double _framebufferScale;

}

@property (assign,nonatomic) BOOL isSingleObject;                    //@synthesize isSingleObject=_isSingleObject - In the implementation block
@property (assign,nonatomic) double motionBlurStrength;              //@synthesize motionBlurStrength=_motionBlurStrength - In the implementation block
@property (assign,nonatomic) long long debugDrawMode;                //@synthesize debugDrawMode=_debugDrawMode - In the implementation block
@property (assign,nonatomic) double framebufferScale;                //@synthesize framebufferScale=_framebufferScale - In the implementation block
-(void)p_setupTextures;
-(CGSize)p_updateMaxVelocityInShadersWithScale:(double)arg1 isColorFBO:(BOOL)arg2 ;
-(CGSize)velocityScaleForColorFBO:(BOOL)arg1 ;
-(double)motionBlurStrength;
-(void)setupMotionBlurEffectIfNecessary;
-(void)drawResultWithWorkingRenderEncoder:(id)arg1 destinationRenderEncoder:(id)arg2 opacity:(double)arg3 ;
-(long long)debugDrawMode;
-(void)p_blitIntoVelocityTexture;
-(void)p_blitIntoColorFramebuffer;
-(void)p_debugDrawModeColorBufferWithEncoder:(id)arg1 ;
-(void)p_dilateVelocityTexture;
-(void)p_debugDrawModeVelocityBufferDilatedWithEncoder:(id)arg1 ;
-(void)p_debugDrawModeVelocityBufferWithEncoder:(id)arg1 ;
-(void)p_drawWithEncoder:(id)arg1 opacity:(double)arg2 ;
-(CGSize)p_velocityFramebufferSize;
-(CGSize)p_squashedVelocityFramebufferSize;
-(CGSize)p_velocityFramebufferTextureScale;
-(BOOL)isSingleObject;
-(void)p_setupBuffers;
-(void)p_setupShaders;
-(void)p_setupRenderPasses;
-(id)initWithFramebufferSize:(CGSize)arg1 slideSize:(CGSize)arg2 randomGenerator:(id)arg3 metalContext:(id)arg4 ;
-(void)setMotionBlurStrength:(double)arg1 ;
-(CGSize)velocityScale;
-(CATransform3D)adjustTransformForMotionBlurBuffer:(CATransform3D)arg1 ;
-(id)bindColorAndVelocityWithMetalContext:(id)arg1 shouldFillBackground:(BOOL)arg2 ;
-(id)colorAndVelocityShader;
-(id)colorAndVelocityBlendingShader;
-(void)drawResultWithWorkingRenderEncoder:(id)arg1 destinationRenderEncoder:(id)arg2 ;
-(void)setIsSingleObject:(BOOL)arg1 ;
-(void)setDebugDrawMode:(long long)arg1 ;
-(double)framebufferScale;
-(void)setFramebufferScale:(double)arg1 ;
@end

