/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:52:41 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/AppleCVAPhoto.framework/AppleCVAPhoto
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class <MTLDeviceSPI>, <MTLCommandQueue>, <MTLLibrary>, <MTLPipelineLibrarySPI>, <MTLCaptureScope>, NSData, NSArray, <MTLBuffer>;

typedef struct __CVBuffer* CVBufferRef;

typedef struct CVAVector {
	double x;
	double y;
	double z;
} CVAVector;

typedef struct CVAQuaternion {
	double w;
	double x;
	double y;
	double z;
} CVAQuaternion;

typedef struct __CVPixelBufferPool* CVPixelBufferPoolRef;

typedef struct VideoPostprocessingParams {
	BOOL useFaceAsFocus;
	float faceSizeRatioInFocus;
	BOOL fillLargeHolesWithBackground;
	float disparityIntervalInHoleSearch;
	float backgroundFillMarginFromValidDisparity_px;
	BOOL useTemporalRejection;
} VideoPostprocessingParams;

typedef struct VideoMattingStaticParams {
	unsigned colorWidth;
	unsigned colorHeight;
	unsigned shiftWidth;
	unsigned shiftHeight;
	unsigned alphaWidth;
	unsigned alphaHeight;
	int guidedFilterWidth;
	int guidedFilterHeight;
	unsigned kernelSize;
	float referenceShift;
	float guidedFilterUnconfidentWeight;
	float guidedFilterMinDistToDeweight;
	float alphaMaxLaplacian;
	float alphaContrastExponent;
	float shiftFilterColorStd;
	float shiftFilterUpdateRate;
	float minimumConfidenceToKeepDisparity;
	float maximumSimilarityToKeepDisparity;
	float maxShiftFillingInconsistency;
	float maxShiftFillingDistFromFg;
	unsigned maxDistToPushShiftEdgesFwd;
	unsigned maxDistToPushShiftEdgesRev;
	int shiftPushingBgToFgShiftDifference;
	float foregroundMaskDilationRadius;
	float infConvolutionDownsampling;
	float laplacianLimitingDownsampling;
	float laplacianLimitingBlurSize;
} VideoMattingStaticParams;

typedef struct array<float, 3> {
	float __elems_[3];
} array<float, 3>;

typedef struct VideoMattingDynamicParams {
	float updateRate;
	float sdofDeltaCanonicalDisparity;
	float alphaCoeffFilterColorStd;
	float alphaGammaExponent;
	float focusCanonicalDisparity;
	float backgroundCanonicalDisparity;
	float thresholdHardness;
	array<float, 3> gravity;
	float alphaMatteDeltaCanonicalDisparity;
	BOOL doDisparityHoleFilling;
} VideoMattingDynamicParams;

typedef struct DynamicMetaParams {
	float mattingCoeffUpdateRate;
	float mattingCoeffUpdateRateFast;
	float mattingCoeffColorStd;
	float mattingCoeffColorStdFast;
} DynamicMetaParams;

typedef struct Preferences {
	BOOL drawFocusMachineState;
	int overlayShiftOnRendering;
	int displayFrameTime;
	int noiseBits;
	int fNumber_tenths;
	BOOL bypassGPUProcessing;
	BOOL bypassCPUProcessing;
} Preferences;

typedef struct _compressed_pair<DisparityConversion *, std::__1::default_delete<DisparityConversion> > {
	DisparityConversion __value_;
} compressed_pair<DisparityConversion *, std::__1::default_delete<DisparityConversion> >;

typedef struct unique_ptr<DisparityConversion, std::__1::default_delete<DisparityConversion> > {
	compressed_pair<DisparityConversion *, std::__1::default_delete<DisparityConversion> > __ptr_;
} unique_ptr<DisparityConversion, std::__1::default_delete<DisparityConversion> >;

typedef struct _compressed_pair<GeometricTransformation *, std::__1::default_delete<GeometricTransformation> > {
	GeometricTransformation __value_;
} compressed_pair<GeometricTransformation *, std::__1::default_delete<GeometricTransformation> >;

typedef struct unique_ptr<GeometricTransformation, std::__1::default_delete<GeometricTransformation> > {
	compressed_pair<GeometricTransformation *, std::__1::default_delete<GeometricTransformation> > __ptr_;
} unique_ptr<GeometricTransformation, std::__1::default_delete<GeometricTransformation> >;

typedef struct _compressed_pair<FocusStatsPostprocessing *, std::__1::default_delete<FocusStatsPostprocessing> > {
	FocusStatsPostprocessing __value_;
} compressed_pair<FocusStatsPostprocessing *, std::__1::default_delete<FocusStatsPostprocessing> >;

typedef struct unique_ptr<FocusStatsPostprocessing, std::__1::default_delete<FocusStatsPostprocessing> > {
	compressed_pair<FocusStatsPostprocessing *, std::__1::default_delete<FocusStatsPostprocessing> > __ptr_;
} unique_ptr<FocusStatsPostprocessing, std::__1::default_delete<FocusStatsPostprocessing> >;

typedef struct _compressed_pair<DisparityAutofocus *, std::__1::default_delete<DisparityAutofocus> > {
	DisparityAutofocus __value_;
} compressed_pair<DisparityAutofocus *, std::__1::default_delete<DisparityAutofocus> >;

typedef struct unique_ptr<DisparityAutofocus, std::__1::default_delete<DisparityAutofocus> > {
	compressed_pair<DisparityAutofocus *, std::__1::default_delete<DisparityAutofocus> > __ptr_;
} unique_ptr<DisparityAutofocus, std::__1::default_delete<DisparityAutofocus> >;

typedef struct _compressed_pair<DisparityStatistics *, std::__1::default_delete<DisparityStatistics> > {
	DisparityStatistics __value_;
} compressed_pair<DisparityStatistics *, std::__1::default_delete<DisparityStatistics> >;

typedef struct unique_ptr<DisparityStatistics, std::__1::default_delete<DisparityStatistics> > {
	compressed_pair<DisparityStatistics *, std::__1::default_delete<DisparityStatistics> > __ptr_;
} unique_ptr<DisparityStatistics, std::__1::default_delete<DisparityStatistics> >;

typedef struct _compressed_pair<cva::FocusStateMachine *, std::__1::default_delete<cva::FocusStateMachine> > {
	FocusStateMachine __value_;
} compressed_pair<cva::FocusStateMachine *, std::__1::default_delete<cva::FocusStateMachine> >;

typedef struct unique_ptr<cva::FocusStateMachine, std::__1::default_delete<cva::FocusStateMachine> > {
	compressed_pair<cva::FocusStateMachine *, std::__1::default_delete<cva::FocusStateMachine> > __ptr_;
} unique_ptr<cva::FocusStateMachine, std::__1::default_delete<cva::FocusStateMachine> >;

typedef struct _compressed_pair<StageLightStateMachine *, std::__1::default_delete<StageLightStateMachine> > {
	StageLightStateMachine __value_;
} compressed_pair<StageLightStateMachine *, std::__1::default_delete<StageLightStateMachine> >;

typedef struct unique_ptr<StageLightStateMachine, std::__1::default_delete<StageLightStateMachine> > {
	compressed_pair<StageLightStateMachine *, std::__1::default_delete<StageLightStateMachine> > __ptr_;
} unique_ptr<StageLightStateMachine, std::__1::default_delete<StageLightStateMachine> >;

typedef struct _compressed_pair<SdofStateMachine *, std::__1::default_delete<SdofStateMachine> > {
	SdofStateMachine __value_;
} compressed_pair<SdofStateMachine *, std::__1::default_delete<SdofStateMachine> >;

typedef struct unique_ptr<SdofStateMachine, std::__1::default_delete<SdofStateMachine> > {
	compressed_pair<SdofStateMachine *, std::__1::default_delete<SdofStateMachine> > __ptr_;
} unique_ptr<SdofStateMachine, std::__1::default_delete<SdofStateMachine> >;

typedef struct RetainPtr<__CVBuffer *> {
	void m_ptr;
} RetainPtr<__CVBuffer *>;

typedef struct TransitionData {
	BOOL _inTransition;
} TransitionData;

typedef struct _compressed_pair<CVAPerfEndTimeProfilerSet *, std::__1::default_delete<CVAPerfEndTimeProfilerSet> > {
	CVAPerfEndTimeProfilerSet __value_;
} compressed_pair<CVAPerfEndTimeProfilerSet *, std::__1::default_delete<CVAPerfEndTimeProfilerSet> >;

typedef struct unique_ptr<CVAPerfEndTimeProfilerSet, std::__1::default_delete<CVAPerfEndTimeProfilerSet> > {
	compressed_pair<CVAPerfEndTimeProfilerSet *, std::__1::default_delete<CVAPerfEndTimeProfilerSet> > __ptr_;
} unique_ptr<CVAPerfEndTimeProfilerSet, std::__1::default_delete<CVAPerfEndTimeProfilerSet> >;

typedef struct CVAPhotoMetalContext {
	<MTLDeviceSPI>* device;
	<MTLCommandQueue>* commandQueue;
	<MTLLibrary>* library;
	<MTLPipelineLibrarySPI>* pipelineLibrary;
	<MTLCaptureScope>* captureScope;
	unique_ptr<CVAPerfEndTimeProfilerSet, std::__1::default_delete<CVAPerfEndTimeProfilerSet> > profiler;
	BOOL _alreadyInCaptureScope;
} CVAPhotoMetalContext;

typedef struct _NSZone* NSZoneRef;

typedef struct {
	unsigned long long width;
	unsigned long long height;
	unsigned long long depth;
} SCD_Struct_CV32;

typedef struct InfimumConvolutionConfig* InfimumConvolutionConfigRef;

typedef struct optional<float>Baligned_storage<float>(dummy_u[4c]a4)* ptional<float>Ref;

typedef struct float4x4 {
	[4 columns];
} float4x4;

typedef struct TC_MatrixUniforms {
	float4x4 modelViewProjectionMatrix;
} TC_MatrixUniforms;

typedef struct SlideUniforms {
	float center_x;
	float center_y;
} SlideUniforms;

typedef struct half2x2 {
	[2 columns];
} half2x2;

typedef struct LerpUniforms {
	  m;
	  b;
} LerpUniforms;

typedef struct TrapezoidUniforms {
	LerpUniforms l0;
	LerpUniforms l1;
	  ymin;
	  ymax;
} TrapezoidUniforms;

typedef struct LerpClampUniforms {
	LerpUniforms l;
	  y0;
	  y1;
} LerpClampUniforms;

typedef struct RelightUniforms {
	 outSizeInv;
	 backgroundColor;
	  proxyToFaceEffectLerp;
	  blurStrengthByDistance;
	  portraitStyleStrength;
	  colorCubeMaskLerp;
	  colorCubeIntensity;
	  vignetteIntensity;
	  vignettingScale;
	 faceCenter01;
	  faceAngleYawRad;
	half2x2 faceRotMat;
	TrapezoidUniforms rightSideTrapezoidU;
	TrapezoidUniforms leftSideTrapezoidU;
	LerpClampUniforms horAngleLerpClampU;
} RelightUniforms;

typedef struct _compressed_pair<FaceVertex *, std::__1::allocator<FaceVertex> > {
	FaceVertex __value_;
} compressed_pair<FaceVertex *, std::__1::allocator<FaceVertex> >;

typedef struct vector<FaceVertex, std::__1::allocator<FaceVertex> > {
	FaceVertex __begin_;
	FaceVertex __end_;
	compressed_pair<FaceVertex *, std::__1::allocator<FaceVertex> > __end_cap_;
} vector<FaceVertex, std::__1::allocator<FaceVertex> >;

typedef struct FaceKitStreamedData {
	NSData* verticesPos;
	NSArray* intrinsics;
	NSArray* camR;
	NSArray* camT;
	NSArray* poseR;
	NSArray* poseT;
	NSData* landmarks;
	float confidence;
} FaceKitStreamedData;

typedef struct circular_buffer<bool, std::__1::allocator<bool> > {
	BOOL m_buff;
	BOOL m_end;
	BOOL m_first;
	BOOL m_last;
	unsigned long long m_size;
	allocator<bool> m_alloc;
} circular_buffer<bool, std::__1::allocator<bool> >;

typedef struct aligned_storage<boost::accumulators::accumulator_set<float, boost::accumulators::stats<boost::accumulators::tag::rolling_variance, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, void> > {
	dummy_u dummy_;
	char data[72];
	a8) aligner_;
} aligned_storage<boost::accumulators::accumulator_set<float, boost::accumulators::stats<boost::accumulators::tag::rolling_variance, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, void> >;

typedef struct optional<boost::accumulators::accumulator_set<float, boost::accumulators::stats<boost::accumulators::tag::rolling_variance, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, void> > {
	BOOL m_initialized;
	aligned_storage<boost::accumulators::accumulator_set<float, boost::accumulators::stats<boost::accumulators::tag::rolling_variance, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, void> > m_storage;
} optional<boost::accumulators::accumulator_set<float, boost::accumulators::stats<boost::accumulators::tag::rolling_variance, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, void> >;

typedef struct aligned_storage<boost::accumulators::accumulator_set<float, boost::accumulators::stats<boost::accumulators::tag::rolling_mean, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, void> > {
	dummy_u dummy_;
	char data[64];
	a8) aligner_;
} aligned_storage<boost::accumulators::accumulator_set<float, boost::accumulators::stats<boost::accumulators::tag::rolling_mean, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, void> >;

typedef struct optional<boost::accumulators::accumulator_set<float, boost::accumulators::stats<boost::accumulators::tag::rolling_mean, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, void> > {
	BOOL m_initialized;
	aligned_storage<boost::accumulators::accumulator_set<float, boost::accumulators::stats<boost::accumulators::tag::rolling_mean, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, void> > m_storage;
} optional<boost::accumulators::accumulator_set<float, boost::accumulators::stats<boost::accumulators::tag::rolling_mean, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, void> >;

typedef struct _compressed_pair<unsigned short *, std::__1::allocator<unsigned short> > {
	unsigned short __value_;
} compressed_pair<unsigned short *, std::__1::allocator<unsigned short> >;

typedef struct vector<unsigned short, std::__1::allocator<unsigned short> > {
	unsigned short __begin_;
	unsigned short __end_;
	compressed_pair<unsigned short *, std::__1::allocator<unsigned short> > __end_cap_;
} vector<unsigned short, std::__1::allocator<unsigned short> >;

typedef struct aligned_storage<unsigned long> {
	dummy_u dummy_;
	char data[8];
	a8) aligner_;
} aligned_storage<unsigned long>;

typedef struct optional<unsigned long> {
	BOOL m_initialized;
	aligned_storage<unsigned long> m_storage;
} optional<unsigned long>;

typedef struct aligned_storage<float> {
	dummy_u dummy_;
	char data[4];
	a4) aligner_;
} aligned_storage<float>;

typedef struct optional<float> {
	BOOL m_initialized;
	aligned_storage<float> m_storage;
} optional<float>;

typedef struct CompositeConfig {
	unsigned frameNumber;
	unsigned seedGeneratorFactor;
	int noiseBits;
	float noiseBitsFactor;
	float cubeIntensity;
	float noisePercentToAddAtInfinity;
} CompositeConfig;

typedef struct __IOSurfaceAccelerator* IOSurfaceAcceleratorRef;

typedef struct array<id<MTLBuffer>, 3> {
	<MTLBuffer>* __elems_[3];
} array<id<MTLBuffer>, 3>;

