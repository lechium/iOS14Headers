/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:54:39 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/JITAppKit.framework/JITAppKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/NSURLSessionDataDelegate.h>
#import <libobjc.A.dylib/NSURLSessionDownloadDelegate.h>

@class NSString, NSURLCache, NSURLSession, NSHTTPCookieStorage, NSOperationQueue, NSMutableDictionary, NSMutableArray, NSRecursiveLock, NSMutableOrderedSet, NSSet, NSArray;

@interface MCLURLDataLoader : NSObject <NSURLSessionDataDelegate, NSURLSessionDownloadDelegate> {

	NSString* _cachePath;
	NSURLCache* _cache;
	NSString* _downloadCacheDirectory;
	NSURLSession* _session;
	NSHTTPCookieStorage* _cookieStorage;
	NSOperationQueue* _operationQueue;
	NSMutableDictionary* _priorities;
	NSMutableArray* _taskQueue;
	NSRecursiveLock* _taskQueueLock;
	NSMutableDictionary* _activeTasks;
	NSMutableArray* _sessionTasks;
	NSMutableOrderedSet* _duplicateTasks;
	NSMutableOrderedSet* _rewriteRules;
	BOOL _suspended;
	BOOL _resuming;
	unsigned long long _backgroundTaskIdentifier;

}

@property (nonatomic,readonly) NSSet * cacheLocations; 
@property (nonatomic,readonly) NSOperationQueue * operationQueue; 
@property (nonatomic,readonly) NSURLSession * session;                           //@synthesize session=_session - In the implementation block
@property (nonatomic,readonly) NSHTTPCookieStorage * cookieStorage;              //@synthesize cookieStorage=_cookieStorage - In the implementation block
@property (nonatomic,readonly) NSURLCache * cache; 
@property (nonatomic,readonly) NSArray * rewriteRules; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)shared;
+(id)downloadData;
+(id)dateFromRFC1123:(id)arg1 ;
+(id)uniqueKeyForURL:(id)arg1 ;
+(id)fileExtensionForMimeType:(id)arg1 ;
+(id)mimeTypeForFileExtension:(id)arg1 ;
+(id)uniqueImageKeyForURL:(id)arg1 ;
+(void)removeFilesOlderThan:(id)arg1 inDirectory:(id)arg2 ;
+(void)applyDefaultRequestHeaders:(id)arg1 ;
+(BOOL)task:(id)arg1 equalsToTask:(id)arg2 ;
+(BOOL)isValidResumeData:(id)arg1 ;
+(id)duplicateResponse:(id)arg1 withContentLength:(long long)arg2 ;
+(void)addSessionConfigurator:(/*^block*/id)arg1 ;
+(void)restart:(/*^block*/id)arg1 ;
-(void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveData:(id)arg3 ;
-(NSOperationQueue *)operationQueue;
-(void)dispose;
-(void)setCookie:(id)arg1 ;
-(void)URLSession:(id)arg1 dataTask:(id)arg2 willCacheResponse:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(NSURLCache *)cache;
-(id)cookiesForURL:(id)arg1 ;
-(NSURLSession *)session;
-(void)URLSession:(id)arg1 downloadTask:(id)arg2 didResumeAtOffset:(long long)arg3 expectedTotalBytes:(long long)arg4 ;
-(void)cancelTask:(id)arg1 ;
-(void)URLSessionDidFinishEventsForBackgroundURLSession:(id)arg1 ;
-(void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveResponse:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)suspend;
-(void)flushCache;
-(void)URLSession:(id)arg1 didBecomeInvalidWithError:(id)arg2 ;
-(id)init;
-(void)URLSession:(id)arg1 task:(id)arg2 willPerformHTTPRedirection:(id)arg3 newRequest:(id)arg4 completionHandler:(/*^block*/id)arg5 ;
-(void)URLSession:(id)arg1 downloadTask:(id)arg2 didWriteData:(long long)arg3 totalBytesWritten:(long long)arg4 totalBytesExpectedToWrite:(long long)arg5 ;
-(void)URLSession:(id)arg1 dataTask:(id)arg2 didBecomeDownloadTask:(id)arg3 ;
-(void)clearCache;
-(void)removeCachedResponseForRequest:(id)arg1 ;
-(void)resume;
-(void)URLSession:(id)arg1 downloadTask:(id)arg2 didFinishDownloadingToURL:(id)arg3 ;
-(void)URLSession:(id)arg1 task:(id)arg2 didCompleteWithError:(id)arg3 ;
-(id)defaultSessionConfiguration;
-(long long)priorityForCategory:(id)arg1 ;
-(id)_cachedResponseForRequest:(id)arg1 ;
-(void)applicationDidEnterBackgroundNotification:(id)arg1 ;
-(void)applicationWillEnterForegroundNotification:(id)arg1 ;
-(NSHTTPCookieStorage *)cookieStorage;
-(void)configureSession;
-(id)downloadRequest:(id)arg1 category:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(id)downloadImageWithRequest:(id)arg1 category:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(id)downloadCachesDirectory;
-(id)loadRequest:(id)arg1 category:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(id)findCookie:(id)arg1 inDomain:(id)arg2 secure:(BOOL)arg3 cookies:(id)arg4 ;
-(void)enumerateCookies:(id)arg1 secure:(BOOL)arg2 cookies:(id)arg3 withBlock:(/*^block*/id)arg4 ;
-(void)enumerateCookies:(id)arg1 inDomain:(id)arg2 secure:(BOOL)arg3 withBlock:(/*^block*/id)arg4 ;
-(id)findCookie:(id)arg1 inDomain:(id)arg2 secure:(BOOL)arg3 ;
-(id)findMatchingCookies:(id)arg1 inDomain:(id)arg2 secure:(BOOL)arg3 ;
-(id)allCookies;
-(BOOL)deleteCookie:(id)arg1 inDomain:(id)arg2 secure:(BOOL)arg3 ;
-(void)deleteCookiesMatchingPredicate:(id)arg1 ;
-(id)imagesDownloadDirectory;
-(id)downloadRequest:(id)arg1 toPath:(id)arg2 category:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)setCategory:(id)arg1 forTask:(id)arg2 ;
-(void)addCacheLocation:(id)arg1 ;
-(id)downloadImageFromURL:(id)arg1 category:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)setupCache:(BOOL)arg1 ;
-(void)applicationDidBecomeActiveNotification:(id)arg1 ;
-(void)clearOldCaches:(id)arg1 ;
-(NSSet *)cacheLocations;
-(void)backgroundClearOldCaches:(id)arg1 ;
-(void)processURLRequestRewrite:(id)arg1 ;
-(void)backgroundRemoveCachedResponseForRequest:(id)arg1 ;
-(void)_removeCachedResponseForRequest:(id)arg1 force:(BOOL)arg2 ;
-(void)notifyBackgroundStopped;
-(void)operationSuspendSession;
-(void)operationResumeSession;
-(void)internalRestart:(/*^block*/id)arg1 ;
-(void)operationRestartSession;
-(void)enqueueTask:(id)arg1 reschedule:(BOOL)arg2 ;
-(id)loadRequest:(id)arg1 category:(id)arg2 completionHandler:(/*^block*/id)arg3 receiveData:(/*^block*/id)arg4 ;
-(void)operationCancelTask:(id)arg1 ;
-(void)configureSession:(id)arg1 ;
-(id)loaderTaskForSessionTask:(id)arg1 ;
-(void)storeResumeData:(id)arg1 forTask:(id)arg2 ;
-(void)notifyEnqueue;
-(void)operationReschedule;
-(unsigned long long)connectionsLimitForPriorityOfTask:(id)arg1 ;
-(void)notifyEmptyQueue;
-(id)configuredURLRequestForTask:(id)arg1 download:(BOOL*)arg2 resumeData:(id*)arg3 ;
-(void)_removeCachedResponseForRequest:(id)arg1 ;
-(id)cachableFileAttributes:(id)arg1 ;
-(id)duplicateTasksForTask:(id)arg1 ;
-(id)downloadCachedResponse:(id)arg1 ;
-(void)task:(id)arg1 completedWithError:(id)arg2 ;
-(void)updateDownloadCacheEntry:(id)arg1 ;
-(NSArray *)rewriteRules;
-(void)addRewriteRule:(id)arg1 ;
-(void)removeRewriteRule:(id)arg1 ;
-(void)removeRewriteRulesWithName:(id)arg1 ;
-(void)removeRewriteRules:(id)arg1 ;
-(void)removeAllRewriteRules;
-(void)applyRewriteRules:(id)arg1 ;
-(void)setPriority:(long long)arg1 forCategory:(id)arg2 ;
-(id)loadURL:(id)arg1 category:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(id)downloadURL:(id)arg1 toPath:(id)arg2 category:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(id)downloadURL:(id)arg1 category:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)cancelTasks:(id)arg1 ;
-(void)setCategory:(id)arg1 forTasks:(id)arg2 ;
@end

