/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:44:54 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/TextInputCore.framework/TextInputCore
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct _NSZone* NSZoneRef;

typedef struct __CFArray* CFArrayRef;

typedef struct CGImage* CGImageRef;

typedef struct NSRange {
	unsigned long long location;
	unsigned long long length;
} NSRange;

typedef struct __Mecabra* MecabraRef;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct RefPtr<TI::Favonius::KeyboardLayout> {
	KeyboardLayout m_ptr;
} RefPtr<TI::Favonius::KeyboardLayout>;

typedef struct CGPoint {
	double x;
	double y;
} CGPoint;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct {
	String field1;
	String field2;
	String field3;
	String field4;
	String field5;
	unsigned field6;
	float field7;
} SCD_Struct_TI10;

typedef struct _compressed_pair<KB::StaticDictionary *, std::__1::default_delete<KB::StaticDictionary> > {
	StaticDictionary __value_;
} compressed_pair<KB::StaticDictionary *, std::__1::default_delete<KB::StaticDictionary> >;

typedef struct unique_ptr<KB::StaticDictionary, std::__1::default_delete<KB::StaticDictionary> > {
	compressed_pair<KB::StaticDictionary *, std::__1::default_delete<KB::StaticDictionary> > __ptr_;
} unique_ptr<KB::StaticDictionary, std::__1::default_delete<KB::StaticDictionary> >;

typedef struct _LXLexicon* LXLexiconRef;

typedef struct CGColor* CGColorRef;

typedef struct __CTFont* CTFontRef;

typedef struct __CFAttributedString* CFAttributedStringRef;

typedef struct CGContext* CGContextRef;

typedef struct USet* USetRef;

typedef struct __CFString* CFStringRef;

typedef struct shared_ptr<KB::LanguageModel> {
	LanguageModel __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<KB::LanguageModel>;

typedef struct TITokenID {
	unsigned lexicon_id;
	unsigned word_id;
} TITokenID;

typedef struct TIRevisionHistoryTokenIterator {
	unsigned long long tokenIndex;
	unsigned long long documentLocation;
} TIRevisionHistoryTokenIterator;

typedef struct __MecabraContext* MecabraContextRef;

typedef struct shared_ptr<KB::TypologyLogger> {
	TypologyLogger __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<KB::TypologyLogger>;

typedef struct RefPtr<TI::Favonius::CMTouchHistory> {
	CMTouchHistory m_ptr;
} RefPtr<TI::Favonius::CMTouchHistory>;

typedef struct PathResamplerParams {
	double segment_length;
	int inflection_point_detection_mode;
	int inflection_point_type;
	BOOL should_downsample;
	double minimum_pause_length;
	BOOL should_flush_on_pause;
} PathResamplerParams;

typedef struct _compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > {
	unsigned __value_;
} compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >;

typedef struct vector<unsigned int, std::__1::allocator<unsigned int> > {
	unsigned __begin_;
	unsigned __end_;
	compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > __end_cap_;
} vector<unsigned int, std::__1::allocator<unsigned int> >;

typedef struct _compressed_pair<TI::CP::PathSample *, std::__1::allocator<TI::CP::PathSample> > {
	PathSample __value_;
} compressed_pair<TI::CP::PathSample *, std::__1::allocator<TI::CP::PathSample> >;

typedef struct vector<TI::CP::PathSample, std::__1::allocator<TI::CP::PathSample> > {
	PathSample __begin_;
	PathSample __end_;
	compressed_pair<TI::CP::PathSample *, std::__1::allocator<TI::CP::PathSample> > __end_cap_;
} vector<TI::CP::PathSample, std::__1::allocator<TI::CP::PathSample> >;

typedef struct Path {
	vector<TI::CP::PathSample, std::__1::allocator<TI::CP::PathSample> > m_samples;
	vector<unsigned int, std::__1::allocator<unsigned int> > m_inflection_points;
} Path;

typedef struct PathResampler {
	PathResamplerParams m_params;
	Path m_resampled_path;
	Path m_raw_path;
	BOOL m_is_final;
	unsigned m_processed_sample_count;
	unsigned m_retroactively_processed_sample_count;
} PathResampler;

typedef struct __EmojiLocaleDataWrapper* EmojiLocaleDataWrapperRef;

typedef struct _compressed_pair<TITokenID *, std::__1::allocator<TITokenID> > {
	TITokenID __value_;
} compressed_pair<TITokenID *, std::__1::allocator<TITokenID> >;

typedef struct vector<TITokenID, std::__1::allocator<TITokenID> > {
	TITokenID __begin_;
	TITokenID __end_;
	compressed_pair<TITokenID *, std::__1::allocator<TITokenID> > __end_cap_;
} vector<TITokenID, std::__1::allocator<TITokenID> >;

typedef struct RefPtr<KB::DictionaryContainer> {
	DictionaryContainer m_ptr;
} RefPtr<KB::DictionaryContainer>;

typedef struct {
	double field1;
} SCD_Struct_TI37;

typedef struct __CFURL* CFURLRef;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

