/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:51:32 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/AVConference.framework/AVConference
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <AVConference/AVConference-Structs.h>
#import <AVConference/VCVideoCapture.h>
#import <libobjc.A.dylib/VCVideoSource.h>

@class NSDictionary, NSString;

@interface VCScreenCapture : VCVideoCapture <VCVideoSource> {

	id _weakCapture;
	NSDictionary* _options;
	OpaqueFigVirtualDisplaySessionRef _session;
	OpaqueVTImageRotationSessionRef _rotationSession;
	CVPixelBufferPoolRef _rotationBufferPool;
	CVPixelBufferPoolRef _resizeBufferPool;
	OpaqueVTPixelTransferSessionRef _resizeTransferSession;
	BOOL _shouldResizeInitialized;
	BOOL _shouldResize;
	BOOL _forceMirroring;
	BOOL _enableClearScreen;
	int _resolutionScaling;
	opaque_pthread_mutex_t _screenCaptureLock;
	BOOL _isClearScreenThreadRunning;
	opaque_pthread_t* _clearScreenProc;
	opaque_pthread_mutex_t _clearScreenLock;
	opaque_pthread_cond_t _clearScreenChanged;
	BOOL _shouldClearScreen;
	opaqueCMSampleBufferRef _blackFrame;
	opaqueCMSampleBufferRef _previousCompleteFrame;
	CGRect _previousCompleteFrameSourceRect;
	CGRect _previousCompleteFrameDestinationRect;
	unsigned _previousCompleteFrameTransform;
	BOOL _isPreviousCompleteFrameBlack;
	SCD_Struct_VC84 _previousFrameTime;
	BOOL _shouldValidateFrameTimingAfterIdle;
	BOOL _isPreviewing;
	BOOL _isCapturing;
	int _captureWidth;
	int _captureHeight;
	int _captureFramerate;
	int _frameCount;
	BOOL _enableIdleFrameTimeAdjustments;

}

@property (readonly) BOOL isClearScreenThreadRunning;               //@synthesize isClearScreenThreadRunning=_isClearScreenThreadRunning - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)setPauseCapture:(BOOL)arg1 ;
-(int)stop:(BOOL)arg1 ;
-(BOOL)isPreviewRunning;
-(void)dealloc;
-(int)startCaptureWithWidth:(int)arg1 height:(int)arg2 frameRate:(int)arg3 ;
-(int)startPreview;
-(int)setFrameRate:(int)arg1 ;
-(void)capturedScreen:(opaqueCMSampleBufferRef)arg1 sourceRect:(CGRect)arg2 desRect:(CGRect)arg3 transform:(unsigned)arg4 isIdleFrame:(BOOL)arg5 ;
-(double)shiftSampleBufferPresentationTime:(opaqueCMSampleBufferRef)arg1 frameTime:(SCD_Struct_VC84)arg2 timeOffset:(SCD_Struct_VC84)arg3 ;
-(void)validateFrameTime:(SCD_Struct_VC84)arg1 interArrivalTime:(double)arg2 isIdle:(CFBooleanRef)arg3 shouldDropFrame:(BOOL*)arg4 shouldAddSignpost:(BOOL*)arg5 ;
-(int)performIdleTimeAdjustments:(opaqueCMSampleBufferRef)arg1 frameTime:(SCD_Struct_VC84*)arg2 isIdle:(CFBooleanRef)arg3 shouldDropFrame:(BOOL*)arg4 shouldAddSignpost:(BOOL*)arg5 ;
-(void)startClearScreenProc;
-(void)callbackWithEventString:(id)arg1 ;
-(void)stopClearScreenProc;
-(int)_startCapture;
-(int)setWidth:(int)arg1 height:(int)arg2 frameRate:(int)arg3 ;
-(int)copyColorInfo:(const _CFDictionary*)arg1 ;
-(int)configureCaptureWithToken:(VCVideoSourceToken)arg1 ;
-(BOOL)isFrontCamera;
-(int)frameCount:(BOOL)arg1 ;
-(int)frameBecameAvailableCount:(int*)arg1 figBufferQueueEmptyCount:(int*)arg2 figBufferQueueErrorCount:(int*)arg3 ;
-(BOOL)cameraSupportsFormatWidth:(int)arg1 height:(int)arg2 ;
-(void)shouldClearScreen:(BOOL)arg1 ;
-(void)processAndSendIdleBlackFrame;
-(id)initWithCaptureServer:(id)arg1 sourceConfig:(id)arg2 ;
-(BOOL)isClearScreenThreadRunning;
@end

