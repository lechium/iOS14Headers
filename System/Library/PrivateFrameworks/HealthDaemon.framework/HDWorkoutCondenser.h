/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:44:50 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/HDPeriodicActivityDelegate.h>

@protocol OS_dispatch_queue;
@class NSObject, HDPeriodicActivity, HDAssertion, HDProfile, _HDWorkoutCondenserAnalyticsAccumulator, NSString;

@interface HDWorkoutCondenser : NSObject <HDPeriodicActivityDelegate> {

	NSObject*<OS_dispatch_queue> _queue;
	HDPeriodicActivity* _periodicActivity;
	HDAssertion* _preparedDatabaseAccessibilityAssertion;
	long long _minimumSeriesSize;
	long long _maximumSeriesSize;
	long long _deletedSamplesThreshold;
	HDProfile* _profile;
	_HDWorkoutCondenserAnalyticsAccumulator* _analyticsAccumulator;

}

@property (nonatomic,__weak,readonly) HDProfile * profile;                                                  //@synthesize profile=_profile - In the implementation block
@property (nonatomic,readonly) _HDWorkoutCondenserAnalyticsAccumulator * analyticsAccumulator;              //@synthesize analyticsAccumulator=_analyticsAccumulator - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)_workoutEntitiesRequiringCondensationWithProfile:(id)arg1 limit:(long long)arg2 allowRecondensation:(BOOL)arg3 analyticsAccumulator:(id)arg4 error:(id*)arg5 ;
+(id)_condenserPredicateForQuantityType:(id)arg1 workout:(id)arg2 entity:(id)arg3 configuration:(id)arg4 ;
+(BOOL)_updateCondenserVersionForWorkout:(id)arg1 configuration:(id)arg2 error:(id*)arg3 ;
+(id)_workoutEntitiesRequiringCondensationWithPredicate:(id)arg1 limit:(long long)arg2 orderingTerms:(id)arg3 transaction:(id)arg4 error:(id*)arg5 ;
+(BOOL)_createSeriesForIdentifier:(id)arg1 workout:(id)arg2 quantityType:(id)arg3 startTime:(double)arg4 values:(id)arg5 UUIDDataToDelete:(id)arg6 provenance:(id)arg7 configuration:(id)arg8 transaction:(id)arg9 error:(id*)arg10 ;
+(id)workoutEntitiesRequiringCondensationWithProfile:(id)arg1 limit:(long long)arg2 allowRecondensation:(BOOL)arg3 error:(id*)arg4 ;
+(id)_seriesSyncIdentifierForWorkout:(id)arg1 startTime:(double)arg2 endTime:(double)arg3 count:(long long)arg4 ;
+(BOOL)_condenseWorkouts:(id)arg1 configuration:(id)arg2 error:(id*)arg3 ;
+(long long)_requiresProcessingWithEntity:(id)arg1 quantityType:(id)arg2 enumerationPredicate:(id)arg3 configuration:(id)arg4 transaction:(id)arg5 error:(id*)arg6 ;
+(id)_insertValuesForSeries:(id)arg1 quantityType:(id)arg2 startTime:(double)arg3 values:(id)arg4 provenance:(id)arg5 configuration:(id)arg6 transaction:(id)arg7 countOut:(long long*)arg8 error:(id*)arg9 ;
+(BOOL)_deleteSamplesWithUUIDData:(id)arg1 configuration:(id)arg2 error:(id*)arg3 ;
+(void)_logCondenserProcessedWorkout:(id)arg1 ;
+(BOOL)_processSamplesWithQuantityType:(id)arg1 workout:(id)arg2 predicate:(id)arg3 configuration:(id)arg4 transaction:(id)arg5 error:(id*)arg6 ;
+(id)seriesSyncIdentifierForEntity:(id)arg1 workout:(id)arg2 transaction:(id)arg3 error:(id*)arg4 ;
+(id)_dataOriginProvenanceForQuantitySampleEntity:(id)arg1 configuration:(id)arg2 transaction:(id)arg3 error:(id*)arg4 ;
+(id)_requiredMetadataForEntity:(id)arg1 quantityType:(id)arg2 workout:(id)arg3 transaction:(id)arg4 error:(id*)arg5 ;
+(id)condensableQuantityTypes;
+(BOOL)_condenseSamplesWithQuantityType:(id)arg1 workout:(id)arg2 entity:(id)arg3 predicate:(id)arg4 configuration:(id)arg5 transaction:(id)arg6 error:(id*)arg7 ;
+(long long)_hasSamplesThatOverlapInTimeWithEntity:(id)arg1 enumerationPredicate:(id)arg2 configuration:(id)arg3 transaction:(id)arg4 error:(id*)arg5 ;
+(BOOL)_condenseAndUpdateWorkout:(id)arg1 configuration:(id)arg2 error:(id*)arg3 ;
+(long long)_hasMoreThanMinimumNumberOfSingleValueSamplesWithEntity:(id)arg1 enumerationPredicate:(id)arg2 configuration:(id)arg3 transaction:(id)arg4 error:(id*)arg5 ;
+(void)_addDatumToBuffer:(id)arg1 buffer:(id)arg2 ;
+(BOOL)_condenseWorkout:(id)arg1 entity:(id)arg2 configuration:(id)arg3 error:(id*)arg4 ;
+(BOOL)_finishSeries:(id)arg1 quantityType:(id)arg2 workout:(id)arg3 UUIDDataToDelete:(id)arg4 configuration:(id)arg5 transaction:(id)arg6 error:(id*)arg7 ;
-(void)performPeriodicActivity:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)periodicActivity:(id)arg1 configureXPCActivityCriteria:(id)arg2 ;
-(BOOL)_queue_condenseWorkoutsWithBatchLimit:(long long)arg1 analyticsAccumulator:(id)arg2 error:(id*)arg3 ;
-(id)initWithProfile:(id)arg1 ;
-(void)setMaximumSeriesSize:(long long)arg1 ;
-(HDProfile *)profile;
-(void)_queue_submitAnalyticEventForReason:(long long)arg1 batchSize:(long long)arg2 success:(BOOL)arg3 duration:(double)arg4 analyticsAccumulator:(id)arg5 error:(id)arg6 ;
-(void)dealloc;
-(BOOL)condenseWorkout:(id)arg1 error:(id*)arg2 ;
-(void)_queue_popTTRPromptIfRequiredWithReason:(long long)arg1 success:(BOOL)arg2 error:(id)arg3 ;
-(void)condenseWorkoutsForReason:(long long)arg1 workoutBatchLimit:(long long)arg2 completion:(/*^block*/id)arg3 ;
-(void)setMinimumSeriesSize:(long long)arg1 ;
-(void)_queue_didPerformCondensationForReason:(long long)arg1 success:(BOOL)arg2 error:(id)arg3 ;
-(BOOL)_queue_condenseWorkoutsWithAccessibilityAssertion:(id)arg1 batchLimit:(long long)arg2 analyticsAccumulator:(id)arg3 error:(id*)arg4 ;
-(void)setDeletedSamplesThreshold:(long long)arg1 ;
-(id)condensedWorkoutsWithError:(id*)arg1 ;
-(id)condensableWorkoutsWithError:(id*)arg1 ;
-(_HDWorkoutCondenserAnalyticsAccumulator *)analyticsAccumulator;
@end

