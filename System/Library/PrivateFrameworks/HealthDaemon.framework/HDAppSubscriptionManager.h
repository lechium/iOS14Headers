/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:44:45 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/HDDatabaseProtectedDataObserver.h>

@protocol OS_dispatch_queue;
@class HDProfile, HDAppAssertionManager, HDBackgroundTaskScheduler, NSObject, NSMutableDictionary, NSMutableSet, NSString;

@interface HDAppSubscriptionManager : NSObject <HDDatabaseProtectedDataObserver> {

	BOOL _shouldScheduleLaunches;
	int _backgroundAppRefreshNotifyToken;
	HDProfile* _profile;
	HDAppAssertionManager* _appAssertionManager;
	HDBackgroundTaskScheduler* _backgroundTaskScheduler;
	NSObject*<OS_dispatch_queue> _launchQueue;
	NSMutableDictionary* _pendingTypeCodesToAnchors;
	NSMutableSet* _pendingFirstLaunchBundleIdentifiers;
	NSMutableDictionary* _launchTimers;
	NSMutableDictionary* _launchTimerLaunchTimes;
	NSObject*<OS_dispatch_queue> _launchTimerQueue;

}

@property (assign,nonatomic,__weak) HDProfile * profile;                                       //@synthesize profile=_profile - In the implementation block
@property (nonatomic,retain) HDAppAssertionManager * appAssertionManager;                      //@synthesize appAssertionManager=_appAssertionManager - In the implementation block
@property (nonatomic,retain) HDBackgroundTaskScheduler * backgroundTaskScheduler;              //@synthesize backgroundTaskScheduler=_backgroundTaskScheduler - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> launchQueue;                         //@synthesize launchQueue=_launchQueue - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * pendingTypeCodesToAnchors;                  //@synthesize pendingTypeCodesToAnchors=_pendingTypeCodesToAnchors - In the implementation block
@property (nonatomic,retain) NSMutableSet * pendingFirstLaunchBundleIdentifiers;               //@synthesize pendingFirstLaunchBundleIdentifiers=_pendingFirstLaunchBundleIdentifiers - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * launchTimers;                               //@synthesize launchTimers=_launchTimers - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * launchTimerLaunchTimes;                     //@synthesize launchTimerLaunchTimes=_launchTimerLaunchTimes - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> launchTimerQueue;                    //@synthesize launchTimerQueue=_launchTimerQueue - In the implementation block
@property (assign,nonatomic) int backgroundAppRefreshNotifyToken;                              //@synthesize backgroundAppRefreshNotifyToken=_backgroundAppRefreshNotifyToken - In the implementation block
@property (assign,nonatomic) BOOL shouldScheduleLaunches;                                      //@synthesize shouldScheduleLaunches=_shouldScheduleLaunches - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)database:(id)arg1 protectedDataDidBecomeAvailable:(BOOL)arg2 ;
-(void)setProfile:(HDProfile *)arg1 ;
-(void)_applicationsInstalled:(id)arg1 ;
-(void)_queue_ackForBundleID:(id)arg1 dataCode:(long long)arg2 anchor:(id)arg3 ackTime:(id)arg4 ;
-(void)setLaunchQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(id)initWithProfile:(id)arg1 ;
-(void)setBackgroundTaskScheduler:(HDBackgroundTaskScheduler *)arg1 ;
-(void)removeBundleID:(id)arg1 ;
-(void)setPendingTypeCodesToAnchors:(NSMutableDictionary *)arg1 ;
-(void)removeSubscriptionForBundleID:(id)arg1 dataCode:(long long)arg2 ;
-(void)_removeBundleID:(id)arg1 ;
-(void)_queue_subscribeForBundleID:(id)arg1 dataCode:(long long)arg2 frequencyInSeconds:(unsigned long long)arg3 ;
-(HDProfile *)profile;
-(NSMutableDictionary *)pendingTypeCodesToAnchors;
-(void)dealloc;
-(NSMutableDictionary *)launchTimers;
-(void)setPendingFirstLaunchBundleIdentifiers:(NSMutableSet *)arg1 ;
-(void)_queue_scheduleLaunches:(long long)arg1 anchor:(id)arg2 ;
-(void)_launchTimerFired:(id)arg1 code:(id)arg2 anchor:(id)arg3 ;
-(BOOL)_shouldDoAFirstLaunchForBundleIdentifier:(id)arg1 ;
-(id)_activityNameForSubscription:(id)arg1 anchor:(id)arg2 ;
-(id)init;
-(BOOL)areSubscriptionsSupportedForDataTypeCode:(long long)arg1 ;
-(void)ackForBundleID:(id)arg1 dataCode:(long long)arg2 anchor:(id)arg3 ackTime:(id)arg4 ;
-(NSMutableSet *)pendingFirstLaunchBundleIdentifiers;
-(void)setLaunchTimerLaunchTimes:(NSMutableDictionary *)arg1 ;
-(void)setLaunchTimerQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(NSMutableDictionary *)launchTimerLaunchTimes;
-(HDBackgroundTaskScheduler *)backgroundTaskScheduler;
-(void)_removeLaunchForSubscription:(id)arg1 anchor:(id)arg2 ;
-(void)_queue_updateBundleID:(id)arg1 dataCode:(long long)arg2 launchTime:(id)arg3 ;
-(HDAppAssertionManager *)appAssertionManager;
-(void)_removeSubscriptionForBundleID:(id)arg1 dataCode:(long long)arg2 anchor:(id)arg3 ;
-(void)setLaunchTimers:(NSMutableDictionary *)arg1 ;
-(void)setAnchor:(id)arg1 forDataCode:(long long)arg2 ;
-(void)_queue_scheduleLaunchForSubscription:(id)arg1 anchor:(id)arg2 ;
-(void)setShouldScheduleLaunches:(BOOL)arg1 ;
-(int)backgroundAppRefreshNotifyToken;
-(id)_queue_subscriptionForActivityName:(id)arg1 anchor:(id*)arg2 ;
-(void)updateBundleID:(id)arg1 dataCode:(long long)arg2 launchTime:(id)arg3 ;
-(void)unitTesting_synchronizeWithQueue;
-(id)_appSubscriptionsForDataTypeCode:(long long)arg1 lastAppLaunchTimes:(id)arg2 error:(id*)arg3 ;
-(BOOL)shouldScheduleLaunches;
-(void)subscribeForBundleID:(id)arg1 dataCode:(long long)arg2 frequencyInSeconds:(unsigned long long)arg3 ;
-(NSObject*<OS_dispatch_queue>)launchTimerQueue;
-(void)setBackgroundAppRefreshNotifyToken:(int)arg1 ;
-(NSObject*<OS_dispatch_queue>)launchQueue;
-(void)setAppAssertionManager:(HDAppAssertionManager *)arg1 ;
-(void)_queue_launchSubscription:(id)arg1 anchor:(id)arg2 ;
-(void)_backgroundTaskFiredWithName:(id)arg1 ;
@end

