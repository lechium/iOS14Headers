/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:44:50 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class HKSample;

typedef struct {
	id field1;
	id field2;
	unsigned char field3;
} SCD_Struct_HD0;

typedef struct HDSQLiteRow* HDSQLiteRowRef;

typedef struct os_unfair_lock_s {
	unsigned _os_unfair_lock_opaque;
} os_unfair_lock_s;

typedef struct _NSZone* NSZoneRef;

typedef struct sqlite3* sqlite3Ref;

typedef struct sqlite3_stmt* sqlite3_stmtRef;

typedef struct {
	long long majorVersion;
	long long minorVersion;
	long long patchVersion;
} SCD_Struct_HD6;

typedef struct {
	unsigned code : 1;
} SCD_Struct_HD7;

typedef struct {
	unsigned altitude : 1;
	unsigned course : 1;
	unsigned horizontalAccuracy : 1;
	unsigned latitude : 1;
	unsigned longitude : 1;
	unsigned speed : 1;
	unsigned timestamp : 1;
	unsigned verticalAccuracy : 1;
} SCD_Struct_HD8;

typedef struct {
	unsigned confidence : 1;
	unsigned latitude : 1;
	unsigned longitude : 1;
	unsigned uncertainty : 1;
	unsigned locationOfInterestType : 1;
} SCD_Struct_HD9;

typedef struct {
	unsigned confidence : 1;
	unsigned nextEntryTime : 1;
	unsigned modeOfTransportation : 1;
	unsigned sourceType : 1;
} SCD_Struct_HD10;

typedef struct {
	unsigned sequenceNumber : 1;
	unsigned statusCode : 1;
} SCD_Struct_HD11;

typedef struct {
	unsigned dateValue : 1;
	unsigned numberDoubleValue : 1;
	unsigned numberIntValue : 1;
} SCD_Struct_HD12;

typedef struct _compressed_pair<std::__1::tuple<long long, HKSample *> *, std::__1::allocator<std::__1::tuple<long long, HKSample *> > > {
	tuple<long long, HKSample *> __value_;
} compressed_pair<std::__1::tuple<long long, HKSample *> *, std::__1::allocator<std::__1::tuple<long long, HKSample *> > >;

typedef struct vector<std::__1::tuple<long long, HKSample *>, std::__1::allocator<std::__1::tuple<long long, HKSample *> > > {
	tuple<long long, HKSample *> __begin_;
	tuple<long long, HKSample *> __end_;
	compressed_pair<std::__1::tuple<long long, HKSample *> *, std::__1::allocator<std::__1::tuple<long long, HKSample *> > > __end_cap_;
} vector<std::__1::tuple<long long, HKSample *>, std::__1::allocator<std::__1::tuple<long long, HKSample *> > >;

typedef struct _tuple_impl<std::__1::__tuple_indices<0, 1>, long long, HKSample *> {
	long long __value_;
	HKSample* __value_;
} tuple_impl<std::__1::__tuple_indices<0, 1>, long long, HKSample *>;

typedef struct tuple<long long, HKSample *> {
	tuple_impl<std::__1::__tuple_indices<0, 1>, long long, HKSample *> __base_;
} tuple<long long, HKSample *>;

typedef struct linear_congruential_engine<unsigned int, 48271, 0, 2147483647> {
	unsigned __x_;
} linear_congruential_engine<unsigned int, 48271, 0, 2147483647>;

typedef struct param_type {
	double __mean_;
	double __stddev_;
} param_type;

typedef struct normal_distribution<double> {
	param_type __p_;
	double _V_;
	BOOL _V_hot_;
} normal_distribution<double>;

typedef struct {
	unsigned allergyInfoModifiedDate : 1;
	unsigned bloodTypeModifiedDate : 1;
	unsigned clinicalContactsModifiedDate : 1;
	unsigned dateSaved : 1;
	unsigned emergencyContactsModifiedDate : 1;
	unsigned gregorianBirthdayModifiedDate : 1;
	unsigned heightModifiedDate : 1;
	unsigned isDisabledModifiedDate : 1;
	unsigned isOrganDonor : 1;
	unsigned isOrganDonorModifiedDate : 1;
	unsigned medicalConditionsModifiedDate : 1;
	unsigned medicalNotesModifiedDate : 1;
	unsigned medicationInfoModifiedDate : 1;
	unsigned nameModifiedDate : 1;
	unsigned pictureDataModifiedDate : 1;
	unsigned primaryLanguageCodeModifiedDate : 1;
	unsigned shareDuringEmergencyModifiedDate : 1;
	unsigned weightModifiedDate : 1;
	unsigned bloodType : 1;
	unsigned schemaVersion : 1;
	unsigned isDisabled : 1;
	unsigned shareDuringEmergency : 1;
} SCD_Struct_HD20;

typedef struct MGNotificationTokenStruct* MGNotificationTokenStructRef;

typedef struct atomic_flag {
	AB _Value;
} atomic_flag;

typedef struct {
	unsigned authorizationMode : 1;
	unsigned authorizationRequest : 1;
	unsigned authorizationStatus : 1;
	unsigned modificationDate : 1;
	unsigned modificationEpoch : 1;
	unsigned objectType : 1;
} SCD_Struct_HD23;

typedef struct __CFUserNotification* CFUserNotificationRef;

typedef struct _compressed_pair<_HDWrappedSource *, std::__1::allocator<_HDWrappedSource> > {
	_HDWrappedSource __value_;
} compressed_pair<_HDWrappedSource *, std::__1::allocator<_HDWrappedSource> >;

typedef struct vector<_HDWrappedSource, std::__1::allocator<_HDWrappedSource> > {
	_HDWrappedSource __begin_;
	_HDWrappedSource __end_;
	compressed_pair<_HDWrappedSource *, std::__1::allocator<_HDWrappedSource> > __end_cap_;
} vector<_HDWrappedSource, std::__1::allocator<_HDWrappedSource> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *> *> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, HKSource *>, std::__1::hash<long long>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, HKSource *>, std::__1::hash<long long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, HKSource *>, std::__1::equal_to<long long>, true> > {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, HKSource *>, std::__1::equal_to<long long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *> *> > __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<long long, HKSource *>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, HKSource *>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, HKSource *>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, HKSource *> > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, HKSource *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, HKSource *>, std::__1::hash<long long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, HKSource *>, std::__1::equal_to<long long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<long long, HKSource *>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, HKSource *>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, HKSource *>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, HKSource *> > >;

typedef struct unordered_map<long long, HKSource *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, HKSource *> > > {
	hash_table<std::__1::__hash_value_type<long long, HKSource *>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, HKSource *>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, HKSource *>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, HKSource *> > > __table_;
} unordered_map<long long, HKSource *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, HKSource *> > >;

typedef struct {
	unsigned databaseSizeMB : 1;
	unsigned highFrequencyDataSizeMB : 1;
	unsigned lastMonthDatabaseSizeIncreaseMB : 1;
	unsigned lastMonthRowsAdded : 1;
	unsigned manuallyEnteredTypesCount : 1;
	unsigned percentageDeletedObjects : 1;
	unsigned rowCountObjects : 1;
	unsigned thirdPartyAppsCount : 1;
	unsigned thirdPartyAppsWroteDataCount : 1;
	unsigned timestamp : 1;
	unsigned rowCountCDA : 1;
	unsigned hasWatchSource : 1;
} SCD_Struct_HD37;

typedef struct {
	unsigned numberOfFriends : 1;
	unsigned numberOfFriendsAwaitingResponse : 1;
	unsigned numberOfFriendsHiddenFromMe : 1;
	unsigned numberOfFriendsMuted : 1;
	unsigned numberOfFriendsMyDataHidden : 1;
	unsigned numberOfFriendsPendingMyResponse : 1;
	unsigned timestamp : 1;
	unsigned maxFriendDuration : 1;
	unsigned medianFriendDuration : 1;
	unsigned minFriendDuration : 1;
} SCD_Struct_HD38;

typedef struct {
	unsigned daysSinceFirstCalorieGoal : 1;
	unsigned eventBusyTime : 1;
	unsigned numberOfEvents : 1;
	unsigned progressUpdateFrequency : 1;
	unsigned timeZoneOffset : 1;
	unsigned timestamp : 1;
	unsigned enableAchievements : 1;
	unsigned enableGoalCompletions : 1;
	unsigned enableStandReminders : 1;
	unsigned enableWeeklySummary : 1;
	unsigned wellnessComplicationOnWatchFace : 1;
} SCD_Struct_HD39;

typedef struct _compressed_pair<HDActivityCacheStatisticsBuilderWorkoutSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderWorkoutSample> > {
	HDActivityCacheStatisticsBuilderWorkoutSample __value_;
} compressed_pair<HDActivityCacheStatisticsBuilderWorkoutSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderWorkoutSample> >;

typedef struct vector<HDActivityCacheStatisticsBuilderWorkoutSample, std::__1::allocator<HDActivityCacheStatisticsBuilderWorkoutSample> > {
	HDActivityCacheStatisticsBuilderWorkoutSample __begin_;
	HDActivityCacheStatisticsBuilderWorkoutSample __end_;
	compressed_pair<HDActivityCacheStatisticsBuilderWorkoutSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderWorkoutSample> > __end_cap_;
} vector<HDActivityCacheStatisticsBuilderWorkoutSample, std::__1::allocator<HDActivityCacheStatisticsBuilderWorkoutSample> >;

typedef struct _compressed_pair<HDActivityCacheActiveSource *, std::__1::allocator<HDActivityCacheActiveSource> > {
	HDActivityCacheActiveSource __value_;
} compressed_pair<HDActivityCacheActiveSource *, std::__1::allocator<HDActivityCacheActiveSource> >;

typedef struct vector<HDActivityCacheActiveSource, std::__1::allocator<HDActivityCacheActiveSource> > {
	HDActivityCacheActiveSource __begin_;
	HDActivityCacheActiveSource __end_;
	compressed_pair<HDActivityCacheActiveSource *, std::__1::allocator<HDActivityCacheActiveSource> > __end_cap_;
} vector<HDActivityCacheActiveSource, std::__1::allocator<HDActivityCacheActiveSource> >;

typedef struct __SecCertificate* SecCertificateRef;

typedef struct {
	unsigned activeHours : 1;
	unsigned activeHoursGoal : 1;
	unsigned activeHoursGoalDate : 1;
	unsigned activityMoveMode : 1;
	unsigned briskMinutes : 1;
	unsigned briskMinutesGoal : 1;
	unsigned briskMinutesGoalDate : 1;
	unsigned cacheIndex : 1;
	unsigned deepBreathingDuration : 1;
	unsigned energyBurned : 1;
	unsigned energyBurnedGoal : 1;
	unsigned energyBurnedGoalDate : 1;
	unsigned flightsClimbed : 1;
	unsigned moveMinutes : 1;
	unsigned moveMinutesGoal : 1;
	unsigned moveMinutesGoalDate : 1;
	unsigned pushCount : 1;
	unsigned sequence : 1;
	unsigned stepCount : 1;
	unsigned walkingAndRunningDistance : 1;
	unsigned wheelchairUse : 1;
} SCD_Struct_HD45;

typedef struct _compressed_pair<HDActivityCacheStatisticsBuilderSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> > {
	HDActivityCacheStatisticsBuilderSample __value_;
} compressed_pair<HDActivityCacheStatisticsBuilderSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> >;

typedef struct vector<HDActivityCacheStatisticsBuilderSample, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> > {
	HDActivityCacheStatisticsBuilderSample __begin_;
	HDActivityCacheStatisticsBuilderSample __end_;
	compressed_pair<HDActivityCacheStatisticsBuilderSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> > __end_cap_;
} vector<HDActivityCacheStatisticsBuilderSample, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *> *> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, bool>, std::__1::hash<long long>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, bool>, std::__1::hash<long long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, bool>, std::__1::equal_to<long long>, true> > {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, bool>, std::__1::equal_to<long long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *> *> > __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<long long, bool>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, bool>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, bool>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, bool> > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, bool>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, bool>, std::__1::hash<long long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, bool>, std::__1::equal_to<long long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<long long, bool>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, bool>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, bool>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, bool> > >;

typedef struct unordered_map<long long, bool, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, bool> > > {
	hash_table<std::__1::__hash_value_type<long long, bool>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, bool>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, bool>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, bool> > > __table_;
} unordered_map<long long, bool, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, bool> > >;

typedef struct {
	long long list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_HD58;

typedef struct {
	unsigned duration : 1;
	unsigned goal : 1;
	unsigned goalType : 1;
	unsigned totalBasalEnergyBurnedInCanonicalUnit : 1;
	unsigned totalDistanceInCanonicalUnit : 1;
	unsigned totalEnergyBurnedInCanonicalUnit : 1;
	unsigned totalFlightsClimbedInCanonicalUnit : 1;
	unsigned totalSwimmingStrokeCountInCanonicalUnit : 1;
	unsigned type : 1;
} SCD_Struct_HD59;

typedef struct _compressed_pair<HDActivityCacheStatisticsBuilderStandHourSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderStandHourSample> > {
	HDActivityCacheStatisticsBuilderStandHourSample __value_;
} compressed_pair<HDActivityCacheStatisticsBuilderStandHourSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderStandHourSample> >;

typedef struct vector<HDActivityCacheStatisticsBuilderStandHourSample, std::__1::allocator<HDActivityCacheStatisticsBuilderStandHourSample> > {
	HDActivityCacheStatisticsBuilderStandHourSample __begin_;
	HDActivityCacheStatisticsBuilderStandHourSample __end_;
	compressed_pair<HDActivityCacheStatisticsBuilderStandHourSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderStandHourSample> > __end_cap_;
} vector<HDActivityCacheStatisticsBuilderStandHourSample, std::__1::allocator<HDActivityCacheStatisticsBuilderStandHourSample> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<_HKDataTypeCode, std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::less<_HKDataTypeCode>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<_HKDataTypeCode, std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::less<_HKDataTypeCode>, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, void *> > >;

typedef struct _tree<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::__map_value_compare<_HKDataTypeCode, std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::less<_HKDataTypeCode>, true>, std::__1::allocator<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > > > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<_HKDataTypeCode, std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::less<_HKDataTypeCode>, true> > __pair3_;
} tree<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::__map_value_compare<_HKDataTypeCode, std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::less<_HKDataTypeCode>, true>, std::__1::allocator<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > > > >;

typedef struct map<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > >, std::__1::less<_HKDataTypeCode>, std::__1::allocator<std::__1::pair<const _HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > > > > {
	tree<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::__map_value_compare<_HKDataTypeCode, std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::less<_HKDataTypeCode>, true>, std::__1::allocator<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > > > > __tree_;
} map<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > >, std::__1::less<_HKDataTypeCode>, std::__1::allocator<std::__1::pair<const _HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > > > >;

typedef struct shared_ptr<health::VirtualFilesystem> {
	VirtualFilesystem __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<health::VirtualFilesystem>;

typedef struct shared_ptr<health::DataStore> {
	DataStore __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<health::DataStore>;

typedef struct {
	unsigned list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_HD69;

typedef struct {
	unsigned endDate : 1;
	unsigned startDate : 1;
	unsigned timestamp : 1;
	unsigned alertType : 1;
	unsigned testAction : 1;
	unsigned dndEnabled : 1;
	unsigned failedPosting : 1;
} SCD_Struct_HD70;

typedef struct _compressed_pair<HistogramBucket *, std::__1::allocator<HistogramBucket> > {
	HistogramBucket __value_;
} compressed_pair<HistogramBucket *, std::__1::allocator<HistogramBucket> >;

typedef struct vector<HistogramBucket, std::__1::allocator<HistogramBucket> > {
	HistogramBucket __begin_;
	HistogramBucket __end_;
	compressed_pair<HistogramBucket *, std::__1::allocator<HistogramBucket> > __end_cap_;
} vector<HistogramBucket, std::__1::allocator<HistogramBucket> >;

typedef struct HistogramState {
	vector<HistogramBucket, std::__1::allocator<HistogramBucket> > _dateBuckets;
	double _histogramBucketAnchor;
	double _histogramBucketSize;
	long long _currentStartDateBucket;
} HistogramState;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::tuple<double, double, float> > > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::tuple<double, double, float> > >;

typedef struct _compressed_pair<std::__1::tuple<double, double, float> **, std::__1::allocator<std::__1::tuple<double, double, float> *> > {
	tuple<double, double, float> __value_;
} compressed_pair<std::__1::tuple<double, double, float> **, std::__1::allocator<std::__1::tuple<double, double, float> *> >;

typedef struct _split_buffer<std::__1::tuple<double, double, float> *, std::__1::allocator<std::__1::tuple<double, double, float> *> > {
	tuple<double, double, float> __first_;
	tuple<double, double, float> __begin_;
	tuple<double, double, float> __end_;
	compressed_pair<std::__1::tuple<double, double, float> **, std::__1::allocator<std::__1::tuple<double, double, float> *> > __end_cap_;
} split_buffer<std::__1::tuple<double, double, float> *, std::__1::allocator<std::__1::tuple<double, double, float> *> >;

typedef struct deque<std::__1::tuple<double, double, float>, std::__1::allocator<std::__1::tuple<double, double, float> > > {
	split_buffer<std::__1::tuple<double, double, float> *, std::__1::allocator<std::__1::tuple<double, double, float> *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::tuple<double, double, float> > > __size_;
} deque<std::__1::tuple<double, double, float>, std::__1::allocator<std::__1::tuple<double, double, float> > >;

typedef struct ObjectIdentifier {
	long long objectType;
	unsigned long long identifier;
} ObjectIdentifier;

typedef struct {
	unsigned day : 1;
	unsigned era : 1;
	unsigned hour : 1;
	unsigned minute : 1;
	unsigned month : 1;
	unsigned nanosecond : 1;
	unsigned quarter : 1;
	unsigned second : 1;
	unsigned weekOfMonth : 1;
	unsigned weekOfYear : 1;
	unsigned weekday : 1;
	unsigned weekdayOrdinal : 1;
	unsigned year : 1;
	unsigned yearForWeekOfYear : 1;
} SCD_Struct_HD79;

typedef struct _compressed_pair<_HDStatisticsCollectionCalculatorImplementation *, std::__1::default_delete<_HDStatisticsCollectionCalculatorImplementation> > {
	_HDStatisticsCollectionCalculatorImplementation __value_;
} compressed_pair<_HDStatisticsCollectionCalculatorImplementation *, std::__1::default_delete<_HDStatisticsCollectionCalculatorImplementation> >;

typedef struct unique_ptr<_HDStatisticsCollectionCalculatorImplementation, std::__1::default_delete<_HDStatisticsCollectionCalculatorImplementation> > {
	compressed_pair<_HDStatisticsCollectionCalculatorImplementation *, std::__1::default_delete<_HDStatisticsCollectionCalculatorImplementation> > __ptr_;
} unique_ptr<_HDStatisticsCollectionCalculatorImplementation, std::__1::default_delete<_HDStatisticsCollectionCalculatorImplementation> >;

typedef struct _compressed_pair<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample *, std::__1::allocator<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample> > {
	HDActivityCacheHeartRateStatisticsBuilderHeartRateSample __value_;
} compressed_pair<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample *, std::__1::allocator<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample> >;

typedef struct vector<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample, std::__1::allocator<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample> > {
	HDActivityCacheHeartRateStatisticsBuilderHeartRateSample __begin_;
	HDActivityCacheHeartRateStatisticsBuilderHeartRateSample __end_;
	compressed_pair<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample *, std::__1::allocator<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample> > __end_cap_;
} vector<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample, std::__1::allocator<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample> >;

typedef struct {
	double field1;
	double field2;
	double field3;
	BOOL field4;
	BOOL field5;
	BOOL field6;
} SCD_Struct_HD84;

typedef struct HDSyncAnchorRange {
	long long start;
	long long end;
} HDSyncAnchorRange;

typedef struct {
	unsigned activeHours : 1;
	unsigned activeHoursGoal : 1;
	unsigned amm : 1;
	unsigned briskMinutes : 1;
	unsigned briskMinutesGoal : 1;
	unsigned date : 1;
	unsigned energyBurned : 1;
	unsigned energyBurnedGoal : 1;
	unsigned mmg : 1;
	unsigned mmv : 1;
	unsigned pushCount : 1;
	unsigned snapshotIndex : 1;
	unsigned stepCount : 1;
	unsigned timeZoneOffsetFromUTCForNoon : 1;
	unsigned uploadedDate : 1;
	unsigned walkingAndRunningDistance : 1;
	unsigned wheelchairUse : 1;
} SCD_Struct_HD86;

typedef struct __CFSet* CFSetRef;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct {
	double list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_HD89;

