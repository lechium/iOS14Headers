/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:44:48 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol OS_dispatch_queue;
#import <HealthDaemon/HealthDaemon-Structs.h>
@class NSDictionary, NSUUID, NSCache, HKObserverSet, HDProfile, NSObject, HDSimpleGraphDatabase, NSURL;

@interface HDHealthOntologyManager : NSObject {

	NSDictionary* _codingSystemPriorityInfo;
	NSUUID* _assetAvailabilityRegistrationToken;
	os_unfair_lock_s _ivarLock;
	AB _invalidated;
	NSCache* _nebulousConceptCache;
	HKObserverSet* _observers;
	BOOL _useCache;
	NSCache* _conceptsByIdentifierCache;
	AB _enabled;
	BOOL _unitTest_useEmbeddedOntology;
	BOOL _unitTest_useEmbeddedOntologyAsset;
	HDProfile* _profile;
	NSObject*<OS_dispatch_queue> _queue;
	HDSimpleGraphDatabase* _graphDatabase;
	NSURL* _ontologyURL;

}

@property (nonatomic,__weak,readonly) HDProfile * profile;                                         //@synthesize profile=_profile - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> queue;                                   //@synthesize queue=_queue - In the implementation block
@property (nonatomic,retain) HDSimpleGraphDatabase * graphDatabase;                                //@synthesize graphDatabase=_graphDatabase - In the implementation block
@property (nonatomic,copy,readonly) NSURL * ontologyURL;                                           //@synthesize ontologyURL=_ontologyURL - In the implementation block
@property (nonatomic,readonly) BOOL ignoresVersionCheckDuringReferenceOntologyImport; 
@property (nonatomic,readonly) BOOL ignoresOntologyAssetAvailabilityChanges; 
@property (nonatomic,readonly) BOOL unitTest_useEmbeddedOntology;                                  //@synthesize unitTest_useEmbeddedOntology=_unitTest_useEmbeddedOntology - In the implementation block
@property (nonatomic,readonly) BOOL unitTest_useEmbeddedOntologyAsset;                             //@synthesize unitTest_useEmbeddedOntologyAsset=_unitTest_useEmbeddedOntologyAsset - In the implementation block
@property (assign,getter=isEnabled,nonatomic) BOOL enabled; 
+(id)_ontologyURLForProfile:(id)arg1 ;
+(BOOL)graphDatabase:(id)arg1 setVersion:(id)arg2 error:(id*)arg3 ;
+(void)obliterateWithProfile:(id)arg1 reason:(id)arg2 ;
-(void)unregisterObserver:(id)arg1 ;
-(void)invalidateAndWait;
-(void)registerObserver:(id)arg1 ;
-(BOOL)unitTest_useEmbeddedOntology;
-(id)initWithProfile:(id)arg1 ;
-(BOOL)isEnabled;
-(HDProfile *)profile;
-(void)obliterateWithReason:(id)arg1 ;
-(void)_queue_clearCache;
-(id)init;
-(NSObject*<OS_dispatch_queue>)queue;
-(BOOL)unitTest_useEmbeddedOntologyAsset;
-(void)setQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(void)setEnabled:(BOOL)arg1 ;
-(id)versionWithError:(id*)arg1 ;
-(id)conceptForIdentifier:(id)arg1 loadRelationships:(BOOL)arg2 error:(id*)arg3 ;
-(id)relationshipsForConceptWithIdentifier:(id)arg1 error:(id*)arg2 ;
-(BOOL)makeAssociationFromSampleUUID:(id)arg1 toConcept:(id)arg2 error:(id*)arg3 ;
-(BOOL)breakAssociationFromSampleUUID:(id)arg1 toConcept:(id)arg2 error:(id*)arg3 ;
-(long long)countOfConceptsAssociatedWithUserRecords:(id*)arg1 ;
-(void)hd_unitTesting_closeDatabase;
-(void)importUsingAssetAtLocation:(id)arg1 rememberLocation:(BOOL)arg2 completion:(/*^block*/id)arg3 ;
-(id)_ontologyAssetManager;
-(void)_queue_closeDatabase;
-(void)_queue_createAndInitializeIfNeeded;
-(NSURL *)ontologyURL;
-(long long)_graphDatabaseVersionImplementation:(id)arg1 error:(id*)arg2 ;
-(BOOL)ignoresVersionCheckDuringReferenceOntologyImport;
-(void)_notifyObserversReferenceOntologyCreated;
-(void)_notifyObserversReferenceOntologyWillUpdate;
-(BOOL)_queue_insertTwoItemRawOntologyValueIntoDatabase:(id)arg1 table:(id)arg2 valueString:(id)arg3 ;
-(BOOL)_queue_insertRawAttributeIntoDatabase:(id)arg1 valueString:(id)arg2 ;
-(BOOL)_queue_insertRawRelationshipIntoDatabase:(id)arg1 valueString:(id)arg2 ;
-(void)_notifyObserversReferenceOntologyDidUpdateWithSuccess:(BOOL)arg1 error:(id)arg2 ;
-(id)_queue_graphDatabase;
-(long long)_queue_graphDatabaseVersionWithError:(id*)arg1 ;
-(id)_graphDatabaseUserVersionImplementation:(id)arg1 error:(id*)arg2 ;
-(id)_queue_graphDatabaseUserVersionWithError:(id*)arg1 ;
-(BOOL)useEmbeddedOntology;
-(void)_handleOntologyAssetAvailabilityUpdate:(long long)arg1 ;
-(BOOL)_createOntologyDirectoryIfNecessaryWithError:(id*)arg1 ;
-(BOOL)_queue_copyEmbeddedReferenceOntology;
-(id)_work_graphDatabase:(id)arg1 findConceptsForCodings:(id)arg2 error:(id*)arg3 ;
-(id)_ontologyConfigurationForCountryCode:(id)arg1 ;
-(HDSimpleGraphDatabase *)graphDatabase;
-(id)_work_graphDatabase:(id)arg1 resolveMercuryConceptForCodings:(id)arg2 country:(id)arg3 error:(id*)arg4 ;
-(id)_work_graphDatabase:(id)arg1 findConceptForCoding:(id)arg2 error:(id*)arg3 ;
-(id)_work_graphDatabase:(id)arg1 newConceptIdentifierWithName:(id)arg2 error:(id*)arg3 ;
-(BOOL)_work_graphDatabase:(id)arg1 insertConcept:(id)arg2 error:(id*)arg3 ;
-(id)_work_conceptFromGraphNode:(id)arg1 preloadRelationships:(BOOL)arg2 error:(id*)arg3 ;
-(id)work_relationshipsForConceptWithIdentifier:(id)arg1 error:(id*)arg2 ;
-(BOOL)performGraphDatabaseWork:(/*^block*/id)arg1 error:(id*)arg2 ;
-(id)conceptsForIdentifiers:(id)arg1 expectedOntologyVersion:(id)arg2 loadRelationships:(BOOL)arg3 error:(id*)arg4 ;
-(id)_queue_conceptsWithGraphDatabaseCall:(/*^block*/id)arg1 loadRelationships:(BOOL)arg2 error:(id*)arg3 ;
-(id)_conceptWithGraphDatabaseCall:(/*^block*/id)arg1 error:(id*)arg2 ;
-(id)_conceptsWithGraphDatabaseCall:(/*^block*/id)arg1 loadRelationships:(BOOL)arg2 error:(id*)arg3 ;
-(id)_conceptsWithRelationship:(id)arg1 toNodeWithID:(id)arg2 reversed:(BOOL)arg3 error:(id*)arg4 ;
-(id)conceptsAssociatedWithSampleUUID:(id)arg1 error:(id*)arg2 ;
-(void)_queue_clearCachedConceptWithIdentifier:(id)arg1 ;
-(id)conceptsWithRelationship:(id)arg1 toNodeWithID:(id)arg2 error:(id*)arg3 ;
-(id)conceptsWithRelationship:(id)arg1 fromNodeWithID:(id)arg2 error:(id*)arg3 ;
-(BOOL)_queue_importReferenceOntology;
-(void)importWithCompletion:(/*^block*/id)arg1 ;
-(BOOL)ignoresOntologyAssetAvailabilityChanges;
-(id)_referenceOntologyFileURL;
-(BOOL)useEmbeddedOntologyAsset;
-(BOOL)hd_unitTesting_setVersion:(id)arg1 error:(id*)arg2 ;
-(id)userVersionWithError:(id*)arg1 ;
-(id)conceptForCodingCollection:(id)arg1 country:(id)arg2 ;
-(id)conceptForName:(id)arg1 error:(id*)arg2 ;
-(BOOL)insertAssociations:(id)arg1 error:(id*)arg2 ;
-(BOOL)makeAssociationFromSampleUUID:(id)arg1 toConceptIdentifier:(id)arg2 error:(id*)arg3 ;
-(BOOL)removeAllAssociationsToSampleUUID:(id)arg1 error:(id*)arg2 ;
-(id)sampleUUIDsAssociatedWithConcept:(id)arg1 error:(id*)arg2 ;
-(id)conceptsAssociatedWithSample:(id)arg1 error:(id*)arg2 ;
-(id)allAssociatedConceptsWithError:(id*)arg1 ;
-(void)hd_unitTesting_setupDatabase;
-(void)hd_unitTesting_disableCache;
-(void)hd_unitTesting_clearCache;
-(void)setGraphDatabase:(HDSimpleGraphDatabase *)arg1 ;
@end

