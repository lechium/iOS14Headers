/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:44:48 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <HealthDaemon/HealthDaemon-Structs.h>
#import <HealthDaemon/HDCloudSyncOperation.h>

@class NSMutableArray, HDCloudSyncOperation, NSArray, NSString;

@interface HDCloudSyncCompoundOperation : HDCloudSyncOperation {

	NSMutableArray* _operations;
	os_unfair_lock_s _lock;
	HDCloudSyncOperation* _currentOperation;
	NSArray* _remainingOperations;
	atomic_flag _runningOperations;
	NSMutableArray* _operationErrors;
	BOOL _continueOnSubOperationError;
	NSString* _name;
	/*^block*/id _preparationHandler;

}

@property (nonatomic,copy,readonly) NSString * name;                //@synthesize name=_name - In the implementation block
@property (readonly) BOOL continueOnSubOperationError;              //@synthesize continueOnSubOperationError=_continueOnSubOperationError - In the implementation block
@property (copy,readonly) NSArray * operations; 
@property (copy) id preparationHandler;                             //@synthesize preparationHandler=_preparationHandler - In the implementation block
+(BOOL)shouldLogAtOperationStart;
+(BOOL)shouldProduceOperationAnalytics;
-(void)skip;
-(NSArray *)operations;
-(void)_invalidate;
-(void)start;
-(BOOL)finishWithSuccess:(BOOL)arg1 error:(id)arg2 ;
-(id)preparationHandler;
-(void)setPreparationHandler:(id)arg1 ;
-(NSString *)name;
-(void)main;
-(id)description;
-(id)initWithConfiguration:(id)arg1 cloudState:(id)arg2 ;
-(id)initWithConfiguration:(id)arg1 cloudState:(id)arg2 name:(id)arg3 continueOnSubOperationError:(BOOL)arg4 ;
-(void)addOperation:(id)arg1 transitionHandler:(/*^block*/id)arg2 ;
-(void)addOperationOfClass:(Class)arg1 transitionHandler:(/*^block*/id)arg2 ;
-(void)_recordError:(id)arg1 ;
-(id)_compoundError;
-(void)_runRemainingOperations;
-(id)_popNextRunnableOperation;
-(void)_clearOperationAndRunRemaining:(id)arg1 ;
-(void)_currentOperation:(id)arg1 didFailWithError:(id)arg2 nextOperation:(id)arg3 transitionHandler:(/*^block*/id)arg4 ;
-(void)_currentOperationDidFinish:(id)arg1 nextOperation:(id)arg2 transitionHandler:(/*^block*/id)arg3 ;
-(BOOL)continueOnSubOperationError;
@end

