/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:52:32 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/ARKitCore.framework/ARKitCore
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class ARWorldTrackingOptions, NSNumber;

typedef struct ARRigEvaluationData {
	RERigAssetBuilder rigAssetBuilder;
	RERigEvaluation rigEvaluation;
} ARRigEvaluationData;

typedef struct {
	[4 columns];
} SCD_Struct_AR1;

typedef struct _compressed_pair<unsigned char *, std::__1::allocator<unsigned char> > {
	char* __value_;
} compressed_pair<unsigned char *, std::__1::allocator<unsigned char> >;

typedef struct vector<unsigned char, std::__1::allocator<unsigned char> > {
	char* __begin_;
	char* __end_;
	compressed_pair<unsigned char *, std::__1::allocator<unsigned char> > __end_cap_;
} vector<unsigned char, std::__1::allocator<unsigned char> >;

typedef struct Matrix<short, 3, 1, false> {
	short m_data[3];
} Matrix<short, 3, 1, false>;

typedef struct _compressed_pair<cva::Matrix<unsigned int, 3, 1, false> *, std::__1::allocator<cva::Matrix<unsigned int, 3, 1, false> > > {
	Matrix<unsigned int, 3, 1, false> __value_;
} compressed_pair<cva::Matrix<unsigned int, 3, 1, false> *, std::__1::allocator<cva::Matrix<unsigned int, 3, 1, false> > >;

typedef struct vector<cva::Matrix<unsigned int, 3, 1, false>, std::__1::allocator<cva::Matrix<unsigned int, 3, 1, false> > > {
	Matrix<unsigned int, 3, 1, false> __begin_;
	Matrix<unsigned int, 3, 1, false> __end_;
	compressed_pair<cva::Matrix<unsigned int, 3, 1, false> *, std::__1::allocator<cva::Matrix<unsigned int, 3, 1, false> > > __end_cap_;
} vector<cva::Matrix<unsigned int, 3, 1, false>, std::__1::allocator<cva::Matrix<unsigned int, 3, 1, false> > >;

typedef struct _compressed_pair<cva::Matrix<float, 2, 1, false> *, std::__1::allocator<cva::Matrix<float, 2, 1, false> > > {
	Matrix<float, 2, 1, false> __value_;
} compressed_pair<cva::Matrix<float, 2, 1, false> *, std::__1::allocator<cva::Matrix<float, 2, 1, false> > >;

typedef struct vector<cva::Matrix<float, 2, 1, false>, std::__1::allocator<cva::Matrix<float, 2, 1, false> > > {
	Matrix<float, 2, 1, false> __begin_;
	Matrix<float, 2, 1, false> __end_;
	compressed_pair<cva::Matrix<float, 2, 1, false> *, std::__1::allocator<cva::Matrix<float, 2, 1, false> > > __end_cap_;
} vector<cva::Matrix<float, 2, 1, false>, std::__1::allocator<cva::Matrix<float, 2, 1, false> > >;

typedef struct _compressed_pair<cva::Matrix<unsigned int, 2, 1, false> *, std::__1::allocator<cva::Matrix<unsigned int, 2, 1, false> > > {
	Matrix<unsigned int, 2, 1, false> __value_;
} compressed_pair<cva::Matrix<unsigned int, 2, 1, false> *, std::__1::allocator<cva::Matrix<unsigned int, 2, 1, false> > >;

typedef struct vector<cva::Matrix<unsigned int, 2, 1, false>, std::__1::allocator<cva::Matrix<unsigned int, 2, 1, false> > > {
	Matrix<unsigned int, 2, 1, false> __begin_;
	Matrix<unsigned int, 2, 1, false> __end_;
	compressed_pair<cva::Matrix<unsigned int, 2, 1, false> *, std::__1::allocator<cva::Matrix<unsigned int, 2, 1, false> > > __end_cap_;
} vector<cva::Matrix<unsigned int, 2, 1, false>, std::__1::allocator<cva::Matrix<unsigned int, 2, 1, false> > >;

typedef struct _compressed_pair<cva::Matrix<float, 3, 1, false> *, std::__1::allocator<cva::Matrix<float, 3, 1, false> > > {
	Matrix<float, 3, 1, false> __value_;
} compressed_pair<cva::Matrix<float, 3, 1, false> *, std::__1::allocator<cva::Matrix<float, 3, 1, false> > >;

typedef struct vector<cva::Matrix<float, 3, 1, false>, std::__1::allocator<cva::Matrix<float, 3, 1, false> > > {
	Matrix<float, 3, 1, false> __begin_;
	Matrix<float, 3, 1, false> __end_;
	compressed_pair<cva::Matrix<float, 3, 1, false> *, std::__1::allocator<cva::Matrix<float, 3, 1, false> > > __end_cap_;
} vector<cva::Matrix<float, 3, 1, false>, std::__1::allocator<cva::Matrix<float, 3, 1, false> > >;

typedef struct TriMesh<float, unsigned int> {
	vector<cva::Matrix<float, 3, 1, false>, std::__1::allocator<cva::Matrix<float, 3, 1, false> > > vertices;
	vector<cva::Matrix<float, 3, 1, false>, std::__1::allocator<cva::Matrix<float, 3, 1, false> > > colors;
	vector<cva::Matrix<float, 3, 1, false>, std::__1::allocator<cva::Matrix<float, 3, 1, false> > > normals;
	vector<cva::Matrix<unsigned int, 3, 1, false>, std::__1::allocator<cva::Matrix<unsigned int, 3, 1, false> > > faces;
	vector<cva::Matrix<unsigned int, 2, 1, false>, std::__1::allocator<cva::Matrix<unsigned int, 2, 1, false> > > edges;
	vector<cva::Matrix<float, 2, 1, false>, std::__1::allocator<cva::Matrix<float, 2, 1, false> > > tex_coords;
	vector<cva::Matrix<unsigned int, 3, 1, false>, std::__1::allocator<cva::Matrix<unsigned int, 3, 1, false> > > tex_faces;
} TriMesh<float, unsigned int>;

typedef struct ChunkMesh {
	Matrix<short, 3, 1, false> chunk_position;
	TriMesh<float, unsigned int> mesh;
} ChunkMesh;

typedef struct __CVPixelBufferPool* CVPixelBufferPoolRef;

typedef struct vImageCVImageFormat* vImageCVImageFormatRef;

typedef struct {
	float field1;
	float field2;
	float field3;
	float field4;
	BOOL field5;
} SCD_Struct_AR17;

typedef struct _NSZone* NSZoneRef;

typedef struct {
	long long field1;
	int field2;
	unsigned field3;
	long long field4;
} SCD_Struct_AR19;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct {
	void field1;
	void field2;
	unsigned long long field3[4];
	unsigned long long field4[4];
	unsigned long long field5;
	unsigned long long field6;
	unsigned long long field7;
	unsigned long long field8;
	unsigned long long field9;
	unsigned long long field10;
	unsigned long long field11;
	unsigned long long field12;
	unsigned long long field13;
	unsigned long long field14;
	int field15;
} SCD_Struct_AR21;

typedef struct _compressed_pair<float * __attribute__((ext_vector_type(2))), std::__1::allocator<float __attribute__((ext_vector_type(2)))> > {
	 __value_;
} compressed_pair<float * __attribute__((ext_vector_type(2))), std::__1::allocator<float __attribute__((ext_vector_type(2)))> >;

typedef struct vector<float __attribute__((ext_vector_type(2))), std::__1::allocator<float __attribute__((ext_vector_type(2)))> > {
	 __begin_;
	 __end_;
	compressed_pair<float * __attribute__((ext_vector_type(2))), std::__1::allocator<float __attribute__((ext_vector_type(2)))> > __end_cap_;
} vector<float __attribute__((ext_vector_type(2))), std::__1::allocator<float __attribute__((ext_vector_type(2)))> >;

typedef struct __CVBuffer* CVBufferRef;

typedef struct {
	[3 columns];
} SCD_Struct_AR25;

typedef struct CGImage* CGImageRef;

typedef struct _compressed_pair<float * __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> > {
	 __value_;
} compressed_pair<float * __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> >;

typedef struct vector<float __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> > {
	 __begin_;
	 __end_;
	compressed_pair<float * __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> > __end_cap_;
} vector<float __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> >;

typedef struct opaqueCMSampleBuffer* opaqueCMSampleBufferRef;

typedef struct CGPoint {
	double x;
	double y;
} CGPoint;

typedef struct shared_ptr<arkit::KeyMapBuffer<const void *, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > > > {
	KeyMapBuffer<const void *, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<arkit::KeyMapBuffer<const void *, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > > >;

typedef struct _compressed_pair<float *, std::__1::allocator<float> > {
	float __value_;
} compressed_pair<float *, std::__1::allocator<float> >;

typedef struct vector<float, std::__1::allocator<float> > {
	float __begin_;
	float __end_;
	compressed_pair<float *, std::__1::allocator<float> > __end_cap_;
} vector<float, std::__1::allocator<float> >;

typedef struct OpaqueVTImageRotationSession* OpaqueVTImageRotationSessionRef;

typedef struct {
	float field1;
	float field2;
	float field3;
} SCD_Struct_AR35;

typedef struct {
	SCD_Struct_AR35 field1;
	double field2;
} SCD_Struct_AR36;

typedef struct __IOHIDEventSystemClient* IOHIDEventSystemClientRef;

typedef struct __IOHIDServiceClient* IOHIDServiceClientRef;

typedef struct __IOHIDEvent* IOHIDEventRef;

typedef struct _compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long> > {
	unsigned long long __value_;
} compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long> >;

typedef struct vector<unsigned long long, std::__1::allocator<unsigned long long> > {
	unsigned long long __begin_;
	unsigned long long __end_;
	compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long> > __end_cap_;
} vector<unsigned long long, std::__1::allocator<unsigned long long> >;

typedef const struct vector<float __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> >__compressed_pair<float * __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> >* ector<float __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> >Ref;

typedef struct OpaqueVTPixelTransferSession* OpaqueVTPixelTransferSessionRef;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct {
	double x;
	double y;
	double z;
} SCD_Struct_AR45;

typedef struct CV3DSLAMCalibration* CV3DSLAMCalibrationRef;

typedef struct {
	int field1;
	int field2;
} SCD_Struct_AR47;

typedef struct {
	float coefficients[9];
} SCD_Struct_AR48;

typedef struct shared_ptr<arkit::RobustExpFilter<float> > {
	RobustExpFilter<float> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<arkit::RobustExpFilter<float> >;

typedef struct _compressed_pair<int *, std::__1::allocator<int> > {
	int __value_;
} compressed_pair<int *, std::__1::allocator<int> >;

typedef struct vector<int, std::__1::allocator<int> > {
	int __begin_;
	int __end_;
	compressed_pair<int *, std::__1::allocator<int> > __end_cap_;
} vector<int, std::__1::allocator<int> >;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct __CFRunLoopObserver* CFRunLoopObserverRef;

typedef struct __CFArray* CFArrayRef;

typedef struct os_unfair_lock_s {
	unsigned _os_unfair_lock_opaque;
} os_unfair_lock_s;

typedef struct {
	double field1[9];
	double field2[3];
	double field3[9];
	unsigned long long field4;
	unsigned field5;
} SCD_Struct_AR56;

typedef struct {
	long long value;
	int timescale;
	unsigned flags;
	long long epoch;
} SCD_Struct_AR57;

typedef const struct CV3DReconMeshList* CV3DReconMeshListRef;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<CV3DVIOError, std::__1::__value_type<CV3DVIOError, double>, std::__1::less<CV3DVIOError>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<CV3DVIOError, std::__1::__value_type<CV3DVIOError, double>, std::__1::less<CV3DVIOError>, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CV3DVIOError, double>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CV3DVIOError, double>, void *> > >;

typedef struct _tree<std::__1::__value_type<CV3DVIOError, double>, std::__1::__map_value_compare<CV3DVIOError, std::__1::__value_type<CV3DVIOError, double>, std::__1::less<CV3DVIOError>, true>, std::__1::allocator<std::__1::__value_type<CV3DVIOError, double> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CV3DVIOError, double>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<CV3DVIOError, std::__1::__value_type<CV3DVIOError, double>, std::__1::less<CV3DVIOError>, true> > __pair3_;
} tree<std::__1::__value_type<CV3DVIOError, double>, std::__1::__map_value_compare<CV3DVIOError, std::__1::__value_type<CV3DVIOError, double>, std::__1::less<CV3DVIOError>, true>, std::__1::allocator<std::__1::__value_type<CV3DVIOError, double> > >;

typedef struct map<CV3DVIOError, double, std::__1::less<CV3DVIOError>, std::__1::allocator<std::__1::pair<const CV3DVIOError, double> > > {
	tree<std::__1::__value_type<CV3DVIOError, double>, std::__1::__map_value_compare<CV3DVIOError, std::__1::__value_type<CV3DVIOError, double>, std::__1::less<CV3DVIOError>, true>, std::__1::allocator<std::__1::__value_type<CV3DVIOError, double> > > __tree_;
} map<CV3DVIOError, double, std::__1::less<CV3DVIOError>, std::__1::allocator<std::__1::pair<const CV3DVIOError, double> > >;

typedef struct PlaneDetectionConfiguration {
	ARWorldTrackingOptions* options;
	NSNumber* detectionCountUserDefaultValue;
	NSNumber* minVergenceAngleDegreesUserDefaultValue;
	id lineFeaturesAlwaysOnUserDefaultValue;
	BOOL deterministicMode;
} PlaneDetectionConfiguration;

typedef struct CV3DSMRenderer* CV3DSMRendererRef;

typedef struct CV3DVIOContext* CV3DVIOContextRef;

typedef struct shared_ptr<ObjectPlacementAPI> {
	ObjectPlacementAPI __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ObjectPlacementAPI>;

typedef struct shared_ptr<PlaneDetectionAPI> {
	PlaneDetectionAPI __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<PlaneDetectionAPI>;

typedef struct __CFError* CFErrorRef;

typedef const struct CV3DSLAMStateSnapshotContext* CV3DSLAMStateSnapshotContextRef;

typedef const struct CV3DSLAMStateContext* CV3DSLAMStateContextRef;

typedef struct CV3DRaycastResultMap* CV3DRaycastResultMapRef;

typedef struct CV3DPlaneDetectionPlaneList* CV3DPlaneDetectionPlaneListRef;

typedef struct {
	__CFUUID field1;
	unsigned long long field2;
} SCD_Struct_AR74;

typedef struct optional<float> {
	/*function pointer*/void* ;
	char __null_state_;
	f) __val_;
	BOOL __engaged_;
} optional<float>;

typedef struct ExponentialSmoother<float> {
	optional<float> state;
} ExponentialSmoother<float>;

typedef struct _compressed_pair<ARPatch *, std::__1::allocator<ARPatch> > {
	/*function pointer*/void* __value_;
} compressed_pair<ARPatch *, std::__1::allocator<ARPatch> >;

typedef struct vector<ARPatch, std::__1::allocator<ARPatch> > {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<ARPatch *, std::__1::allocator<ARPatch> > __end_cap_;
} vector<ARPatch, std::__1::allocator<ARPatch> >;

typedef struct vImageMapping* vImageMappingRef;

typedef struct CLLocationCoordinate2D {
	double latitude;
	double longitude;
} CLLocationCoordinate2D;

typedef struct archive_entry* archive_entryRef;

typedef struct archive* archiveRef;

typedef struct CV3DODTContext* CV3DODTContextRef;

typedef struct Matrix<float, 0, 1, false> {
	float m_data;
	unsigned long long m_capacity;
	unsigned m_rows;
} Matrix<float, 0, 1, false>;

typedef struct Matrix<float, 0, 0, false> {
	float m_data;
	unsigned long long m_capacity;
	unsigned m_rows;
	unsigned m_cols;
} Matrix<float, 0, 0, false>;

typedef struct Matrix<float, 9, 1, false> {
	float m_data[9];
} Matrix<float, 9, 1, false>;

typedef struct _compressed_pair<unsigned long *, std::__1::allocator<unsigned long> > {
	unsigned long long __value_;
} compressed_pair<unsigned long *, std::__1::allocator<unsigned long> >;

typedef struct vector<unsigned long, std::__1::allocator<unsigned long> > {
	unsigned long long __begin_;
	unsigned long long __end_;
	compressed_pair<unsigned long *, std::__1::allocator<unsigned long> > __end_cap_;
} vector<unsigned long, std::__1::allocator<unsigned long> >;

typedef struct optional<cva::Matrix<float, 9, 1, false> > {
	/*function pointer*/void* ;
	char __null_state_;
	Matrix<float, 9, 1, false>) __val_;
	BOOL __engaged_;
} optional<cva::Matrix<float, 9, 1, false> >;

typedef struct ExponentialSmoother<cva::Matrix<float, 9, 1, false> > {
	optional<cva::Matrix<float, 9, 1, false> > state;
} ExponentialSmoother<cva::Matrix<float, 9, 1, false> >;

typedef struct shared_ptr<arkit::PrecomputedFaceData> {
	PrecomputedFaceData __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<arkit::PrecomputedFaceData>;

typedef struct FacialLightEstimation {
	Matrix<float, 0, 1, false> m_validSampleIntensities;
	vector<int, std::__1::allocator<int> > m_validChromaSampleIDS;
	vector<int, std::__1::allocator<int> > m_sampleIndices_all;
	Matrix<float, 0, 0, false> m_validRtfs;
	shared_ptr<arkit::PrecomputedFaceData> m_precomputedFaceData;
	ExponentialSmoother<cva::Matrix<float, 9, 1, false> > m_smoother;
	vector<unsigned long, std::__1::allocator<unsigned long> > m_inliers;
} FacialLightEstimation;

typedef struct CV3DSurfaceDetectionContext* CV3DSurfaceDetectionContextRef;

typedef struct {
	double m11;
	double m12;
	double m13;
	double m21;
	double m22;
	double m23;
	double m31;
	double m32;
	double m33;
} SCD_Struct_AR94;

typedef const struct CV3DReconKeyframeList* CV3DReconKeyframeListRef;

typedef struct _compressed_pair<short *, std::__1::allocator<short> > {
	short __value_;
} compressed_pair<short *, std::__1::allocator<short> >;

typedef struct vector<short, std::__1::allocator<short> > {
	short __begin_;
	short __end_;
	compressed_pair<short *, std::__1::allocator<short> > __end_cap_;
} vector<short, std::__1::allocator<short> >;

typedef struct __IOSurfaceNotifier* IOSurfaceNotifierRef;

typedef struct __IOSurface* IOSurfaceRef;

typedef struct __CFData* CFDataRef;

typedef struct {
	void plan;
	int network_index;
} SCD_Struct_AR101;

typedef struct {
	float bias_r;
	float bias_g;
	float bias_b;
	float scale;
	BOOL network_wants_bgr;
} SCD_Struct_AR102;

typedef struct vImage_Buffer {
	void data;
	unsigned long long height;
	unsigned long long width;
	unsigned long long rowBytes;
} vImage_Buffer;

typedef struct _compressed_pair<double *, std::__1::allocator<double> > {
	double __value_;
} compressed_pair<double *, std::__1::allocator<double> >;

typedef struct vector<double, std::__1::allocator<double> > {
	double __begin_;
	double __end_;
	compressed_pair<double *, std::__1::allocator<double> > __end_cap_;
} vector<double, std::__1::allocator<double> >;

typedef struct SkeletonJointFilter<float> {
	vector<float, std::__1::allocator<float> > m_values;
	vector<float, std::__1::allocator<float> > m_speed;
	vector<double, std::__1::allocator<double> > m_timestamps;
	float m_smoothing;
	float m_lowest_threshold;
	float m_low_threshold;
	float m_high_threshold;
	float m_highest_threshold;
	float m_temporal_smoothing;
	float m_prediction_factor;
	float m_min_smoothing;
	float m_up_slope;
	float m_down_slope;
	float m_temporal_slope;
} SkeletonJointFilter<float>;

typedef struct array<float, 32> {
	float __elems_[32];
} array<float, 32>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::array<unsigned char, 16>, std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::less<std::__1::array<unsigned char, 16> >, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::array<unsigned char, 16>, std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::less<std::__1::array<unsigned char, 16> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, void *> > >;

typedef struct _tree<std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::__map_value_compare<std::__1::array<unsigned char, 16>, std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::less<std::__1::array<unsigned char, 16> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::array<unsigned char, 16>, std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::less<std::__1::array<unsigned char, 16> >, true> > __pair3_;
} tree<std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::__map_value_compare<std::__1::array<unsigned char, 16>, std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::less<std::__1::array<unsigned char, 16> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane> > >;

typedef struct map<std::__1::array<unsigned char, 16>, ARTexturedPlane, std::__1::less<std::__1::array<unsigned char, 16> >, std::__1::allocator<std::__1::pair<const std::__1::array<unsigned char, 16>, ARTexturedPlane> > > {
	tree<std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::__map_value_compare<std::__1::array<unsigned char, 16>, std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::less<std::__1::array<unsigned char, 16> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane> > > __tree_;
} map<std::__1::array<unsigned char, 16>, ARTexturedPlane, std::__1::less<std::__1::array<unsigned char, 16> >, std::__1::allocator<std::__1::pair<const std::__1::array<unsigned char, 16>, ARTexturedPlane> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> > > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> > >;

typedef struct _compressed_pair<unsigned long, std::__1::less<std::__1::array<unsigned char, 16> > > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::less<std::__1::array<unsigned char, 16> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::array<unsigned char, 16>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::array<unsigned char, 16>, void *> > >;

typedef struct _tree<std::__1::array<unsigned char, 16>, std::__1::less<std::__1::array<unsigned char, 16> >, std::__1::allocator<std::__1::array<unsigned char, 16> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::array<unsigned char, 16>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::less<std::__1::array<unsigned char, 16> > > __pair3_;
} tree<std::__1::array<unsigned char, 16>, std::__1::less<std::__1::array<unsigned char, 16> >, std::__1::allocator<std::__1::array<unsigned char, 16> > >;

typedef struct set<std::__1::array<unsigned char, 16>, std::__1::less<std::__1::array<unsigned char, 16> >, std::__1::allocator<std::__1::array<unsigned char, 16> > > {
	tree<std::__1::array<unsigned char, 16>, std::__1::less<std::__1::array<unsigned char, 16> >, std::__1::allocator<std::__1::array<unsigned char, 16> > > __tree_;
} set<std::__1::array<unsigned char, 16>, std::__1::less<std::__1::array<unsigned char, 16> >, std::__1::allocator<std::__1::array<unsigned char, 16> > >;

typedef struct _compressed_pair<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> **, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> *> > {
	pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> __value_;
} compressed_pair<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> **, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> *> >;

typedef struct _split_buffer<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> *, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> *> > {
	pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> __first_;
	pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> __begin_;
	pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> __end_;
	compressed_pair<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> **, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> *> > __end_cap_;
} split_buffer<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> *, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> *> >;

typedef struct deque<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> > > {
	split_buffer<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> *, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> > > __size_;
} deque<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> > >;

typedef struct queue<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::deque<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> > > > {
	deque<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> > > c;
} queue<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::deque<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> > > >;

typedef struct ARPlaneUpdateQueue {
	queue<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::deque<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> > > > queue;
	set<std::__1::array<unsigned char, 16>, std::__1::less<std::__1::array<unsigned char, 16> >, std::__1::allocator<std::__1::array<unsigned char, 16> > > elements;
} ARPlaneUpdateQueue;

typedef struct _compressed_pair<ARTexturedPlane *, std::__1::allocator<ARTexturedPlane> > {
	ARTexturedPlane __value_;
} compressed_pair<ARTexturedPlane *, std::__1::allocator<ARTexturedPlane> >;

typedef struct vector<ARTexturedPlane, std::__1::allocator<ARTexturedPlane> > {
	ARTexturedPlane __begin_;
	ARTexturedPlane __end_;
	compressed_pair<ARTexturedPlane *, std::__1::allocator<ARTexturedPlane> > __end_cap_;
} vector<ARTexturedPlane, std::__1::allocator<ARTexturedPlane> >;

typedef struct array<float, 2> {
	float __elems_[2];
} array<float, 2>;

typedef struct shared_ptr<arkit::btr::ScaleCorrection> {
	ScaleCorrection __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<arkit::btr::ScaleCorrection>;

typedef struct shared_ptr<arkit::btr::BodyRegistration> {
	BodyRegistration __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<arkit::btr::BodyRegistration>;

typedef struct Matrix<float, 2, 16, false> {
	float m_data[32];
} Matrix<float, 2, 16, false>;

typedef struct Matrix<float, 3, 16, false> {
	float m_data[48];
} Matrix<float, 3, 16, false>;

typedef struct Matrix<float, 3, 3, false> {
	float m_data[9];
} Matrix<float, 3, 3, false>;

typedef struct SE3GroupStorage<float, cva::Matrix<float, 4, 4, false> > {
	float m_data[16];
} SE3GroupStorage<float, cva::Matrix<float, 4, 4, false> >;

typedef struct RegistrationData {
	Matrix<float, 2, 16, false> image_points;
	Matrix<float, 3, 16, false> lifted_points;
	Matrix<float, 3, 3, false> intrinsics;
	SE3GroupStorage<float, cva::Matrix<float, 4, 4, false> > cam_from_obj;
	SE3GroupStorage<float, cva::Matrix<float, 4, 4, false> > cam_from_vio;
	double timestamp_obj;
	double timestamp_vio;
} RegistrationData;

typedef struct array<arkit::btr::RegistrationData, 5> {
	RegistrationData __elems_[5];
} array<arkit::btr::RegistrationData, 5>;

typedef struct _long {
	char* __data_;
	unsigned long long __size_;
	unsigned long long __cap_;
} long;

typedef struct {
	unsigned char __size_;
} SCD_Struct_AR134;

typedef struct _raw {
	unsigned long long __words[3];
} raw;

typedef struct _short {
	char __data_[23];
	SCD_Struct_AR134 ;
} short;

typedef struct _rep {
	/*function pointer*/void* ;
	long __l;
	short __s;
	const aw) __r;
} rep;

typedef struct _compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > {
	const ep __value_;
} compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {
	compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > __r_;
} basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >;

typedef struct locale {
	__imp __locale_;
} locale;

typedef struct basic_filebuf<char, std::__1::char_traits<char> > {
	/*function pointer*/void* _vptr$basic_streambuf;
	locale __loc_;
	char* __binp_;
	char* __ninp_;
	char* __einp_;
	char* __bout_;
	char* __nout_;
	char* __eout_;
	char* __extbuf_;
	char* __extbufnext_;
	char* __extbufend_;
	char __extbuf_min_[8];
	unsigned long long __ebs_;
	char* __intbuf_;
	unsigned long long __ibs_;
	__sFILE __file_;
	codecvt<char, char, __mbstate_t> __cv_;
	/*function pointer*/void* __st_;
	char __mbstate8[128];
	q) _mbstateL;
	/*function pointer*/void* __st_last_;
	char __mbstate8[128];
	q) _mbstateL;
	unsigned __om_;
	unsigned __cm_;
	BOOL __owns_eb_;
	BOOL __owns_ib_;
	BOOL __always_noconv_;
} basic_filebuf<char, std::__1::char_traits<char> >;

typedef struct basic_ofstream<char, std::__1::char_traits<char> > {
	/*function pointer*/void* _vptr$basic_ostream;
	basic_filebuf<char, std::__1::char_traits<char> > __sb_;
	/*function pointer*/void* _vptr$ios_base;
	unsigned __fmtflags_;
	long long __precision_;
	long long __width_;
	unsigned __rdstate_;
	unsigned __exceptions_;
	void __rdbuf_;
	void __loc_;
	/*function pointer*/void* __fn_;
	int __index_;
	unsigned long long __event_size_;
	unsigned long long __event_cap_;
	long long __iarray_;
	unsigned long long __iarray_size_;
	unsigned long long __iarray_cap_;
	void __parray_;
	unsigned long long __parray_size_;
	unsigned long long __parray_cap_;
	basic_ostream<char, std::__1::char_traits<char> > __tie_;
	int __fill_;
} basic_ofstream<char, std::__1::char_traits<char> >;

typedef struct CV3DReconSession* CV3DReconSessionRef;

typedef struct CV3DReconMeshingConfiguration* CV3DReconMeshingConfigurationRef;

typedef struct _compressed_pair<espresso_buffer_t *, std::__1::allocator<espresso_buffer_t> > {
	/*function pointer*/void* __value_;
} compressed_pair<espresso_buffer_t *, std::__1::allocator<espresso_buffer_t> >;

typedef struct vector<espresso_buffer_t, std::__1::allocator<espresso_buffer_t> > {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<espresso_buffer_t *, std::__1::allocator<espresso_buffer_t> > __end_cap_;
} vector<espresso_buffer_t, std::__1::allocator<espresso_buffer_t> >;

typedef struct _compressed_pair<__CVPixelBufferPool **, std::__1::allocator<__CVPixelBufferPool *> > {
	__CVPixelBufferPool __value_;
} compressed_pair<__CVPixelBufferPool **, std::__1::allocator<__CVPixelBufferPool *> >;

typedef struct vector<__CVPixelBufferPool *, std::__1::allocator<__CVPixelBufferPool *> > {
	__CVPixelBufferPool __begin_;
	__CVPixelBufferPool __end_;
	compressed_pair<__CVPixelBufferPool **, std::__1::allocator<__CVPixelBufferPool *> > __end_cap_;
} vector<__CVPixelBufferPool *, std::__1::allocator<__CVPixelBufferPool *> >;

typedef struct _compressed_pair<simd_float4x4 *, std::__1::allocator<simd_float4x4> > {
	/*function pointer*/void* __value_;
} compressed_pair<simd_float4x4 *, std::__1::allocator<simd_float4x4> >;

typedef struct vector<simd_float4x4, std::__1::allocator<simd_float4x4> > {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<simd_float4x4 *, std::__1::allocator<simd_float4x4> > __end_cap_;
} vector<simd_float4x4, std::__1::allocator<simd_float4x4> >;

typedef struct _compressed_pair<ARSRT *, std::__1::allocator<ARSRT> > {
	/*function pointer*/void* __value_;
} compressed_pair<ARSRT *, std::__1::allocator<ARSRT> >;

typedef struct vector<ARSRT, std::__1::allocator<ARSRT> > {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<ARSRT *, std::__1::allocator<ARSRT> > __end_cap_;
} vector<ARSRT, std::__1::allocator<ARSRT> >;

