/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:52:32 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/ARKitCore.framework/ARKitCore
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <ARKitCore/ARKitCore-Structs.h>
#import <ARKitCore/ARMLImageProcessingTechnique.h>
#import <ARKitCore/ARTechniqueBusyState.h>

@class ARImageRotationTechnique, NSString;

@interface ARSemanticSegmentationTechnique : ARMLImageProcessingTechnique <ARTechniqueBusyState> {

	CVPixelBufferPoolRef _outputSegmentationPixelBufferPool;
	CVPixelBufferPoolRef _scaledSegmentationOutputPixelBufferPool;
	CVPixelBufferPoolRef _outputConfidencePixelBufferPool;
	CVPixelBufferPoolRef _scaledConfidencePixelBufferPool;
	CVPixelBufferPoolRef _outputUnceraintyPixelBufferPool;
	CVPixelBufferPoolRef _uncertaintyMaskedSegmentationPixelBufferPool;
	CVPixelBufferPoolRef _scaledUncertaintyPixelBufferPool;
	CVPixelBufferPoolRef _normalsPixelBufferPool;
	CVPixelBufferPoolRef _scaledNormalsPixelBufferPool;
	ARImageRotationTechnique* _normalsRotationTechnique;
	ARImageRotationTechnique* _segmentationRotationTechnique;
	ARImageRotationTechnique* _confidenceUncertaintyRotationTechnique;
	double _lastResultPushTimestamp;
	BOOL _isLegacyModel;
	float* _uncertaintyThresholds;
	float* _probabilityThresholds;
	int _numClasses;
	BOOL _shouldUseSynchronizedUltraWide;
	BOOL _supportsUncertainty;

}

@property (assign,nonatomic) BOOL supportsUncertainty;                         //@synthesize supportsUncertainty=_supportsUncertainty - In the implementation block
@property (assign,nonatomic) BOOL shouldUseSynchronizedUltraWide;              //@synthesize shouldUseSynchronizedUltraWide=_shouldUseSynchronizedUltraWide - In the implementation block
@property (nonatomic,readonly) BOOL isBusy; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(void)createUncertaintyMaskedSegmentationBuffer:(CVBufferRef)arg1 fromSegmentationBuffer:(CVBufferRef)arg2 uncertaintyBuffer:(CVBufferRef)arg3 maskValue:(unsigned char)arg4 ;
-(void)dealloc;
-(id)init;
-(double)requiredTimeInterval;
-(id)resultDataClasses;
-(void)_startLoadingMLModelSignpost;
-(void)_endLoadingMLModelSignpost;
-(void)_startMLProcessingSignpostWithTimestamp:(double)arg1 ;
-(void)_endMLProcessingSignpostWithTimestamp:(double)arg1 ;
-(void)_startMLRunNetworkSignpostWithTimestamp:(double)arg1 ;
-(void)_endMLRunNetworkSignpostWithTimestamp:(double)arg1 ;
-(void)_startMLCreateResultSignpostWithTimestamp:(double)arg1 orientation:(long long)arg2 outputSize:(CGSize)arg3 ;
-(void)_endMLCreateResultSignpostWithTimestamp:(double)arg1 ;
-(void)changeEspressoConfig:(id)arg1 ;
-(id)createResultDataFromTensors:(SCD_Struct_AR21*)arg1 numberOfOutputTensors:(unsigned long long)arg2 imageDataForNeuralNetwork:(id)arg3 inputImageData:(id)arg4 rotationNeeded:(long long)arg5 regionOfInterest:(CGSize)arg6 ;
-(id)initLegacy;
-(id)createSegmentationResultDataFromTensors:(SCD_Struct_AR21*)arg1 inputImageData:(id)arg2 rotationNeeded:(long long)arg3 regionOfInterest:(CGSize)arg4 ;
-(int)bindInputBuffer:(unsigned long long)arg1 withImage:(id)arg2 andOriginalImageData:(id)arg3 rotationOfResultTensor:(long long)arg4 ;
-(void)_captureMLRunNetworkInputImageData:(double)arg1 cameraType:(long long)arg2 imageWidth:(unsigned long long)arg3 imageHeight:(unsigned long long)arg4 ;
-(BOOL)supportsUncertainty;
-(void)createConfidenceBuffer:(CVBufferRef)arg1 fromTensor:(SCD_Struct_AR21*)arg2 inputImageData:(id)arg3 rotationNeeded:(long long)arg4 regionOfInterest:(CGSize)arg5 segmentationBuffer:(CVBufferRef)arg6 ;
-(void)createConfidenceBuffer:(CVBufferRef)arg1 uncertaintyBuffer:(CVBufferRef)arg2 fromLogitsTensor:(SCD_Struct_AR21*)arg3 normalizerTensor:(SCD_Struct_AR21*)arg4 inputImageData:(id)arg5 rotationNeeded:(long long)arg6 regionOfInterest:(CGSize)arg7 segmentationBuffer:(CVBufferRef)arg8 ;
-(BOOL)supportsNormals;
-(void)createSegmentationNormalsBuffer:(CVBufferRef)arg1 fromTensor:(SCD_Struct_AR21*)arg2 inputImageData:(id)arg3 rotationNeeded:(long long)arg4 regionOfInterest:(CGSize)arg5 ;
-(id)_rotateImageData:(id)arg1 withRotationTechnique:(id)arg2 rotationNeeded:(long long)arg3 ;
-(BOOL)shouldUseSynchronizedUltraWide;
-(void)setShouldUseSynchronizedUltraWide:(BOOL)arg1 ;
-(void)setSupportsUncertainty:(BOOL)arg1 ;
@end

