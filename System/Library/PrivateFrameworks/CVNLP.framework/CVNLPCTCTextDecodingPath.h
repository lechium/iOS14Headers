/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:43:52 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/CVNLP.framework/CVNLP
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <CVNLP/CVNLP-Structs.h>
#import <CVNLP/CVNLPTextDecodingPath.h>

@class CVNLPLexiconCursors, CVNLPLanguageResourceBundle, NSString;

@interface CVNLPCTCTextDecodingPath : CVNLPTextDecodingPath {

	vector<unsigned int, std::__1::allocator<unsigned int> >* _tokenString;
	vector<unsigned int, std::__1::allocator<unsigned int> >* _histWordTokenIDs;
	unsigned long long _beginningCurrentWord;
	vector<double, std::__1::allocator<double> >* _cumulativeTokenLogProbabilities;
	vector<double, std::__1::allocator<double> >* _tokenBoundaryLogProbabilities;
	vector<unsigned long, std::__1::allocator<unsigned long> >* _tokenStringSegmentationPositions;
	vector<unsigned long, std::__1::allocator<unsigned long> >* _tokenMaxActivations;
	vector<unsigned long, std::__1::allocator<unsigned long> >* _tokenCommitCharacterLengths;
	BOOL _hasContext;
	BOOL _optimizingAlignment;
	double _blankLogProbability;
	double _nonBlankLogProbability;
	double _historyLexiconLogProbability;
	double _activeWordLexiconLogProbability;
	double _languageResourceLogProbability;
	CVNLPLexiconCursors* _cursors;
	CVNLPLanguageModelWithStateRef _characterLMState;
	CVNLPLanguageResourceBundle* _languageResourceBundle;
	NSString* _latestExpandedSymbol;
	/*^block*/id _scoringFunction;

}

@property (assign) double blankLogProbability;                                                           //@synthesize blankLogProbability=_blankLogProbability - In the implementation block
@property (assign) double nonBlankLogProbability;                                                        //@synthesize nonBlankLogProbability=_nonBlankLogProbability - In the implementation block
@property (assign) double historyLexiconLogProbability;                                                  //@synthesize historyLexiconLogProbability=_historyLexiconLogProbability - In the implementation block
@property (assign) double activeWordLexiconLogProbability;                                               //@synthesize activeWordLexiconLogProbability=_activeWordLexiconLogProbability - In the implementation block
@property (readonly) double normalizedActivationLogProbability; 
@property (readonly) double languageResourceLogProbability;                                              //@synthesize languageResourceLogProbability=_languageResourceLogProbability - In the implementation block
@property (readonly) double normalizedTotalLogProbability; 
@property (assign) double lastTokenBoundaryLogProbability; 
@property (readonly) BOOL optimizingAlignment;                                                           //@synthesize optimizingAlignment=_optimizingAlignment - In the implementation block
@property (nonatomic,retain) CVNLPLexiconCursors * cursors;                                              //@synthesize cursors=_cursors - In the implementation block
@property (assign,nonatomic) CVNLPLanguageModelWithStateRef characterLMState;                            //@synthesize characterLMState=_characterLMState - In the implementation block
@property (nonatomic,retain,readonly) CVNLPLanguageResourceBundle * languageResourceBundle;              //@synthesize languageResourceBundle=_languageResourceBundle - In the implementation block
@property (nonatomic,readonly) NSString * latestExpandedSymbol;                                          //@synthesize latestExpandedSymbol=_latestExpandedSymbol - In the implementation block
@property (nonatomic,readonly) id scoringFunction;                                                       //@synthesize scoringFunction=_scoringFunction - In the implementation block
+(id)_getQueue;
+(void)_applyWordLanguageModelProbabilityToPath:(id)arg1 stemmedFromPath:(id)arg2 isCommittingToken:(BOOL)arg3 ;
-(long long)characterCount;
-(void)setString:(id)arg1 ;
-(CVNLPLexiconCursors *)cursors;
-(id)debugDescription;
-(void)dealloc;
-(long long)compare:(id)arg1 ;
-(void)setCursors:(CVNLPLexiconCursors *)arg1 ;
-(id)description;
-(void)setCharacterCount:(long long)arg1 ;
-(id)scoringFunction;
-(CVNLPLanguageResourceBundle *)languageResourceBundle;
-(double)modelLogProbability;
-(unsigned long long)_currentTokenStringLength;
-(double)lastTokenBoundaryLogProbability;
-(void)updateLastTokenWithMaxActivation:(long long)arg1 totalLogProbability:(double)arg2 tokenBoundaryLogProbability:(double)arg3 ;
-(void)commitTokenAtTimestep:(long long)arg1 currentSymbolLogProbability:(double)arg2 commitAction:(long long)arg3 string:(id)arg4 stemmingFromPath:(id)arg5 ;
-(double)scoreForTokenIndex:(long long)arg1 ;
-(double)normalizedTotalLogProbability;
-(double)blankLogProbability;
-(double)nonBlankLogProbability;
-(double)historyLexiconLogProbability;
-(double)activeWordLexiconLogProbability;
-(void)setLastTokenBoundaryLogProbability:(double)arg1 ;
-(id)initWithLanguageResourceBundle:(id)arg1 scoringFunction:(/*^block*/id)arg2 initialCharacterLMState:(CVNLPLanguageModelWithStateRef)arg3 characterTokenIDs:(vector<unsigned int, std::__1::allocator<unsigned int> >*)arg4 wordTokenIDs:(vector<unsigned int, std::__1::allocator<unsigned int> >*)arg5 optimizingAlignment:(BOOL)arg6 hasContext:(BOOL)arg7 ;
-(void)setBlankLogProbability:(double)arg1 ;
-(void)setCharacterLanguageModelLogProbability:(double)arg1 ;
-(void)setHistoryLexiconLogProbability:(double)arg1 ;
-(void)setActiveWordLexiconLogProbability:(double)arg1 ;
-(void)setWordLanguageModelLogProbability:(double)arg1 ;
-(void)setPseudoSpaceCount:(long long)arg1 ;
-(void)_updateCharacterLanguageModelLogProbabilityForString:(id)arg1 stemmingFromPath:(id)arg2 normalizedCodepoint:(unsigned)arg3 ;
-(void)_updateLexiconLogProbabilityForString:(id)arg1 stemmingFromPath:(id)arg2 ;
-(float)_wordLanguageModelLogProbabilityForString:(id)arg1 originalWordRanges:(id)arg2 originalWordIDs:(vector<unsigned int, std::__1::allocator<unsigned int> >*)arg3 wordRanges:(id)arg4 wordIDs:(vector<unsigned int, std::__1::allocator<unsigned int> >*)arg5 ;
-(void)setCharacterLMState:(CVNLPLanguageModelWithStateRef)arg1 ;
-(long long)pseudoSpaceCount;
-(long long)tokenCount;
-(double)lexiconScore;
-(double)normalizedActivationLogProbability;
-(id)tokensWithTimestep:(long long)arg1 isFinalTimestep:(BOOL)arg2 ;
-(void)merge:(id)arg1 logProbCumulator:(/*^block*/id)arg2 ;
-(id)childPathWithBlankLogProb:(double)arg1 ;
-(id)pathByExtendingWithString:(id)arg1 extendedPathString:(id)arg2 blankLogProb:(double)arg3 nonBlankLogProb:(double)arg4 timestep:(long long)arg5 commitAction:(long long)arg6 symbolLogProb:(double)arg7 ;
-(void)setNonBlankLogProbability:(double)arg1 ;
-(double)languageResourceLogProbability;
-(BOOL)optimizingAlignment;
-(CVNLPLanguageModelWithStateRef)characterLMState;
-(NSString *)latestExpandedSymbol;
@end

