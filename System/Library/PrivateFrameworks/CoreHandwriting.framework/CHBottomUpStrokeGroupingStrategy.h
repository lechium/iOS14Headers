/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:52:43 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/CoreHandwriting.framework/CoreHandwriting
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <CoreHandwriting/CoreHandwriting-Structs.h>
#import <CoreHandwriting/CHStrokeGroupingStrategy.h>

@class NSString, NSArray;

@interface CHBottomUpStrokeGroupingStrategy : CHStrokeGroupingStrategy {

	CGVector _defaultOrientationVector;
	CGVector _defaultDeviationVector;
	NSString* _strategyIdentifier;
	double _strokeDeviationCapCoeff;
	double _groupingMergingCostThresh;
	double _groupingMergingEndCostLowThresh;
	double _groupingSimilarCostThresh;
	long long _groupingContextSize;
	double _mergeEndDxCostCoeff;
	double _mergeEndDyCostCoeff;
	double _mergeEndBelowModifier;
	double _mergeEndLeftModifier;
	double _mergeMiddleDxCostCoeff;
	double _mergeMiddleDyCostCoeff;
	double _mergeMiddleBelowModifier;
	BOOL _shouldLimitDefaultWritingOrientationDeviation;
	BOOL _shouldAdjustDeviationOfSmallGroups;
	BOOL _shouldCoalesceLastSubstrokes;
	BOOL _isInlineContinuousMode;
	NSArray* _textInputTargets;

}

@property (nonatomic,readonly) BOOL isInlineContinuousMode;                    //@synthesize isInlineContinuousMode=_isInlineContinuousMode - In the implementation block
@property (nonatomic,retain,readonly) NSArray * textInputTargets;              //@synthesize textInputTargets=_textInputTargets - In the implementation block
+(vector<CGRect, std::__1::allocator<CGRect> >*)_boundingBoxesOfStrokesInGroup:(id)arg1 rotatedAroundPoint:(CGPoint)arg2 byAngle:(double)arg3 ;
-(void)dealloc;
-(NSArray *)textInputTargets;
-(id)strategyIdentifier;
-(id)updatedGroupingResult:(id)arg1 byAddingStrokes:(id)arg2 removingStrokeIdentifiers:(id)arg3 stableStrokeIdentifiers:(id)arg4 allSubstrokesByStrokeIdentifier:(id)arg5 withCancellationBlock:(/*^block*/id)arg6 ;
-(id)recognizableDrawingForStrokeGroup:(id)arg1 translationVector:(CGVector)arg2 originalDrawing:(id*)arg3 orderedStrokesIDs:(id*)arg4 rescalingFactor:(double*)arg5 ;
-(id)initWithStrokeProvider:(id)arg1 defaultWritingOrientation:(long long)arg2 locales:(id)arg3 isInlineContinuousMode:(BOOL)arg4 inlineContinuousModeTargets:(id)arg5 ;
-(BOOL)isInlineContinuousMode;
-(void)_updateGroups:(id)arg1 createdGroups:(id)arg2 deletedGroups:(id)arg3 forAddedStroke:(id)arg4 substrokePlacementsByStrokeIdentifier:(id)arg5 reusableIDRemovedGroups:(id)arg6 trySplit:(BOOL)arg7 cancellationBlock:(/*^block*/id)arg8 ;
-(void)mergeGroupsPostProcessing:(id)arg1 createdGroups:(id)arg2 deletedGroups:(id)arg3 ;
-(void)_applyDefaultGroupingParameters;
-(void)_applyStrictGroupingParameters;
-(void)_getMergingLowerBoundCost:(double*)arg1 withStrokeBounds:(CGRect)arg2 toLineGroup:(id)arg3 ;
-(void)getMergingEndOfLineCost:(double*)arg1 mergingEndOfLineStroke:(id*)arg2 forStroke:(id)arg3 consistingOfSubstrokes:(id)arg4 toLineGroup:(id)arg5 ;
-(long long)compareDistanceInWritingSequenceOfStroke:(id)arg1 andStroke:(id)arg2 toReferenceStroke:(id)arg3 ;
-(void)getMergingMiddleOfLineCost:(double*)arg1 mergingMiddleOfLineStroke:(id*)arg2 forStroke:(id)arg3 consistingOfSubstrokes:(id)arg4 toLineGroup:(id)arg5 ;
-(id)_textLineStrokeGroupByAddingStroke:(id)arg1 withSubstrokePlacements:(id)arg2 intoStrokeGroup:(id)arg3 mergingEndSubgroup:(BOOL)arg4 bestStrokeMergeEnd:(id)arg5 ;
-(id)tryRegroupingStrokesInGroup:(id)arg1 substrokePlacementsByStrokeIdentifier:(id)arg2 cancellationBlock:(/*^block*/id)arg3 ;
-(id)_newTextLineStrokeGroupWithStroke:(id)arg1 withSubstrokePlacements:(id)arg2 reusableIDRemovedGroups:(id)arg3 ;
-(void)estimateWritingDirectionAndSortSubstrokesAccordingly:(id*)arg1 averageWritingOrientation:(CGVector*)arg2 averageStrokeDeviation:(CGVector*)arg3 ;
-(id)_writingDirectionSortedStrokeIdentifiersFromSubstrokes:(id)arg1 localWritingOrientations:(vector<CGVector, std::__1::allocator<CGVector> >*)arg2 ;
-(id)_lastSubstrokeCoalescedWithOverlappingSubstrokes:(id)arg1 strokeDeviation:(CGVector)arg2 ;
-(double)_strokeGroupConfidenceForSortedSubstrokes:(id)arg1 writingDirectionSortedStrokeIdentifiers:(id)arg2 localStrokeWritingOrientations:(const vector<CGVector, std::__1::allocator<CGVector> >*)arg3 averageWritingOrientation:(CGVector)arg4 averageStrokeDeviation:(CGVector)arg5 ;
-(CGRect)_normalizedBoundsForWritingDirectionSortedStrokes:(id)arg1 strokeWritingOrientations:(const vector<CGVector, std::__1::allocator<CGVector> >*)arg2 firstStrokeDeviation:(CGVector)arg3 originalDrawing:(id*)arg4 rotatedSortedStrokes:(vector<std::__1::vector<CGPoint, std::__1::allocator<CGPoint> >, std::__1::allocator<std::__1::vector<CGPoint, std::__1::allocator<CGPoint> > > >*)arg5 ;
-(double)_scaleFactorForBoundsHeight:(double)arg1 ;
-(void)_getMergingEndOfLineCost:(double*)arg1 mergingEndOfLineStroke:(id*)arg2 forStroke:(id)arg3 consistingOfSubstrokes:(id)arg4 toLineGroup:(id)arg5 refSubstrokeIndex:(long long)arg6 ;
-(CGVector)clippedWritingOrientation:(CGVector)arg1 ;
-(CGVector)_averageVectorFromCoalescedSubstrokes:(id)arg1 toSubstroke:(id)arg2 withOrientation:(CGVector)arg3 strokeRef:(id)arg4 strokeDest:(id)arg5 ;
-(void)updateLocalWritingOrientationsForSubstrokes:(id)arg1 useCoalescedCenter:(BOOL)arg2 ;
-(void)sortSubstrokesByWritingDirection:(id)arg1 averageWritingOrientation:(CGVector*)arg2 ;
-(void)refineLocalWritingOrientationsForSubstrokes:(id)arg1 useCoalescedCenter:(BOOL)arg2 ;
-(BOOL)refineWritingOrientationAndResortSubstrokes:(id)arg1 averageWritingOrientation:(CGVector*)arg2 ;
-(void)updateLocalStrokeDeviationsForSubstrokes:(id)arg1 averageStrokeDeviation:(CGVector*)arg2 ;
-(void)smoothLocalWritingOrientations:(vector<CGVector, std::__1::allocator<CGVector> >*)arg1 ;
-(vector<CGPoint, std::__1::allocator<CGPoint> >*)flippedCenters:(const vector<CGPoint, std::__1::allocator<CGPoint> >*)arg1 ofSubstrokes:(id)arg2 maxStrokesGap:(long long)arg3 begnning:(BOOL)arg4 ;
-(id)_averageAngleAndReliabilityForStrokeGroup:(id)arg1 ;
-(double)_verticalOffsetForBoundsHeight:(double)arg1 andScaleFactor:(double)arg2 ;
@end

