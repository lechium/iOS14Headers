/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:41:56 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/VideoProcessing.framework/VideoProcessing
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSMutableArray, <MTLDevice>;

typedef struct SMPTETime {
	short mSubframes;
	short mSubframeDivisor;
	unsigned mCounter;
	unsigned mType;
	unsigned mFlags;
	short mHours;
	short mMinutes;
	short mSeconds;
	short mFrames;
} SMPTETime;

typedef struct AudioTimeStamp {
	double mSampleTime;
	unsigned long long mHostTime;
	double mRateScalar;
	unsigned long long mWordClockTime;
	SMPTETime mSMPTETime;
	unsigned mFlags;
	unsigned mReserved;
} AudioTimeStamp;

typedef struct AudioBuffer {
	unsigned mNumberChannels;
	unsigned mDataByteSize;
	void mData;
} AudioBuffer;

typedef struct AudioBufferList {
	unsigned mNumberBuffers;
	AudioBuffer mBuffers[1];
} AudioBufferList;

typedef struct {
	long long field1;
	int field2;
	unsigned field3;
	long long field4;
} SCD_Struct_VC4;

typedef struct opaqueCMSampleBuffer* opaqueCMSampleBufferRef;

typedef struct {
	long long value;
	int timescale;
	unsigned flags;
	long long epoch;
} SCD_Struct_VC6;

typedef struct {
	SCD_Struct_VC6 start;
	SCD_Struct_VC6 duration;
} SCD_Struct_VC7;

typedef struct __CVBuffer* CVBufferRef;

typedef struct _NSZone* NSZoneRef;

typedef struct {
	unsigned contentScore : 1;
	unsigned globalQualityScore : 1;
} SCD_Struct_VC10;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct {
	void plan;
	int network_index;
} SCD_Struct_VC12;

typedef struct _compressed_pair<espresso_buffer_t *, std::__1::allocator<espresso_buffer_t> > {
	/*function pointer*/void* __value_;
} compressed_pair<espresso_buffer_t *, std::__1::allocator<espresso_buffer_t> >;

typedef struct vector<espresso_buffer_t, std::__1::allocator<espresso_buffer_t> > {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<espresso_buffer_t *, std::__1::allocator<espresso_buffer_t> > __end_cap_;
} vector<espresso_buffer_t, std::__1::allocator<espresso_buffer_t> >;

typedef struct {
	void data;
	void reserved;
	unsigned long long dim[4];
	unsigned long long stride[4];
	unsigned long long width;
	unsigned long long height;
	unsigned long long channels;
	unsigned long long batch_number;
	unsigned long long sequence_length;
	unsigned long long stride_width;
	unsigned long long stride_height;
	unsigned long long stride_channels;
	unsigned long long stride_batch_number;
	unsigned long long stride_sequence_length;
	int storage_type;
} SCD_Struct_VC15;

typedef struct _cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > {
	AB __a_value;
} cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> >;

typedef struct atomic<bool> {
	cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > __a_;
} atomic<bool>;

typedef struct CF<opaqueCMSampleBuffer *> {
	opaqueCMSampleBuffer value_;
} CF<opaqueCMSampleBuffer *>;

typedef struct sqlite3* sqlite3Ref;

typedef struct sqlite3_stmt* sqlite3_stmtRef;

typedef struct CGPoint {
	double x;
	double y;
} CGPoint;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct DSPSplitComplex {
	float realp;
	float imagp;
} DSPSplitComplex;

typedef struct mach_timebase_info {
	unsigned numer;
	unsigned denom;
} mach_timebase_info;

typedef struct Translation {
	float x_;
	float y_;
	float z_;
} Translation;

typedef struct Histogram {
	float extremities_;
	float overexposes_;
	int histogram_[3];
	int moments_hist_[2];
} Histogram;

typedef struct Vector<ma::Object *> {
	__CFArray vector_;
} Vector<ma::Object *>;

typedef struct MotionResult {
	float significant_values_[6];
	float confidence_[6];
	float fine_action_score_;
	float action_score_;
	float track_score_;
	float rotation_angle_;
	float subtle_motion_score_;
	BOOL is_stable_;
	int action_blocks_;
	float action_motion_;
	BOOL valid_mb_;
	BOOL valid_submb_;
	int support_size_;
	float residual_var_;
	float gmv_[2];
	SCD_Struct_VC6 duration_;
	float scene_delta_;
	float scene_delta_ratio_;
	Vector<ma::Object *> objects_;
	Vector<ma::Object *> detect_objects_;
	Vector<ma::Object *> imported_objects_;
} MotionResult;

typedef struct Frame {
	int frame_idx_;
	SCD_Struct_VC6 timestamp_;
	SCD_Struct_VC6 duration_;
	Translation ave_motion_;
	Translation org_motion_;
	float quality_score_;
	unsigned long long distortion_;
	float distortion_norm_;
	Translation motion_change_;
	unsigned compressed_bytes_;
	BOOL blur_;
	Translation acc_var_;
	float texture_;
	MotionResult motion_result_;
	float interestingness_;
	float obstruction_;
	float colorfulness_score_;
	Histogram histogram_;
} Frame;

typedef struct FrameBuffer {
	int frame_count_;
	Frame buffer_[35];
} FrameBuffer;

typedef struct __CFArray* CFArrayRef;

typedef struct CGColorSpace* CGColorSpaceRef;

typedef struct CGContext* CGContextRef;

typedef struct __CVPixelBufferPool* CVPixelBufferPoolRef;

typedef struct OpaqueVTPixelTransferSession* OpaqueVTPixelTransferSessionRef;

typedef struct CGImage* CGImageRef;

typedef struct FigPhotoDecompressionSession* FigPhotoDecompressionSessionRef;

typedef struct CGImageSource* CGImageSourceRef;

typedef struct _compressed_pair<float **, std::__1::allocator<float *> > {
	float __value_;
} compressed_pair<float **, std::__1::allocator<float *> >;

typedef struct vector<float *, std::__1::allocator<float *> > {
	float __begin_;
	float __end_;
	compressed_pair<float **, std::__1::allocator<float *> > __end_cap_;
} vector<float *, std::__1::allocator<float *> >;

typedef struct CF<__CVPixelBufferPool *> {
	__CVPixelBufferPool value_;
} CF<__CVPixelBufferPool *>;

typedef struct CF<OpaqueVTPixelTransferSession *> {
	OpaqueVTPixelTransferSession value_;
} CF<OpaqueVTPixelTransferSession *>;

typedef struct CF<__CVBuffer *> {
	__CVBuffer value_;
} CF<__CVBuffer *>;

typedef struct CGAffineTransform {
	double a;
	double b;
	double c;
	double d;
	double tx;
	double ty;
} CGAffineTransform;

typedef struct {
	[4 columns];
} SCD_Struct_VC45;

typedef struct {
	float x;
	float y;
	int index;
} SCD_Struct_VC46;

typedef struct Scaler {
	__CVPixelBufferPool pool_;
	int width_;
	int height_;
	CGRect crop_rect_;
	__IOSurfaceAccelerator hw_scaler_;
	OpaqueVTPixelTransferSession sw_scaler_;
} Scaler;

typedef struct _compressed_pair<__CVBuffer **, std::__1::allocator<__CVBuffer *> > {
	__CVBuffer __value_;
} compressed_pair<__CVBuffer **, std::__1::allocator<__CVBuffer *> >;

typedef struct vector<__CVBuffer *, std::__1::allocator<__CVBuffer *> > {
	__CVBuffer __begin_;
	__CVBuffer __end_;
	compressed_pair<__CVBuffer **, std::__1::allocator<__CVBuffer *> > __end_cap_;
} vector<__CVBuffer *, std::__1::allocator<__CVBuffer *> >;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct {
	unsigned quality : 1;
	unsigned statsFlags : 1;
	unsigned typesWide : 1;
} SCD_Struct_VC51;

typedef struct {
	unsigned faceSharpness : 1;
} SCD_Struct_VC52;

typedef struct _compressed_pair<double *, std::__1::allocator<double> > {
	double __value_;
} compressed_pair<double *, std::__1::allocator<double> >;

typedef struct vector<double, std::__1::allocator<double> > {
	double __begin_;
	double __end_;
	compressed_pair<double *, std::__1::allocator<double> > __end_cap_;
} vector<double, std::__1::allocator<double> >;

typedef struct _compressed_pair<float *, std::__1::allocator<float> > {
	float __value_;
} compressed_pair<float *, std::__1::allocator<float> >;

typedef struct vector<float, std::__1::allocator<float> > {
	float __begin_;
	float __end_;
	compressed_pair<float *, std::__1::allocator<float> > __end_cap_;
} vector<float, std::__1::allocator<float> >;

typedef struct {
	float list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_VC57;

typedef struct CF<const opaqueCMFormatDescription *> {
	opaqueCMFormatDescription value_;
} CF<const opaqueCMFormatDescription *>;

typedef struct {
	long long list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_VC59;

typedef struct _cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> > {
	Ai __a_value;
} cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >;

typedef struct atomic<int> {
	cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> > __a_;
} atomic<int>;

typedef struct opaqueCMFormatDescription* opaqueCMFormatDescriptionRef;

typedef struct Matrix<float, 12, 1, false> {
	float m_data[12];
} Matrix<float, 12, 1, false>;

typedef struct Matrix<float, 12, 12, false> {
	float m_data[144];
} Matrix<float, 12, 12, false>;

typedef struct CGVector {
	double dx;
	double dy;
} CGVector;

typedef struct __CFData* CFDataRef;

typedef struct HinkleyStats {
	float upper_;
	float lower_;
	float max_;
	float min_;
} HinkleyStats;

typedef struct HinkleyDetector {
	float sensitivity_;
	float threshold_;
	int min_length_;
	HinkleyStats stats_;
} HinkleyDetector;

typedef struct {
	int field1;
	int field2;
} SCD_Struct_VC69;

typedef struct AudioStreamBasicDescription {
	double mSampleRate;
	unsigned mFormatID;
	unsigned mFormatFlags;
	unsigned mBytesPerPacket;
	unsigned mFramesPerPacket;
	unsigned mBytesPerFrame;
	unsigned mChannelsPerFrame;
	unsigned mBitsPerChannel;
	unsigned mReserved;
} AudioStreamBasicDescription;

typedef struct OpaqueAudioComponentInstance* OpaqueAudioComponentInstanceRef;

typedef struct {
	/*function pointer*/void* field1;
	/*function pointer*/void* field2;
	/*function pointer*/void* field3;
	tplTracker_resampler_context field4;
	/*function pointer*/void* field5;
} SCD_Struct_VC72;

typedef struct CF<__CVMetalTextureCache *> {
	__CVMetalTextureCache value_;
} CF<__CVMetalTextureCache *>;

typedef struct MetalBufferPool {
	NSMutableArray* pool_;
	<MTLDevice>* device_;
	unsigned long long allocSize_;
	unsigned long long storageMode_;
} MetalBufferPool;

typedef struct {
	unsigned long long field1;
	unsigned long long field2;
	unsigned long long field3;
} SCD_Struct_VC75;

typedef struct {
	SCD_Struct_VC7 field1;
	5 field2;
	SCD_Struct_VC7 field3;
	5 field4;
} SCD_Struct_VC76;

typedef struct __CFDictionary* CFDictionaryRef;

