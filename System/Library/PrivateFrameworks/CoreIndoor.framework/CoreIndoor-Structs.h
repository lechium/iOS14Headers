/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:54:17 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/CoreIndoor.framework/CoreIndoor
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct aligned_storage<std::__1::chrono::time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > > {
	dummy_u dummy_;
	char data[8];
	a8) aligner_;
} aligned_storage<std::__1::chrono::time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > >;

typedef struct optional<std::__1::chrono::time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > > {
	BOOL m_initialized;
	aligned_storage<std::__1::chrono::time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > > m_storage;
} optional<std::__1::chrono::time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > >;

typedef struct duration<long double, std::__1::ratio<1, 1> > {
	D __rep_;
} duration<long double, std::__1::ratio<1, 1> >;

typedef struct duration<long long, std::__1::ratio<1, 1000000000> > {
	long long __rep_;
} duration<long long, std::__1::ratio<1, 1000000000> >;

typedef struct duration<long long, std::__1::ratio<1, 1> > {
	long long __rep_;
} duration<long long, std::__1::ratio<1, 1> >;

typedef struct aligned_storage<unsigned int> {
	dummy_u dummy_;
	char data[4];
	a4) aligner_;
} aligned_storage<unsigned int>;

typedef struct optional<unsigned int> {
	BOOL m_initialized;
	aligned_storage<unsigned int> m_storage;
} optional<unsigned int>;

typedef struct aligned_storage<double> {
	dummy_u dummy_;
	char data[8];
	a8) aligner_;
} aligned_storage<double>;

typedef struct optional<double> {
	BOOL m_initialized;
	aligned_storage<double> m_storage;
} optional<double>;

typedef struct aligned_storage<unsigned long> {
	dummy_u dummy_;
	char data[8];
	a8) aligner_;
} aligned_storage<unsigned long>;

typedef struct optional<unsigned long> {
	BOOL m_initialized;
	aligned_storage<unsigned long> m_storage;
} optional<unsigned long>;

typedef struct optional<unsigned int>Baligned_storage<unsigned int>(dummy_u[4c]a4)* ptional<unsigned int>Ref;

typedef struct optional<double>Baligned_storage<double>(dummy_u[8c]a8)* ptional<double>Ref;

typedef struct optional<unsigned long>Baligned_storage<unsigned long>(dummy_u[8c]a8)* ptional<unsigned long>Ref;

typedef struct aligned_storage<proto::params::LocalizerParameters> {
	dummy_u dummy_;
	char data[280];
	a8) aligner_;
} aligned_storage<proto::params::LocalizerParameters>;

typedef struct optional<proto::params::LocalizerParameters> {
	BOOL m_initialized;
	aligned_storage<proto::params::LocalizerParameters> m_storage;
} optional<proto::params::LocalizerParameters>;

typedef struct optional<proto::params::LocalizerParameters>Baligned_storage<proto::params::LocalizerParameters>(dummy_u[280c]a8)* ptional<proto::params::LocalizerParameters>Ref;

typedef struct shared_ptr<AvailabilityTile> {
	AvailabilityTile __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<AvailabilityTile>;

typedef struct _compressed_pair<boost::geometry::model::polygon<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, std::vector, std::vector, std::allocator, std::allocator> *, std::__1::default_delete<boost::geometry::model::polygon<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, std::vector, std::vector, std::allocator, std::allocator> > > {
	polygon<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, std::vector, std::vector, std::allocator, std::allocator> __value_;
} compressed_pair<boost::geometry::model::polygon<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, std::vector, std::vector, std::allocator, std::allocator> *, std::__1::default_delete<boost::geometry::model::polygon<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, std::vector, std::vector, std::allocator, std::allocator> > >;

typedef struct unique_ptr<boost::geometry::model::polygon<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, std::vector, std::vector, std::allocator, std::allocator>, std::__1::default_delete<boost::geometry::model::polygon<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, std::vector, std::vector, std::allocator, std::allocator> > > {
	compressed_pair<boost::geometry::model::polygon<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, std::vector, std::vector, std::allocator, std::allocator> *, std::__1::default_delete<boost::geometry::model::polygon<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, std::vector, std::vector, std::allocator, std::allocator> > > __ptr_;
} unique_ptr<boost::geometry::model::polygon<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, std::vector, std::vector, std::allocator, std::allocator>, std::__1::default_delete<boost::geometry::model::polygon<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, std::vector, std::vector, std::allocator, std::allocator> > >;

typedef struct _compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > > {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > __value_;
} compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >;

typedef struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > __begin_;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > __end_;
	compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > > __end_cap_;
} vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >;

typedef struct _compressed_pair<unsigned long, std::__1::less<unsigned long> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::less<unsigned long> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > >;

typedef struct _tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::less<unsigned long> > __pair3_;
} tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >;

typedef struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > {
	tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > __tree_;
} set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >;

typedef struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > {
	duration<long long, std::__1::ratio<1, 1000000000> > __d_;
} time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > >;

typedef struct {
	double latitude;
	double longitude;
} SCD_Struct_CL28;

typedef struct {
	int suitability;
	SCD_Struct_CL28 coordinate;
	double horizontalAccuracy;
	double altitude;
	double verticalAccuracy;
	double speed;
	double speedAccuracy;
	double course;
	double courseAccuracy;
	double timestamp;
	int confidence;
	double lifespan;
	int type;
	SCD_Struct_CL28 rawCoordinate;
	double rawCourse;
	int floor;
	unsigned integrity;
	int referenceFrame;
	int rawReferenceFrame;
	int signalEnvironmentType;
} SCD_Struct_CL29;

typedef struct {
	double rawUnmodifiedCourse;
	double rawUnmodifiedCourseUnc;
	BOOL isStatic;
	BOOL isMounted;
} SCD_Struct_CL30;

typedef struct {
	double odometer;
	double deltaDistance;
	double deltaDistanceAccuracy;
	double timestampGps;
	double machtime;
	float horzUncSemiMaj;
	float horzUncSemiMin;
	float horzUncSemiMajAz;
	BOOL isFitnessMatch;
	int matchQuality;
	SCD_Struct_CL28 matchCoordinate;
	double matchCourse;
	int matchFormOfWay;
	int matchRoadClass;
	BOOL matchShifted;
	SCD_Struct_CL30 mapMatcherData;
	SCD_Struct_CL28 pressure;
	int undulationModel;
	float undulation;
	SCD_Struct_CL28 specialCoordinate;
	double specialHorizontalAccuracy;
	double machContinuousTime;
	int originDevice;
	BOOL isMatcherPropagatedCoordinates;
	double slope;
	double maxAbsSlope;
	double groundAltitude;
	double groundAltitudeUncertainty;
	double rawHorizontalAccuracy;
	double rawCourseAccuracy;
	BOOL isCoordinateFused;
	SCD_Struct_CL28 fusedCoordinate;
	double fusedHorizontalAccuracy;
	int fusedReferenceFrame;
	double fusedCourse;
	double fusedCourseAccuracy;
} SCD_Struct_CL31;

typedef struct {
	int field1;
	SCD_Struct_CL28 field2;
	double field3;
	double field4;
	double field5;
	double field6;
	double field7;
	double field8;
	double field9;
	double field10;
	int field11;
	double field12;
	int field13;
	SCD_Struct_CL28 field14;
	double field15;
	int field16;
	unsigned field17;
	int field18;
	int field19;
	int field20;
} SCD_Struct_CL32;

typedef struct {
	double field1;
	double field2;
	double field3;
	double field4;
	double field5;
	float field6;
	float field7;
	float field8;
	BOOL field9;
	int field10;
	SCD_Struct_CL28 field11;
	double field12;
	int field13;
	int field14;
	BOOL field15;
	SCD_Struct_CL28 field16;
	SCD_Struct_CL28 field17;
	int field18;
	float field19;
	SCD_Struct_CL28 field20;
	double field21;
	double field22;
	int field23;
	BOOL field24;
	double field25;
	double field26;
	double field27;
	double field28;
	double field29;
	double field30;
	BOOL field31;
	SCD_Struct_CL30 field32;
	double field33;
	int field34;
	double field35;
	double field36;
} SCD_Struct_CL33;

typedef struct {
	int yieldType;
	double prbPipelinedSaysYield;
	double prbCoarseIndoorSaysIndoor;
	double prbWifiSaysIndoor;
	double prbGpsSaysIndoor;
	double prbParticleFilterSaysYield;
	double prbOnFloors;
	double prbOnFloor[5];
	double prbInlier;
	double prbLocalizerIoWrapperSaysWifiOk;
	double prbInjectionOccupancyRetryLimitOk;
	double prbInjectionGainRetryLimitOk;
	int pfYieldStatusBeforeCalculatePose;
	int yieldStatusBeforeCalculatePose;
} SCD_Struct_CL34;

