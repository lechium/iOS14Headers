/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:42:00 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/AXMediaUtilities.framework/AXMediaUtilities
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <AXMediaUtilities/AXMediaUtilities-Structs.h>
@class AXMADSREnvelope, AXMLiveContinuousTone, NSTimer, AXMAudioDataSourceMixer, AXMAudioDataSource, NSPointerArray;

@interface AXMDataSonifier : NSObject {

	OpaqueAudioComponentInstanceRef _audioUnit;
	SCD_Struct_AX5* _xData;
	SCD_Struct_AX5* _yData;
	BOOL _usesBinauralPanning;
	BOOL _playing;
	BOOL _paused;
	BOOL _scrubbing;
	BOOL _isEndingScrubbing;
	BOOL _isInLiveContinuousToneSession;
	int _dataMode;
	int _interpolationMode;
	double _minimumPlaybackFrequency;
	double _maximumPlaybackFrequency;
	double _playbackDuration;
	AXMADSREnvelope* _ampEnvelope;
	unsigned long long _toneWaveform;
	/*^block*/id _function;
	AXMLiveContinuousTone* _continuousScrubbingTone;
	NSTimer* _playbackObserverUpdateTimer;
	AXMAudioDataSourceMixer* _playbackMixerDataSource;
	AXMAudioDataSource* _playbackChartDataAudioDataSource;
	AXMAudioDataSource* _playbackTrendlineAudioDataSource;
	AXMAudioDataSourceMixer* _scrubbingMixerDataSource;
	AXMAudioDataSource* _scrubbingDiscreteAudioDataSource;
	AXMAudioDataSource* _scrubbingContinuousAudioDataSource;
	AXMAudioDataSource* _scrubbingTrendlineAudioDataSource;
	AXMAudioDataSourceMixer* _liveContinuousMixerDataSource;
	AXMAudioDataSource* _liveContinuousAudioDataSource;
	NSPointerArray* _playbackObservers;
	AXMLiveContinuousTone* _trendlineScrubbingTone;
	AXMLiveContinuousTone* _liveContinuousDataTone;
	/*^block*/id _trendlineFunction;
	vector<int, std::__1::allocator<int> >* _scrubbingDiscreteDataRenderingContext;
	vector<int, std::__1::allocator<int> >* _scrubbingPlaybackCallbackRenderingContext;
	vector<int, std::__1::allocator<int> >* _liveTonePlaybackCallbackRenderingContext;
	unsigned long long _playbackSampleCount;

}

@property (nonatomic,retain) NSTimer * playbackObserverUpdateTimer;                                //@synthesize playbackObserverUpdateTimer=_playbackObserverUpdateTimer - In the implementation block
@property (nonatomic,retain) AXMAudioDataSourceMixer * playbackMixerDataSource;                    //@synthesize playbackMixerDataSource=_playbackMixerDataSource - In the implementation block
@property (nonatomic,retain) AXMAudioDataSource * playbackChartDataAudioDataSource;                //@synthesize playbackChartDataAudioDataSource=_playbackChartDataAudioDataSource - In the implementation block
@property (nonatomic,retain) AXMAudioDataSource * playbackTrendlineAudioDataSource;                //@synthesize playbackTrendlineAudioDataSource=_playbackTrendlineAudioDataSource - In the implementation block
@property (nonatomic,retain) AXMAudioDataSourceMixer * scrubbingMixerDataSource;                   //@synthesize scrubbingMixerDataSource=_scrubbingMixerDataSource - In the implementation block
@property (nonatomic,retain) AXMAudioDataSource * scrubbingDiscreteAudioDataSource;                //@synthesize scrubbingDiscreteAudioDataSource=_scrubbingDiscreteAudioDataSource - In the implementation block
@property (nonatomic,retain) AXMAudioDataSource * scrubbingContinuousAudioDataSource;              //@synthesize scrubbingContinuousAudioDataSource=_scrubbingContinuousAudioDataSource - In the implementation block
@property (nonatomic,retain) AXMAudioDataSource * scrubbingTrendlineAudioDataSource;               //@synthesize scrubbingTrendlineAudioDataSource=_scrubbingTrendlineAudioDataSource - In the implementation block
@property (nonatomic,retain) AXMAudioDataSourceMixer * liveContinuousMixerDataSource;              //@synthesize liveContinuousMixerDataSource=_liveContinuousMixerDataSource - In the implementation block
@property (nonatomic,retain) AXMAudioDataSource * liveContinuousAudioDataSource;                   //@synthesize liveContinuousAudioDataSource=_liveContinuousAudioDataSource - In the implementation block
@property (nonatomic,retain) NSPointerArray * playbackObservers;                                   //@synthesize playbackObservers=_playbackObservers - In the implementation block
@property (nonatomic,readonly) int interpolationMode;                                              //@synthesize interpolationMode=_interpolationMode - In the implementation block
@property (nonatomic,readonly) AXMLiveContinuousTone * continuousScrubbingTone;                    //@synthesize continuousScrubbingTone=_continuousScrubbingTone - In the implementation block
@property (nonatomic,readonly) AXMLiveContinuousTone * trendlineScrubbingTone;                     //@synthesize trendlineScrubbingTone=_trendlineScrubbingTone - In the implementation block
@property (nonatomic,readonly) AXMLiveContinuousTone * liveContinuousDataTone;                     //@synthesize liveContinuousDataTone=_liveContinuousDataTone - In the implementation block
@property (nonatomic,copy) id trendlineFunction;                                                   //@synthesize trendlineFunction=_trendlineFunction - In the implementation block
@property (nonatomic,readonly) BOOL isEndingScrubbing;                                             //@synthesize isEndingScrubbing=_isEndingScrubbing - In the implementation block
@property (nonatomic,readonly) vector<int* scrubbingDiscreteDataRenderingContext;                  //@synthesize scrubbingDiscreteDataRenderingContext=_scrubbingDiscreteDataRenderingContext - In the implementation block
@property (nonatomic,readonly) vector<int* scrubbingPlaybackCallbackRenderingContext;              //@synthesize scrubbingPlaybackCallbackRenderingContext=_scrubbingPlaybackCallbackRenderingContext - In the implementation block
@property (nonatomic,readonly) vector<int* liveTonePlaybackCallbackRenderingContext;               //@synthesize liveTonePlaybackCallbackRenderingContext=_liveTonePlaybackCallbackRenderingContext - In the implementation block
@property (nonatomic,readonly) unsigned long long playbackSampleCount;                             //@synthesize playbackSampleCount=_playbackSampleCount - In the implementation block
@property (nonatomic,readonly) BOOL isPlaying;                                                     //@synthesize playing=_playing - In the implementation block
@property (nonatomic,readonly) BOOL isPaused;                                                      //@synthesize paused=_paused - In the implementation block
@property (nonatomic,readonly) BOOL isScrubbing;                                                   //@synthesize scrubbing=_scrubbing - In the implementation block
@property (nonatomic,readonly) BOOL isInLiveContinuousToneSession;                                 //@synthesize isInLiveContinuousToneSession=_isInLiveContinuousToneSession - In the implementation block
@property (nonatomic,readonly) double currentPlaybackPosition; 
@property (assign,nonatomic) double minimumPlaybackFrequency;                                      //@synthesize minimumPlaybackFrequency=_minimumPlaybackFrequency - In the implementation block
@property (assign,nonatomic) double maximumPlaybackFrequency;                                      //@synthesize maximumPlaybackFrequency=_maximumPlaybackFrequency - In the implementation block
@property (assign,nonatomic) double playbackDuration;                                              //@synthesize playbackDuration=_playbackDuration - In the implementation block
@property (nonatomic,retain) AXMADSREnvelope * ampEnvelope;                                        //@synthesize ampEnvelope=_ampEnvelope - In the implementation block
@property (assign,nonatomic) unsigned long long toneWaveform;                                      //@synthesize toneWaveform=_toneWaveform - In the implementation block
@property (assign,nonatomic) BOOL usesBinauralPanning;                                             //@synthesize usesBinauralPanning=_usesBinauralPanning - In the implementation block
@property (nonatomic,readonly) int dataMode;                                                       //@synthesize dataMode=_dataMode - In the implementation block
@property (nonatomic,readonly) id function;                                                        //@synthesize function=_function - In the implementation block
+(id)sharedInstance;
-(void)play;
-(BOOL)isPlaying;
-(void)setPlaybackPosition:(double)arg1 ;
-(void)pause;
-(BOOL)isScrubbing;
-(double)playbackDuration;
-(void)dealloc;
-(void)stopPlaying;
-(BOOL)isPaused;
-(id)init;
-(int)dataMode;
-(BOOL)_initializeAudioUnit;
-(AXMAudioDataSourceMixer *)playbackMixerDataSource;
-(unsigned long long)playbackSampleCount;
-(AXMAudioDataSource *)playbackChartDataAudioDataSource;
-(AXMAudioDataSource *)playbackTrendlineAudioDataSource;
-(AXMAudioDataSourceMixer *)scrubbingMixerDataSource;
-(AXMAudioDataSource *)scrubbingDiscreteAudioDataSource;
-(AXMAudioDataSource *)scrubbingContinuousAudioDataSource;
-(AXMAudioDataSource *)scrubbingTrendlineAudioDataSource;
-(vector<int*)scrubbingDiscreteDataRenderingContext;
-(AXMAudioDataSourceMixer *)liveContinuousMixerDataSource;
-(AXMAudioDataSource *)liveContinuousAudioDataSource;
-(NSPointerArray *)playbackObservers;
-(double)currentPlaybackPosition;
-(void)setPlaybackObserverUpdateTimer:(NSTimer *)arg1 ;
-(NSTimer *)playbackObserverUpdateTimer;
-(BOOL)_uninitializeAudioUnit;
-(void)scrubToPlaybackFrame:(unsigned long long)arg1 ;
-(id)trendlineFunction;
-(int)interpolationMode;
-(id)_newContinuousToneEnvelope;
-(BOOL)isEndingScrubbing;
-(void)beginScrubbing;
-(void)endScrubbing;
-(void)stopScrubbing;
-(AXMLiveContinuousTone *)continuousScrubbingTone;
-(AXMLiveContinuousTone *)trendlineScrubbingTone;
-(double)frequencyForYAxisValue:(double)arg1 ;
-(AXMADSREnvelope *)ampEnvelope;
-(unsigned long long)toneWaveform;
-(void)_peakNormalizeBuffer:(vector<int, std::__1::allocator<int> >*)arg1 length:(unsigned long long)arg2 level:(double)arg3 ;
-(BOOL)hasContinuousDataForXPosition:(double)arg1 ;
-(double)interpolatedYAxisValueForNormalizedPosition:(double)arg1 ;
-(double)xAxisValueForPosition:(double)arg1 ;
-(void)setTrendlineFunction:(id)arg1 ;
-(void)_initializeAXMAudioDataSources;
-(void)_renderDiscreteAudio;
-(void)_renderContinuousAudio;
-(void)_renderUnivariateFunctionAudio;
-(unsigned long long)sampleIndexForXAxisValue:(double)arg1 ;
-(double)timeOffsetForXAxisValue:(double)arg1 ;
-(id)function;
-(BOOL)_initializeAudioComponent;
-(BOOL)_setAudioFormat;
-(BOOL)_setOutputCallback;
-(double)normalizedXAxisValueForValue:(double)arg1 ;
-(double)minimumPlaybackFrequency;
-(double)maximumPlaybackFrequency;
-(double)normalizedYAxisValueForValue:(double)arg1 ;
-(void)_initializeLiveToneDataSource;
-(AXMLiveContinuousTone *)liveContinuousDataTone;
-(void)addPlaybackObserver:(id)arg1 ;
-(void)setAmpEnvelope:(AXMADSREnvelope *)arg1 ;
-(void)setPlaybackDuration:(double)arg1 ;
-(void)removePlaybackObserver:(id)arg1 ;
-(void)loadDataAndRenderAudioForXAxis:(double*)arg1 yAxis:(double*)arg2 numValues:(unsigned long long)arg3 axisMinimumX:(double)arg4 axisMaximumX:(double)arg5 axisMinimumY:(double)arg6 axisMaximumY:(double)arg7 interpolationMode:(int)arg8 trendline:(/*^block*/id)arg9 ;
-(unsigned long long)sampleIndexForTimeOffset:(double)arg1 ;
-(void)beginLiveContinuousToneSession;
-(void)endLiveContinuousToneSession;
-(void)setLiveContinuousToneNormalizedFrequency:(double)arg1 ;
-(void)setToneWaveform:(unsigned long long)arg1 ;
-(void)setMinimumPlaybackFrequency:(double)arg1 ;
-(void)setMaximumPlaybackFrequency:(double)arg1 ;
-(BOOL)usesBinauralPanning;
-(void)setUsesBinauralPanning:(BOOL)arg1 ;
-(BOOL)isInLiveContinuousToneSession;
-(void)setPlaybackMixerDataSource:(AXMAudioDataSourceMixer *)arg1 ;
-(void)setPlaybackChartDataAudioDataSource:(AXMAudioDataSource *)arg1 ;
-(void)setPlaybackTrendlineAudioDataSource:(AXMAudioDataSource *)arg1 ;
-(void)setScrubbingMixerDataSource:(AXMAudioDataSourceMixer *)arg1 ;
-(void)setScrubbingDiscreteAudioDataSource:(AXMAudioDataSource *)arg1 ;
-(void)setScrubbingContinuousAudioDataSource:(AXMAudioDataSource *)arg1 ;
-(void)setScrubbingTrendlineAudioDataSource:(AXMAudioDataSource *)arg1 ;
-(void)setLiveContinuousMixerDataSource:(AXMAudioDataSourceMixer *)arg1 ;
-(void)setLiveContinuousAudioDataSource:(AXMAudioDataSource *)arg1 ;
-(void)setPlaybackObservers:(NSPointerArray *)arg1 ;
-(vector<int*)scrubbingPlaybackCallbackRenderingContext;
-(vector<int*)liveTonePlaybackCallbackRenderingContext;
@end

