/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:52:02 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/TextToSpeech.framework/Frameworks/TextToSpeechBundleSupport.framework/TextToSpeechBundleSupport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct NSRange {
	unsigned long long location;
	unsigned long long length;
} NSRange;

typedef struct _compressed_pair<boost::basic_regex<char, boost::regex_traits<char, boost::cpp_regex_traits<char> > > *, std::__1::allocator<boost::basic_regex<char, boost::regex_traits<char, boost::cpp_regex_traits<char> > > > > {
	basic_regex<char, boost::regex_traits<char, boost::cpp_regex_traits<char> > > __value_;
} compressed_pair<boost::basic_regex<char, boost::regex_traits<char, boost::cpp_regex_traits<char> > > *, std::__1::allocator<boost::basic_regex<char, boost::regex_traits<char, boost::cpp_regex_traits<char> > > > >;

typedef struct vector<boost::basic_regex<char, boost::regex_traits<char, boost::cpp_regex_traits<char> > >, std::__1::allocator<boost::basic_regex<char, boost::regex_traits<char, boost::cpp_regex_traits<char> > > > > {
	basic_regex<char, boost::regex_traits<char, boost::cpp_regex_traits<char> > > __begin_;
	basic_regex<char, boost::regex_traits<char, boost::cpp_regex_traits<char> > > __end_;
	compressed_pair<boost::basic_regex<char, boost::regex_traits<char, boost::cpp_regex_traits<char> > > *, std::__1::allocator<boost::basic_regex<char, boost::regex_traits<char, boost::cpp_regex_traits<char> > > > > __end_cap_;
} vector<boost::basic_regex<char, boost::regex_traits<char, boost::cpp_regex_traits<char> > >, std::__1::allocator<boost::basic_regex<char, boost::regex_traits<char, boost::cpp_regex_traits<char> > > > >;

typedef struct _NSZone* NSZoneRef;

typedef struct __CFString* CFStringRef;

typedef struct __CFAttributedString* CFAttributedStringRef;

typedef struct __CFURL* CFURLRef;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct __CFRunLoopSource* CFRunLoopSourceRef;

typedef struct {
	id field1;
	long long field2;
	long long field3;
	long long field4;
	_VE_HSAFE field5;
	_ field6;
	_ field7;
	T field8;
	T field9;
	unsigned short field10;
	P field11;
	long field12;
	a field13;
	yb field14;
	a field15;
	char field16;
	k field17;
	unsigned char field18;
	char* field19;
	int field20;
	int field21;
	_ field22;
	_ field23;
	CFString field24;
	_ field25;
	_ field26;
	CFString field27;
	float field28;
	float field29;
	float field30;
	char* field31;
	char* field32;
	long long field33;
	long long field34;
	id field35;
	unsigned field36;
	O field37;
	p field38;
	a field39;
	long long field40;
	u field41;
	e field42;
	A field43;
	u field44;
	double field45;
	int field46;
	o field47;
	F field48;
	int field49;
	long field50;
	e field51;
	unsigned field52;
	D field53;
	int field54;
	unsigned long long field55;
	unsigned long long field56;
	unsigned long long field57;
	unsigned char field58;
	unsigned char field59;
} SCD_Struct_TT9;

typedef struct {
	unsigned field1;
	int field2;
	unsigned field3;
	unsigned field4;
	unsigned field5;
	unsigned field6;
	unsigned short field7;
	unsigned field8;
	unsigned field9;
	char* field10;
} SCD_Struct_TT10;

typedef struct {
	__TTSPlayback field1;
	/*function pointer*/void* field2;
	A field3;
	u field4;
	double field5;
	int field6;
	o field7;
	unsigned long long field8;
	u field9;
	e field10;
	u field11;
	e field12;
	BOOL field13;
	u field14;
	float field15;
	float field16;
	e field17;
	const  field18;
	int field19;
	SCD_Struct_TT10 field20[32];
} SCD_Struct_TT11;

typedef struct {
	int field1;
	unsigned field2;
	void field3;
	unsigned field4;
	/*function pointer*/void* field5;
} SCD_Struct_TT12;

typedef struct __CFArray* CFArrayRef;

typedef struct __TTSPlayback* TTSPlaybackRef;

typedef struct __CFData* CFDataRef;

typedef struct {
	char field1[128];
	char field2[128];
	char field3[128];
	char field4[128];
	char field5[128];
	unsigned short field6;
} SCD_Struct_TT16;

