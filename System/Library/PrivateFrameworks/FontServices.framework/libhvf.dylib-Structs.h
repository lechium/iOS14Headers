/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:54:29 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/FontServices.framework/libhvf.dylib
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct BinaryReader {
	unsigned char cur;
	unsigned char end;
} BinaryReader;

typedef struct LoaderCBF {
	/*function pointer*/void* _vptr$Loader;
	BinaryReader tableData;
	unsigned long long formatFlags;
	unsigned short versMajor;
	unsigned short versMinor;
	unsigned long long partCount;
	BinaryReader partIndexOffsets;
} LoaderCBF;

typedef struct type {
	unsigned char __lx[24];
} type;

typedef struct Transform {
	double tx;
	double tyFlipped;
	double scaleX;
	double scaleY;
	double shearX;
	double shearY;
} Transform;

typedef struct Allocator<unsigned short> {
	MemoryResource mem;
} Allocator<unsigned short>;

typedef struct Allocator<double> {
	MemoryResource mem;
} Allocator<double>;

typedef struct Allocator<HVF::Transform> {
	MemoryResource mem;
} Allocator<HVF::Transform>;

typedef struct Allocator<HVF::NSPBlendValues> {
	MemoryResource mem;
} Allocator<HVF::NSPBlendValues>;

typedef struct _compressed_pair<double *, Util::Allocator<double> > {
	double __value_;
	Allocator<double> __value_;
} compressed_pair<double *, Util::Allocator<double> >;

typedef struct vector<double, Util::Allocator<double> > {
	double __begin_;
	double __end_;
	compressed_pair<double *, Util::Allocator<double> > __end_cap_;
} vector<double, Util::Allocator<double> >;

typedef struct _compressed_pair<unsigned short *, Util::Allocator<unsigned short> > {
	unsigned short __value_;
	Allocator<unsigned short> __value_;
} compressed_pair<unsigned short *, Util::Allocator<unsigned short> >;

typedef struct vector<unsigned short, Util::Allocator<unsigned short> > {
	unsigned short __begin_;
	unsigned short __end_;
	compressed_pair<unsigned short *, Util::Allocator<unsigned short> > __end_cap_;
} vector<unsigned short, Util::Allocator<unsigned short> >;

typedef struct SpanIndexMap<std::__1::vector<unsigned short, Util::Allocator<unsigned short> > > {
	unsigned long long virtsize;
	vector<unsigned short, Util::Allocator<unsigned short> > ixspan;
} SpanIndexMap<std::__1::vector<unsigned short, Util::Allocator<unsigned short> > >;

typedef struct shared_ptr<const double> {
	double __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<const double>;

typedef struct AxisBlendValues {
	shared_ptr<const double> _defaultValue;
	SpanIndexMap<std::__1::vector<unsigned short, Util::Allocator<unsigned short> > > vixmap;
	vector<double, Util::Allocator<double> > values;
} AxisBlendValues;

typedef struct NSPBlendValues {
	shared_ptr<const double> _defaultValue;
	SpanIndexMap<std::__1::vector<unsigned short, Util::Allocator<unsigned short> > > vixmap;
	vector<double, Util::Allocator<double> > values;
} NSPBlendValues;

typedef struct optional<HVF::NSPBlendValues> {
	/*function pointer*/void* ;
	char __null_state_;
	NSPBlendValues) __val_;
	BOOL __engaged_;
} optional<HVF::NSPBlendValues>;

typedef struct _compressed_pair<HVF::NSPBlendValues *, Util::Allocator<HVF::NSPBlendValues> > {
	NSPBlendValues __value_;
	Allocator<HVF::NSPBlendValues> __value_;
} compressed_pair<HVF::NSPBlendValues *, Util::Allocator<HVF::NSPBlendValues> >;

typedef struct AllNSPBlendValues {
	NSPBlendValues __begin_;
	NSPBlendValues __end_;
	compressed_pair<HVF::NSPBlendValues *, Util::Allocator<HVF::NSPBlendValues> > __end_cap_;
	optional<HVF::NSPBlendValues> _defaultValue;
} AllNSPBlendValues;

typedef struct _compressed_pair<HVF::Transform *, Util::Allocator<HVF::Transform> > {
	Transform __value_;
	Allocator<HVF::Transform> __value_;
} compressed_pair<HVF::Transform *, Util::Allocator<HVF::Transform> >;

typedef struct AllNSPTransforms {
	Transform __begin_;
	Transform __end_;
	compressed_pair<HVF::Transform *, Util::Allocator<HVF::Transform> > __end_cap_;
} AllNSPTransforms;

typedef struct BlendContext {
	Transform transform;
	AxisBlendValues axisBlendValues;
	AllNSPTransforms allNSPTransforms;
	AllNSPBlendValues allNSPBlendValues;
} BlendContext;

typedef struct _compressed_pair<std::__1::pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > > *, std::__1::allocator<std::__1::pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > > > > {
	pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > > __value_;
} compressed_pair<std::__1::pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > > *, std::__1::allocator<std::__1::pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > > > >;

typedef struct vector<std::__1::pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > >, std::__1::allocator<std::__1::pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > > > > {
	pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > > __begin_;
	pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > > __end_;
	compressed_pair<std::__1::pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > > *, std::__1::allocator<std::__1::pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > > > > __end_cap_;
} vector<std::__1::pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > >, std::__1::allocator<std::__1::pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > > > >;

typedef struct _value_func<std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > (unsigned long, HVF::PartCache &)> {
	type __buf_;
	__base<std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > (unsigned long, HVF::PartCache &)> __f_;
} value_func<std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > (unsigned long, HVF::PartCache &)>;

typedef struct function<std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > (unsigned long, HVF::PartCache &)> {
	value_func<std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > (unsigned long, HVF::PartCache &)> __f_;
} function<std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > (unsigned long, HVF::PartCache &)>;

typedef struct FlatPartCache {
	/*function pointer*/void* _vptr$PartCache;
	function<std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > (unsigned long, HVF::PartCache &)> loader;
	vector<std::__1::pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > >, std::__1::allocator<std::__1::pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > > > > parts;
} FlatPartCache;

typedef struct _value_func<Util::ReadWriteProperty<HVF::PartTransform, void> (const unsigned long &)> {
	type __buf_;
	__base<Util::ReadWriteProperty<HVF::PartTransform, void> (const unsigned long &)> __f_;
} value_func<Util::ReadWriteProperty<HVF::PartTransform, void> (const unsigned long &)>;

typedef struct function<Util::ReadWriteProperty<HVF::PartTransform, void> (const unsigned long &)> {
	value_func<Util::ReadWriteProperty<HVF::PartTransform, void> (const unsigned long &)> __f_;
} function<Util::ReadWriteProperty<HVF::PartTransform, void> (const unsigned long &)>;

typedef struct ReadWriteProperty<HVF::PartTransform, unsigned long> {
	function<Util::ReadWriteProperty<HVF::PartTransform, void> (const unsigned long &)> get;
} ReadWriteProperty<HVF::PartTransform, unsigned long>;

typedef struct _value_func<Util::ReadWriteProperty<double, void> (const unsigned long &)> {
	type __buf_;
	__base<Util::ReadWriteProperty<double, void> (const unsigned long &)> __f_;
} value_func<Util::ReadWriteProperty<double, void> (const unsigned long &)>;

typedef struct function<Util::ReadWriteProperty<double, void> (const unsigned long &)> {
	value_func<Util::ReadWriteProperty<double, void> (const unsigned long &)> __f_;
} function<Util::ReadWriteProperty<double, void> (const unsigned long &)>;

typedef struct ReadWriteProperty<double, unsigned long> {
	function<Util::ReadWriteProperty<double, void> (const unsigned long &)> get;
} ReadWriteProperty<double, unsigned long>;

typedef struct _value_func<void (const double &)> {
	type __buf_;
	__base<void (const double &)> __f_;
} value_func<void (const double &)>;

typedef struct function<void (const double &)> {
	value_func<void (const double &)> __f_;
} function<void (const double &)>;

typedef struct _value_func<double ()> {
	type __buf_;
	__base<double ()> __f_;
} value_func<double ()>;

typedef struct function<double ()> {
	value_func<double ()> __f_;
} function<double ()>;

typedef struct ReadWriteProperty<double, void> {
	function<double ()> get;
	function<void (const double &)> set;
} ReadWriteProperty<double, void>;

typedef struct _value_func<void (const CGVector &)> {
	type __buf_;
	__base<void (const CGVector &)> __f_;
} value_func<void (const CGVector &)>;

typedef struct function<void (const CGVector &)> {
	value_func<void (const CGVector &)> __f_;
} function<void (const CGVector &)>;

typedef struct _value_func<CGVector ()> {
	type __buf_;
	__base<CGVector ()> __f_;
} value_func<CGVector ()>;

typedef struct function<CGVector ()> {
	value_func<CGVector ()> __f_;
} function<CGVector ()>;

typedef struct ReadWriteProperty<CGVector, void> {
	function<CGVector ()> get;
	function<void (const CGVector &)> set;
} ReadWriteProperty<CGVector, void>;

typedef struct HVF_PartTransform {
	ReadWriteProperty<CGVector, void> translation;
	ReadWriteProperty<double, void> rotation;
	ReadWriteProperty<double, unsigned long> axisValues;
	ReadWriteProperty<HVF::PartTransform, unsigned long> subpartTransforms;
	FlatPartCache cache;
	Part part;
	unsigned long long partIndex;
	BlendContext blendContext;
} HVF_PartTransform;

