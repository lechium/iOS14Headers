/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:54:45 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/NanoAudioControl.framework/NanoAudioControl
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/NSXPCListenerDelegate.h>
#import <libobjc.A.dylib/NACXPCInterface.h>
#import <libobjc.A.dylib/NACIDSClientDelegate.h>

@protocol OS_dispatch_queue, OS_dispatch_source;
@class NSObject, NPSDomainAccessor, NSMutableDictionary, NSXPCListener, NACIDSClient, NSString;

@interface NACXPCServer : NSObject <NSXPCListenerDelegate, NACXPCInterface, NACIDSClientDelegate> {

	NSObject*<OS_dispatch_queue> _internalQueue;
	NSObject*<OS_dispatch_queue> _audioAndHapticPreviewQueue;
	NPSDomainAccessor* _domainAccessor;
	NSMutableDictionary* _volumeRecords;
	NSMutableDictionary* _listeningModesRecords;
	NSMutableDictionary* _audioRoutesRecords;
	NSXPCListener* _xpcListener;
	NACIDSClient* _idsClient;
	float _hapticIntensity;
	BOOL _prominentHapticEnabled;
	long long _hapticState;
	BOOL _systemMutedState;
	NSObject*<OS_dispatch_source> _audioRouteDeferTimer;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)server;
-(BOOL)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2 ;
-(void)setHapticIntensity:(float)arg1 ;
-(id)init;
-(void)beginObservingVolumeForTarget:(id)arg1 ;
-(void)beginObservingListeningModesForTarget:(id)arg1 ;
-(void)beginObservingAudioRoutesForCategory:(id)arg1 ;
-(void)endObservingVolumeForTarget:(id)arg1 ;
-(void)endObservingListeningModesForTarget:(id)arg1 ;
-(void)volumeValueForTarget:(id)arg1 result:(/*^block*/id)arg2 ;
-(void)volumeControlAvailabilityForTarget:(id)arg1 result:(/*^block*/id)arg2 ;
-(void)mutedStateForTarget:(id)arg1 result:(/*^block*/id)arg2 ;
-(void)hapticState:(/*^block*/id)arg1 ;
-(void)hapticIntensity:(/*^block*/id)arg1 ;
-(void)prominentHapticEnabled:(/*^block*/id)arg1 ;
-(void)systemMutedState:(/*^block*/id)arg1 ;
-(void)EULimitForTarget:(id)arg1 result:(/*^block*/id)arg2 ;
-(void)volumeWarningForTarget:(id)arg1 result:(/*^block*/id)arg2 ;
-(void)setVolumeValue:(float)arg1 forTarget:(id)arg2 ;
-(void)setMuted:(BOOL)arg1 forTarget:(id)arg2 ;
-(void)setProminentHapticEnabled:(BOOL)arg1 ;
-(void)setHapticState:(long long)arg1 ;
-(void)setSystemMuted:(BOOL)arg1 ;
-(void)availableListeningModesForTarget:(id)arg1 result:(/*^block*/id)arg2 ;
-(void)currentListeningModeForTarget:(id)arg1 result:(/*^block*/id)arg2 ;
-(void)setCurrentListeningMode:(id)arg1 forTarget:(id)arg2 ;
-(void)audioRoutesForCategory:(id)arg1 result:(/*^block*/id)arg2 ;
-(void)endObservingAudioRoutesForCategory:(id)arg1 ;
-(void)pickAudioRouteWithIdentifier:(id)arg1 category:(id)arg2 ;
-(void)playAudioAndHapticPreview;
-(void)playDefaultHapticPreview;
-(void)playProminentHapticPreview;
-(id)_cachedVolumeRecords;
-(float)_cachedHapticIntensity;
-(BOOL)_cachedSystemMutedState;
-(BOOL)_cachedProminentHapticState;
-(long long)_cachedHapticState;
-(void)_cleanupConnection:(id)arg1 ;
-(void)_beginObservingVolumeForTarget:(id)arg1 connection:(id)arg2 ;
-(id)_volumeRecordForTarget:(id)arg1 ;
-(long long)_aggregatedCountOfObserversForTarget:(id)arg1 inRecords:(id)arg2 ;
-(void)_endObservingVolumeForTarget:(id)arg1 connection:(id)arg2 ;
-(void)_beginObservingListeningModesForTarget:(id)arg1 connection:(id)arg2 ;
-(void)_endObservingListeningModesForTarget:(id)arg1 connection:(id)arg2 ;
-(id)_listeningModesRecordForTarget:(id)arg1 ;
-(id)_audioRoutesRecordForCategory:(id)arg1 ;
-(void)_endObservingAudioRoutesForCategory:(id)arg1 connection:(id)arg2 ;
-(void)_persistVolumeRecords;
-(void)_persistHapticIntensity;
-(void)_persistProminentHapticState;
-(void)_persistHapticState;
-(void)_persistSystemMutedState;
-(void)_scheduleDeferredAudioRoutesUpdate:(id)arg1 category:(id)arg2 ;
-(void)_updateAudioRoutes:(id)arg1 category:(id)arg2 ;
-(void)_cancelDeferredAudioRoutesUpdate;
-(id)_routeObservationCategoriesForConnection:(id)arg1 ;
-(void)client:(id)arg1 volumeValue:(float)arg2 didChangeForTarget:(id)arg3 ;
-(void)client:(id)arg1 volumeControlAvailable:(BOOL)arg2 didChangeForTarget:(id)arg3 ;
-(void)client:(id)arg1 mutedState:(BOOL)arg2 didChangeForTarget:(id)arg3 ;
-(void)client:(id)arg1 EULimit:(float)arg2 didChangeForTarget:(id)arg3 ;
-(void)client:(id)arg1 volumeWarningEnabled:(BOOL)arg2 volumeWarningState:(long long)arg3 didChangeForTarget:(id)arg4 ;
-(void)client:(id)arg1 volumeObservationCancelledForTarget:(id)arg2 ;
-(void)client:(id)arg1 availableListeningModes:(id)arg2 didChangeForTarget:(id)arg3 ;
-(void)client:(id)arg1 currentListeningMode:(id)arg2 didChangeForTarget:(id)arg3 ;
-(void)client:(id)arg1 didFailToSetCurrentListeningModeForTarget:(id)arg2 error:(id)arg3 ;
-(void)client:(id)arg1 audioRoutes:(id)arg2 didChangeForCategory:(id)arg3 ;
-(void)client:(id)arg1 routeObservationCancelledForCategory:(id)arg2 ;
-(void)client:(id)arg1 systemMutedStateDidChange:(BOOL)arg2 ;
-(void)client:(id)arg1 hapticStateDidChange:(long long)arg2 ;
-(void)client:(id)arg1 hapticIntensityDidChange:(float)arg2 ;
-(void)client:(id)arg1 prominentHapticStateDidChange:(BOOL)arg2 ;
@end

