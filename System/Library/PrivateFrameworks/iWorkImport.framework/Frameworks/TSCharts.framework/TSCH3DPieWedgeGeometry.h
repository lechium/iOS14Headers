/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 12:31:23 PM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/Frameworks/TSCharts.framework/TSCharts
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSCharts/TSCharts-Structs.h>
#import <TSCharts/TSCH3DGeometry.h>

@class TSCH3DNormalDirectionMapper;

@interface TSCH3DPieWedgeGeometry : TSCH3DGeometry {

	float mStartAngle;
	float mEndAngle;
	long long mAngleSteps;
	long long mRadiusSteps;
	long long mBevelEdgeSteps;
	float mRadius;
	float mBottomZ;
	float mTopZ;
	unsigned mCapOffset;
	unsigned mCapCount;
	TSCH3DNormalDirectionMapper* mNormalDirectionMapper;

}

@property (assign,nonatomic) float startAngle; 
@property (assign,nonatomic) float endAngle; 
@property (assign,nonatomic) long long angleSteps; 
@property (assign,nonatomic) long long radiusSteps; 
@property (assign,nonatomic) long long bevelEdgeSteps; 
@property (assign,nonatomic) float radius; 
@property (assign,nonatomic) float bottomZ; 
@property (assign,nonatomic) float topZ; 
@property (nonatomic,readonly) unsigned capOffset; 
@property (nonatomic,readonly) unsigned capCount; 
@property (nonatomic,readonly) TSCH3DNormalDirectionMapper * normalDirectionMapper; 
-(float)topZ;
-(void)dealloc;
-(float)radius;
-(float)endAngle;
-(void)setRadius:(float)arg1 ;
-(id)init;
-(float)startAngle;
-(void)setEndAngle:(float)arg1 ;
-(void)setStartAngle:(float)arg1 ;
-(unsigned)capOffset;
-(void)generateArrays;
-(void)setAngleSteps:(long long)arg1 ;
-(void)setRadiusSteps:(long long)arg1 ;
-(void)setBevelEdgeSteps:(long long)arg1 ;
-(void)setBottomZ:(float)arg1 ;
-(void)setTopZ:(float)arg1 ;
-(TSCH3DNormalDirectionMapper *)normalDirectionMapper;
-(int)geometryCount;
-(unsigned)capCount;
-(id)selectionKnobPositions;
-(float)bevelHeight;
-(void)generateRoundedTop:(vector<float, std::__1::allocator<float> >*)arg1 radiusArray:(vector<float, std::__1::allocator<float> >*)arg2 ;
-(void)p_generateBevelCoordinates:(vector<glm::detail::tvec3<float>, std::__1::allocator<glm::detail::tvec3<float> > >*)arg1 andAngles:(vector<float, std::__1::allocator<float> >*)arg2 radiusArray:(const vector<float, std::__1::allocator<float> >*)arg3 topArray:(const vector<float, std::__1::allocator<float> >*)arg4 ;
-(void)p_generateAngles:(vector<float, std::__1::allocator<float> >*)arg1 ;
-(BOOL)isFullCircle;
-(long long)angleSteps;
-(long long)radiusSteps;
-(float)bottomZ;
-(long long)bevelEdgeSteps;
@end

