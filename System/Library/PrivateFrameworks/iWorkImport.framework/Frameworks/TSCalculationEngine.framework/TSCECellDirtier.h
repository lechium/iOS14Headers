/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 12:31:20 PM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/Frameworks/TSCalculationEngine.framework/TSCalculationEngine
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <TSCalculationEngine/TSCalculationEngine-Structs.h>
@class NSDate;

@interface TSCECellDirtier : NSObject {

	TSCEDependencyTracker* _dependTracker;
	TSCEInternalCellReference _startCellRef;
	BOOL _dirtyingInProgress;
	os_unfair_lock_s _dirtyingLock;
	NSDate* _startTime;
	double _timeout;
	unordered_map<TSCEInternalCellReference, TSCECountedInternalCellRefSet, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<std::__1::pair<const TSCEInternalCellReference, TSCECountedInternalCellRefSet> > >* _dependentsToDirtyByFromRef;

}

@property (assign,nonatomic) BOOL dirtyingInProgress;                               //@synthesize dirtyingInProgress=_dirtyingInProgress - In the implementation block
@property (nonatomic,readonly) TSCEDependencyTracker* dependTracker;                //@synthesize dependTracker=_dependTracker - In the implementation block
@property (nonatomic,readonly) BOOL isDoneDirtying; 
@property (nonatomic,readonly) NSDate * startTime;                                  //@synthesize startTime=_startTime - In the implementation block
@property (nonatomic,readonly) double timeout;                                      //@synthesize timeout=_timeout - In the implementation block
@property (nonatomic,readonly) TSCEInternalCellReference startCellRef;              //@synthesize startCellRef=_startCellRef - In the implementation block
-(double)timeout;
-(NSDate *)startTime;
-(id)initWithDependencyTracker:(TSCEDependencyTracker*)arg1 ;
-(BOOL)dirtyCellsForSeconds:(double)arg1 fromStartTime:(id)arg2 ;
-(BOOL)isDoneDirtying;
-(BOOL)_dirtyCellsWithNoLockForSeconds:(double)arg1 fromStartTime:(id)arg2 ;
-(unordered_map<TSCEInternalCellReference, TSCECountedInternalCellRefSet, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<std::__1::pair<const TSCEInternalCellReference, TSCECountedInternalCellRefSet> > >*)dependentsToDirtyByFromRef;
-(void)dirtyCellsNow;
-(void)startDirtyingCellRef;
-(void)stopDirtyingCellRef;
-(BOOL)dirtyNewCellRef:(const TSCEInternalCellReference*)arg1 forSeconds:(double)arg2 fromStartTime:(id)arg3 ;
-(TSCEDependencyTracker*)dependTracker;
-(TSCEInternalCellReference)startCellRef;
-(BOOL)dirtyingInProgress;
-(void)setDirtyingInProgress:(BOOL)arg1 ;
@end

