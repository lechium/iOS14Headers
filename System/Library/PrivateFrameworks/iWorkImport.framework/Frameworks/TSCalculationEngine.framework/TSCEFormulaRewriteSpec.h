/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 12:31:21 PM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/Frameworks/TSCalculationEngine.framework/TSCalculationEngine
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <TSCalculationEngine/TSCalculationEngine-Structs.h>
@class TSCETableTransposedInfo, TSCEFormulaRewriteInfo_RowColumnInfo, TSCEFormulaRewrite_RegionMovedInfo, TSCEFormulaRewrite_RegionMergedInfo, TSCEFormulaRewrite_MergeOriginMovedInfo, TSKShuffleMapping, TSCERewriteTableUIDInfo, TSCERewriteGroupNodeUIDInfo, TSCEGroupByChange, TSCEFormulasForUndo, NSMutableArray, TSCECoordMapper;

@interface TSCEFormulaRewriteSpec : NSObject {

	int _type;
	UUIDData<TSP::UUIDData> _tableUID;
	UUIDData<TSP::UUIDData> _conditionalStyleOwnerUID;
	TSUCellRect _tableRange;
	BOOL _isInverse;
	TSCETableTransposedInfo* _transposedInfo;
	TSCEFormulaRewriteInfo_RowColumnInfo* _rowColumnInfo;
	TSCEFormulaRewrite_RegionMovedInfo* _regionMovedInfo;
	TSCEFormulaRewrite_RegionMergedInfo* _mergeInfo;
	TSCEFormulaRewrite_MergeOriginMovedInfo* _mergeOriginMovedInfo;
	TSKShuffleMapping* _shuffleMap;
	TSCERewriteTableUIDInfo* _tableUIDInfo;
	TSCERewriteGroupNodeUIDInfo* _groupNodeUIDInfo;
	TSCEGroupByChange* _groupByChange;
	TSCEFormulasForUndo* _formulasForUndo;
	id _warningSetsForUndo;
	unordered_map<TSCECellRef, TSTConditionalStyleSet *, std::__1::hash<TSCECellRef>, std::__1::equal_to<TSCECellRef>, std::__1::allocator<std::__1::pair<const TSCECellRef, TSTConditionalStyleSet *> > >* _conditionalStylesForUndo;
	NSMutableArray* _nestedRewrites;
	unordered_map<TSCECellRef, TSUCellRect, std::__1::hash<TSCECellRef>, std::__1::equal_to<TSCECellRef>, std::__1::allocator<std::__1::pair<const TSCECellRef, TSUCellRect> > >* _mergeRangesContainingFormulas;
	os_unfair_lock_s _coordMappersLock;
	unordered_map<TSU::UUIDData<TSP::UUIDData>, TSCECoordMapper *, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, TSCECoordMapper *> > >* _coordMappersByTableUID;
	BOOL _canBeNested;
	TSCEFormulaRewriteSpec* _rewriteSpecBaseToChrome;
	TSCEFormulaRewriteSpec* _rewriteSpecChromeToBase;
	TSCECoordMapper* _coordMapper;
	TSCECoordMapper* _srcCoordMapper;
	UUIDData<TSP::UUIDData> _fromTableUID;
	UUIDData<TSP::UUIDData> _groupByUID;

}

@property (nonatomic,readonly) int rewriteType;                                                                    //@synthesize type=_type - In the implementation block
@property (nonatomic,readonly) UUIDData<TSP::UUIDData> tableUID;                                                   //@synthesize tableUID=_tableUID - In the implementation block
@property (nonatomic,readonly) UUIDData<TSP::UUIDData> fromTableUID;                                               //@synthesize fromTableUID=_fromTableUID - In the implementation block
@property (assign,nonatomic) UUIDData<TSP::UUIDData> conditionalStyleOwnerUID;                                     //@synthesize conditionalStyleOwnerUID=_conditionalStyleOwnerUID - In the implementation block
@property (nonatomic,readonly) UUIDData<TSP::UUIDData> groupByUID;                                                 //@synthesize groupByUID=_groupByUID - In the implementation block
@property (assign,nonatomic) UUIDData<TSP::UUIDData> insertAtUid; 
@property (assign,nonatomic) UUIDData<TSP::UUIDData> insertOppositeUid; 
@property (assign,nonatomic) BOOL isInverse;                                                                       //@synthesize isInverse=_isInverse - In the implementation block
@property (nonatomic,retain) TSCEFormulaRewriteSpec * rewriteSpecBaseToChrome;                                     //@synthesize rewriteSpecBaseToChrome=_rewriteSpecBaseToChrome - In the implementation block
@property (nonatomic,retain) TSCEFormulaRewriteSpec * rewriteSpecChromeToBase;                                     //@synthesize rewriteSpecChromeToBase=_rewriteSpecChromeToBase - In the implementation block
@property (nonatomic,retain,readonly) TSCETableTransposedInfo * transposedInfo;                                    //@synthesize transposedInfo=_transposedInfo - In the implementation block
@property (nonatomic,retain,readonly) TSCEFormulaRewriteInfo_RowColumnInfo * rowColumnInfo;                        //@synthesize rowColumnInfo=_rowColumnInfo - In the implementation block
@property (nonatomic,retain,readonly) TSCEFormulaRewrite_RegionMovedInfo * regionMovedInfo;                        //@synthesize regionMovedInfo=_regionMovedInfo - In the implementation block
@property (nonatomic,retain,readonly) TSCEFormulaRewrite_RegionMergedInfo * mergeInfo;                             //@synthesize mergeInfo=_mergeInfo - In the implementation block
@property (nonatomic,retain,readonly) TSCEFormulaRewrite_MergeOriginMovedInfo * mergeOriginMovedInfo;              //@synthesize mergeOriginMovedInfo=_mergeOriginMovedInfo - In the implementation block
@property (nonatomic,retain,readonly) TSCERewriteTableUIDInfo * tableUIDInfo;                                      //@synthesize tableUIDInfo=_tableUIDInfo - In the implementation block
@property (nonatomic,retain,readonly) TSCERewriteGroupNodeUIDInfo * groupNodeUIDInfo;                              //@synthesize groupNodeUIDInfo=_groupNodeUIDInfo - In the implementation block
@property (nonatomic,retain,readonly) TSCEGroupByChange * groupByChange;                                           //@synthesize groupByChange=_groupByChange - In the implementation block
@property (nonatomic,retain,readonly) TSKShuffleMapping * shuffleMap;                                              //@synthesize shuffleMap=_shuffleMap - In the implementation block
@property (nonatomic,retain) TSCEFormulasForUndo * formulasForUndo;                                                //@synthesize formulasForUndo=_formulasForUndo - In the implementation block
@property (nonatomic,retain) id warningSetsForUndo;                                                                //@synthesize warningSetsForUndo=_warningSetsForUndo - In the implementation block
@property (assign,nonatomic) BOOL canBeNested;                                                                     //@synthesize canBeNested=_canBeNested - In the implementation block
@property (nonatomic,retain) TSCECoordMapper * coordMapper;                                                        //@synthesize coordMapper=_coordMapper - In the implementation block
@property (nonatomic,retain) TSCECoordMapper * srcCoordMapper;                                                     //@synthesize srcCoordMapper=_srcCoordMapper - In the implementation block
+(BOOL)rewriteTypeUsesAmendRewriteSpec:(int)arg1 ;
-(TSCERangeCoordinate)affectedRange;
-(id)description;
-(BOOL)isInverse;
-(void)saveToMessage:(FormulaRewriteSpecArchive*)arg1 archiver:(id)arg2 ;
-(UUIDData<TSP::UUIDData>)tableUID;
-(TSCEFormulaRewriteInfo_RowColumnInfo *)rowColumnInfo;
-(int)rewriteType;
-(TSCECellRef)updatedCellRefForOriginalCellRef:(const TSCECellRef*)arg1 ;
-(TSCEFormulasForUndo *)formulasForUndo;
-(TSCECellRef)originalCellRefForUpdatedCellRef:(const TSCECellRef*)arg1 ;
-(TSCEGroupByChange *)groupByChange;
-(UUIDData<TSP::UUIDData>)fromTableUID;
-(BOOL)isForTable:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(id)coordMapperForTableUID:(const UUIDData<TSP::UUIDData>*)arg1 calcEngine:(id)arg2 ;
-(UUIDData<TSP::UUIDData>)insertAtUid;
-(UUIDData<TSP::UUIDData>)insertOppositeUid;
-(TSKShuffleMapping *)shuffleMap;
-(id)initFromMessage:(const FormulaRewriteSpecArchive*)arg1 ;
-(TSCEFormulaRewrite_RegionMovedInfo *)regionMovedInfo;
-(TSCECellRef)flattenedCellRefForCategoryRef:(const TSCECategoryRef*)arg1 calcEngine:(id)arg2 ;
-(UUIDData<TSP::UUIDData>)conditionalStyleOwnerUID;
-(UUIDData<TSP::UUIDData>)affectedOwnerUID;
-(TSCETableTransposedInfo *)transposedInfo;
-(TSCEFormulaRewrite_RegionMergedInfo *)mergeInfo;
-(TSCEFormulaRewrite_MergeOriginMovedInfo *)mergeOriginMovedInfo;
-(UUIDData<TSP::UUIDData>)affectedConditionalStyleOwnerUID;
-(TSCERewriteGroupNodeUIDInfo *)groupNodeUIDInfo;
-(TSCERewriteTableUIDInfo *)tableUIDInfo;
-(UUIDData<TSP::UUIDData>)groupByUID;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)expandedRowColumnUuids;
-(void)addNestedRewrite:(id)arg1 ;
-(void)setInsertAtUid:(UUIDData<TSP::UUIDData>)arg1 ;
-(void)setInsertOppositeUid:(UUIDData<TSP::UUIDData>)arg1 ;
-(void)addCoordMapper:(id)arg1 ;
-(void)loadMergeRangesContainingFormulasInTable:(id)arg1 calcEngine:(id)arg2 ;
-(id)prepareToRewriteWithCalcEngine:(id)arg1 ;
-(BOOL)canBeNested;
-(id)amendRewriteWithCalcEngine:(id)arg1 ;
-(void)didModifyTable:(id)arg1 calcEngine:(id)arg2 ;
-(id)initWithOwnerDeletion:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(id)initWithOwnerInsertion:(const UUIDData<TSP::UUIDData>*)arg1 fromOwnerUID:(const UUIDData<TSP::UUIDData>*)arg2 ;
-(id)initWithTransposeTable:(const UUIDData<TSP::UUIDData>*)arg1 transposedBodyRange:(TSCERangeCoordinate)arg2 numberOfFooterRows:(unsigned)arg3 ;
-(id)initForRemoveRowsOrColumnsFromTable:(const UUIDData<TSP::UUIDData>*)arg1 rowColumnUuids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 areRows:(BOOL)arg3 ;
-(id)initForInsertingRowsOrColumnsIntoTable:(const UUIDData<TSP::UUIDData>*)arg1 rowColumnUuids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 areRows:(BOOL)arg3 ;
-(id)initForMovingRowsOrColumnsInTable:(const UUIDData<TSP::UUIDData>*)arg1 rowColumnUuids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 shuffleMap:(id)arg3 areRows:(BOOL)arg4 srcTract:(const UUIDRect<TSP::UUIDRect>*)arg5 destTract:(const UUIDRect<TSP::UUIDRect>*)arg6 ;
-(id)initForSortWithTableUID:(const UUIDData<TSP::UUIDData>*)arg1 rowUids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 shuffleMap:(id)arg3 ;
-(id)initForReorderRowsWithTableUID:(const UUIDData<TSP::UUIDData>*)arg1 rowUids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 shuffleMap:(id)arg3 ;
-(id)initForMovingRegionWithSrcTableUID:(const UUIDData<TSP::UUIDData>*)arg1 srcTract:(const UUIDRect<TSP::UUIDRect>*)arg2 dstTableUID:(const UUIDData<TSP::UUIDData>*)arg3 destTract:(const UUIDRect<TSP::UUIDRect>*)arg4 ;
-(id)initForCategorizedTableBaseToChromeRewriterWithSrcTableUID:(const UUIDData<TSP::UUIDData>*)arg1 srcTract:(const UUIDRect<TSP::UUIDRect>*)arg2 dstTableUID:(const UUIDData<TSP::UUIDData>*)arg3 destTract:(const UUIDRect<TSP::UUIDRect>*)arg4 coordMapper:(id)arg5 ;
-(id)initForCategorizedTableChromeToBaseRewriterWithSrcTableUID:(const UUIDData<TSP::UUIDData>*)arg1 srcTract:(const UUIDRect<TSP::UUIDRect>*)arg2 dstTableUID:(const UUIDData<TSP::UUIDData>*)arg3 destTract:(const UUIDRect<TSP::UUIDRect>*)arg4 coordMapper:(id)arg5 srcCoordMapper:(id)arg6 fromTableUID:(const UUIDData<TSP::UUIDData>*)arg7 ;
-(id)initForMergeCellsWithTableUID:(const UUIDData<TSP::UUIDData>*)arg1 columnUids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 rowUids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg3 mergeSource:(TSUCellCoord)arg4 ;
-(id)initForUndoMergeCellsWithTableUID:(const UUIDData<TSP::UUIDData>*)arg1 columnUids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 rowUids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg3 mergeSource:(TSUCellCoord)arg4 ;
-(id)initForMergeOriginsMovedWithMap:(const unordered_map<TSUCellCoord, TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<std::__1::pair<const TSUCellCoord, TSUCellCoord> > >*)arg1 reverseMap:(const unordered_map<TSUCellCoord, TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<std::__1::pair<const TSUCellCoord, TSUCellCoord> > >*)arg2 inTableUID:(const UUIDData<TSP::UUIDData>*)arg3 ;
-(id)initForPastingCellsWithTableUID:(const UUIDData<TSP::UUIDData>*)arg1 columnUids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 rowUids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg3 ;
-(id)initForTableUIDReassignment:(const UUIDMap<TSP::UUIDMap>*)arg1 ;
-(id)initForGroupBy:(const UUIDData<TSP::UUIDData>*)arg1 withGroupByChange:(id)arg2 ;
-(id)initForGroupBy:(const UUIDData<TSP::UUIDData>*)arg1 groupNodeUIDReassignment:(const UUIDMap<TSP::UUIDMap>*)arg2 ;
-(unordered_map<TSCECellRef, TSTConditionalStyleSet *, std::__1::hash<TSCECellRef>, std::__1::equal_to<TSCECellRef>, std::__1::allocator<std::__1::pair<const TSCECellRef, TSTConditionalStyleSet *> > >*)conditionalStylesForUndo;
-(id)miniDescription;
-(unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)affectedOwnerUIDs;
-(TSUCellRect)tableRangeForTable:(const UUIDData<TSP::UUIDData>*)arg1 calcEngine:(id)arg2 ;
-(TSUCellRect)mergeRangeAtOriginalCellRef:(const TSCECellRef*)arg1 ;
-(void)willModifyTable:(id)arg1 uidResolver:(id)arg2 calcEngine:(id)arg3 ;
-(id)nestedRewrites;
-(void)willModifySrcTable:(id)arg1 srcUidResolver:(id)arg2 dstTable:(id)arg3 dstUidResolver:(id)arg4 ;
-(void)didModifySrcTable:(id)arg1 dstTable:(id)arg2 ;
-(void)didModifyTable:(id)arg1 ;
-(void)clearTableIndexes;
-(void)setIsInverse:(BOOL)arg1 ;
-(void)setConditionalStyleOwnerUID:(UUIDData<TSP::UUIDData>)arg1 ;
-(TSCEFormulaRewriteSpec *)rewriteSpecBaseToChrome;
-(void)setRewriteSpecBaseToChrome:(TSCEFormulaRewriteSpec *)arg1 ;
-(TSCEFormulaRewriteSpec *)rewriteSpecChromeToBase;
-(void)setRewriteSpecChromeToBase:(TSCEFormulaRewriteSpec *)arg1 ;
-(void)setFormulasForUndo:(TSCEFormulasForUndo *)arg1 ;
-(id)warningSetsForUndo;
-(void)setWarningSetsForUndo:(id)arg1 ;
-(void)setCanBeNested:(BOOL)arg1 ;
-(TSCECoordMapper *)coordMapper;
-(void)setCoordMapper:(TSCECoordMapper *)arg1 ;
-(TSCECoordMapper *)srcCoordMapper;
-(void)setSrcCoordMapper:(TSCECoordMapper *)arg1 ;
@end

