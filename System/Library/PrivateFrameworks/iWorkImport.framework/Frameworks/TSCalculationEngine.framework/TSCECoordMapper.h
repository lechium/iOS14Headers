/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 12:31:21 PM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/Frameworks/TSCalculationEngine.framework/TSCalculationEngine
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSCalculationEngine/TSCalculationEngine-Structs.h>
#import <TSCalculationEngine/TSCECoordMappingProtocol.h>
#import <libobjc.A.dylib/NSCopying.h>

@class NSIndexSet;

@interface TSCECoordMapper : NSObject <TSCECoordMappingProtocol, NSCopying> {

	BOOL _isIdentityMapping;
	UUIDData<TSP::UUIDData> _tableUID;
	unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > >* _baseRowToViewRow;
	unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > >* _viewRowToBaseRow;
	NSIndexSet* _summaryAndLabelRowIndexes;

}
-(id)copyWithZone:(NSZone*)arg1 ;
-(id)initFromArchive:(const CoordMapperArchive*)arg1 ;
-(void)encodeToArchive:(CoordMapperArchive*)arg1 ;
-(const UUIDData<TSP::UUIDData>*)tableUID;
-(id)viewTractRefForBaseTractRef:(id)arg1 ;
-(TSUModelRowIndex)baseRowIndexForViewRowIndex:(TSUViewRowIndex)arg1 ;
-(id)chromeTractRefForBaseTractRef:(id)arg1 ;
-(TSUModelCellCoord)baseCellCoordForChromeCellCoord:(TSUChromeCellCoord)arg1 ;
-(TSUViewColumnIndex)viewColumnIndexForBaseColumnIndex:(TSUModelColumnIndex)arg1 ;
-(TSUModelColumnIndex)baseColumnIndexForViewColumnIndex:(TSUViewColumnIndex)arg1 ;
-(id)baseTractRefForViewTractRef:(id)arg1 ;
-(id)initWithTableUID:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(id)initWithTableUID:(const UUIDData<TSP::UUIDData>*)arg1 summaryAndLabelRows:(id)arg2 ;
-(void)mapBaseRow:(unsigned)arg1 toViewRow:(unsigned)arg2 ;
-(BOOL)isIdentityMapping;
-(TSUViewRowIndex)viewRowIndexForChromeRowIndex:(TSUChromeRowIndex)arg1 ;
-(TSUViewRowIndex)viewRowIndexForBaseRowIndex:(TSUModelRowIndex)arg1 ;
-(TSUChromeRowIndex)chromeRowIndexForViewRowIndex:(TSUViewRowIndex)arg1 ;
-(id)viewColumnIndexesForBaseColumnIndexes:(id)arg1 ;
-(TSUModelColumnIndex)baseColumnIndexForChromeColumnIndex:(TSUChromeColumnIndex)arg1 ;
-(TSUModelRowIndex)baseRowIndexForChromeRowIndex:(TSUChromeRowIndex)arg1 ;
-(TSUChromeColumnIndex)chromeColumnIndexForBaseColumnIndex:(TSUModelColumnIndex)arg1 ;
-(TSUChromeRowIndex)chromeRowIndexForBaseRowIndex:(TSUModelRowIndex)arg1 ;
-(TSUChromeColumnIndex)chromeColumnIndexForViewColumnIndex:(TSUViewColumnIndex)arg1 ;
-(TSUViewColumnIndex)viewColumnIndexForChromeColumnIndex:(TSUChromeColumnIndex)arg1 ;
-(TSUModelCellCoord)baseCellCoordForViewCellCoord:(TSUViewCellCoord)arg1 ;
-(TSUChromeCellCoord)chromeCellCoordForBaseCellCoord:(TSUModelCellCoord)arg1 ;
-(TSUChromeCellCoord)chromeCellCoordForViewCellCoord:(TSUViewCellCoord)arg1 ;
-(TSUViewCellCoord)viewCellCoordForBaseCellCoord:(TSUModelCellCoord)arg1 ;
-(TSUViewCellCoord)viewCellCoordForChromeCellCoord:(TSUChromeCellCoord)arg1 ;
-(id)viewTractRefForChromeTractRef:(id)arg1 ;
-(id)baseColumnIndexesForViewColumnIndexes:(id)arg1 ;
-(id)baseRowIndexesForViewRowIndexes:(id)arg1 ;
-(id)chromeTractRefForViewTractRef:(id)arg1 ;
-(id)chromeColumnIndexesForViewColumnIndexes:(id)arg1 ;
-(id)chromeRowIndexesForViewRowIndexes:(id)arg1 ;
-(id)viewRowIndexesForBaseRowIndexes:(id)arg1 ;
-(id)viewColumnIndexesForChromeColumnIndexes:(id)arg1 ;
-(id)viewRowIndexesForChromeRowIndexes:(id)arg1 ;
-(RefTypeHolder<TSCECellRef, 0>)baseCellRefForChromeCellRef:(const RefTypeHolder<TSCECellRef, 2>*)arg1 ;
-(RefTypeHolder<TSCECellRef, 0>)baseCellRefForViewCellRef:(const RefTypeHolder<TSCECellRef, 1>*)arg1 ;
-(RefTypeHolder<TSCECellRef, 2>)chromeCellRefForBaseCellRef:(const RefTypeHolder<TSCECellRef, 0>*)arg1 ;
-(RefTypeHolder<TSCECellRef, 2>)chromeCellRefForViewCellRef:(const RefTypeHolder<TSCECellRef, 1>*)arg1 ;
-(RefTypeHolder<TSCECellRef, 1>)viewCellRefForBaseCellRef:(const RefTypeHolder<TSCECellRef, 0>*)arg1 ;
-(RefTypeHolder<TSCECellRef, 1>)viewCellRefForChromeCellRef:(const RefTypeHolder<TSCECellRef, 2>*)arg1 ;
-(RefTypeHolder<TSCERangeRef, 2>)chromeRangeRefForViewRangeRef:(const RefTypeHolder<TSCERangeRef, 1>*)arg1 ;
-(RefTypeHolder<TSCERangeRef, 1>)viewRangeRefForChromeRangeRef:(const RefTypeHolder<TSCERangeRef, 2>*)arg1 ;
-(id)baseTractRefForChromeTractRef:(id)arg1 ;
-(id)baseShuffleMapForViewShuffleMap:(id)arg1 ;
@end

