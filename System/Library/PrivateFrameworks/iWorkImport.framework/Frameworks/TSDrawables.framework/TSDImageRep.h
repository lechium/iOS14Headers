/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 12:31:27 PM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/Frameworks/TSDrawables.framework/TSDrawables
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSDrawables/TSDrawables-Structs.h>
#import <TSReading/TSDMediaRep.h>
#import <libobjc.A.dylib/CALayerDelegate.h>
#import <TSDrawables/TSDMagicMoveMatching.h>

@protocol OS_dispatch_queue, OS_dispatch_semaphore;
@class TSDLayoutGeometry, CALayer, CAShapeLayer, TSDInstantAlphaTracker, NSRecursiveLock, TSDImageRepSizingState, NSObject, NSCache, NSMutableArray, NSString;

@interface TSDImageRep : TSDMediaRep <CALayerDelegate, TSDMagicMoveMatching> {

	TSDLayoutGeometry* mLastImageGeometryInRoot;
	TSDLayoutGeometry* mLastMaskGeometryInRoot;
	CGAffineTransform mLastLayoutToImageTransform;
	CGRect mFrameInUnscaledCanvasRelativeToSuper;
	BOOL mFrameInUnscaledCanvasIsValid;
	CALayer* mContentsLayer;
	CAShapeLayer* mMaskPathLayer;
	CAShapeLayer* mIAMaskLayer;
	CAShapeLayer* mMaskSublayer;
	CGAffineTransform mLastPictureFrameLayerTransform;
	BOOL mDirectlyManagesLayerContent;
	BOOL mShowImageHighlight;
	BOOL mInInstantAlphaMode;
	TSDInstantAlphaTracker* mInstantAlphaTracker;
	CGImageRef mInstantAlphaImage;
	CGAffineTransform mBaseMaskLayoutTransform;
	NSRecursiveLock* mLayerUpdateAndSizingStateLock;
	TSDImageRepSizingState* mSizingState;
	BOOL mSizingStateReady;
	NSObject*<OS_dispatch_queue> mSizedImageAccessQueue;
	CGImageRef mSizedImage;
	CGSize mSizedImageSize;
	long long mSizedImageOrientation;
	BOOL mSizedImageHasMaskBakedIn;
	BOOL mSizedImageHasAdjustmentsBakedIn;
	CGPathRef mSizedImageMaskPath;
	CGImageRef mCachedSizedImage;
	CGSize mCachedSizedImageSize;
	long long mCachedSizedImageOrientation;
	NSCache* mHitTestCache;
	long long mHitTestCacheOnce;
	NSMutableArray* mUpdateFromLayoutBlocks;
	NSObject*<OS_dispatch_semaphore> mUpdateFromLayoutBlocksLock;
	unsigned long long mImageSizingDisabledCount;

}

@property (nonatomic,readonly) CGImageRef imageRef; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(double)magicMoveAttributeMatchPercentBetweenOutgoingObject:(id)arg1 incomingObject:(id)arg2 ;
+(CGPathRef)p_newPathToBakeIntoSizedImageForSize:(CGSize)arg1 withImageLayout:(id)arg2 orientation:(long long)arg3 ;
-(CGImageRef)imageRef;
-(BOOL)isDraggable;
-(void)highlightImage;
-(void)dealloc;
-(id)contentsLayer;
-(void)willBeRemoved;
-(id)imageInfo;
-(BOOL)containsPoint:(CGPoint)arg1 ;
-(void)viewScaleDidChange;
-(BOOL)shouldShowShadow;
-(BOOL)directlyManagesLayerContent;
-(CGRect)frameInUnscaledCanvas;
-(void)didUpdateLayer:(id)arg1 ;
-(void)processChangedProperty:(int)arg1 ;
-(id)imageLayout;
-(CGRect)targetRectForEditMenu;
-(void)willBeginReadMode;
-(BOOL)handleDoubleTapAtPoint:(CGPoint)arg1 ;
-(void)processChanges:(id)arg1 ;
-(void)i_willEnterForeground;
-(void)wideGamutValueDidChange;
-(void)didCreateLayer:(id)arg1 ;
-(void)willUpdateLayer:(id)arg1 ;
-(void)updateLayerGeometryFromLayout:(id)arg1 ;
-(id)additionalLayersOverLayer;
-(id)overlayLayers;
-(void)drawInLayerContext:(CGContextRef)arg1 ;
-(CGRect)boundsForStandardKnobs;
-(id)hitRepChrome:(CGPoint)arg1 ;
-(void)layoutInRootChangedFrom:(id)arg1 to:(id)arg2 translatedOnly:(BOOL)arg3 ;
-(void)addKnobsToArray:(id)arg1 ;
-(void)updatePositionsOfKnobs:(id)arg1 ;
-(BOOL)shouldCreateSelectionKnobs;
-(CGPoint)positionOfStandardKnob:(id)arg1 forBounds:(CGRect)arg2 ;
-(CGRect)boundsForHighlightLayer;
-(CGAffineTransform)transformForHighlightLayer;
-(BOOL)shouldShowSelectionHighlight;
-(CGPoint)centerForRotation;
-(BOOL)canDrawInParallel;
-(id)initWithLayout:(id)arg1 canvas:(id)arg2 ;
-(void)updateFromLayout;
-(void)addBitmapsToRenderingQualityInfo:(id)arg1 inContext:(CGContextRef)arg2 ;
-(void)becameNotSelected;
-(double)additionalRotationForKnobOrientation;
-(BOOL)shouldIgnoreEditMenuTapAtPoint:(CGPoint)arg1 withRecognizer:(id)arg2 ;
-(id)textureForContext:(id)arg1 ;
-(BOOL)shouldShowDragHUD;
-(int)dragTypeAtCanvasPoint:(CGPoint)arg1 ;
-(BOOL)wantsToDistortWithImagerContext;
-(void)drawInContextWithoutEffects:(CGContextRef)arg1 withContent:(BOOL)arg2 withStroke:(BOOL)arg3 withOpacity:(BOOL)arg4 forAlphaOnly:(BOOL)arg5 drawChildren:(BOOL)arg6 ;
-(id)imageOfStroke:(CGRect*)arg1 ;
-(id)pathSourceForSelectionHighlightBehavior;
-(BOOL)canDrawShadowInOneStepWithChildren:(BOOL)arg1 ;
-(void)p_updateDirectlyManagesLayerContentForLayer:(id)arg1 ;
-(void)p_disposeStrokeLayer;
-(void)p_disposeMaskLayer;
-(id)maskInfo;
-(id)maskLayout;
-(BOOL)p_hitCacheGetCachedValue:(BOOL*)arg1 forPoint:(CGPoint)arg2 ;
-(void)p_drawInContext:(CGContextRef)arg1 withContent:(BOOL)arg2 withStroke:(BOOL)arg3 withOpacity:(double)arg4 withMask:(BOOL)arg5 withIAMask:(BOOL)arg6 forLayer:(BOOL)arg7 forShadow:(BOOL)arg8 forHitTest:(BOOL)arg9 ;
-(void)p_hitCacheSetCachedValue:(BOOL)arg1 forPoint:(CGPoint)arg2 ;
-(void)p_invalidateSizedImage;
-(BOOL)shouldShowSmartMaskKnobs;
-(id)p_validatedBitmapImageProvider;
-(void)p_invalidateSizedImageFromQueue;
-(void)p_invalidateHitTestCache;
-(BOOL)shouldShowMediaReplaceUI;
-(BOOL)shouldAllowReplacementFromPaste;
-(CGImageRef)p_newImageByApplyingAdjustmentsToImage:(CGImageRef)arg1 alreadyEnhanced:(BOOL)arg2 ;
-(id)p_validatedThumbnailImageProvider;
-(id)p_validatedImageProvider;
-(id)p_imageData;
-(CGSize)p_desiredSizedImageSize;
-(void)p_generateSizedImageIfNecessary;
-(void)p_takeSizedImageFromStateIfReady;
-(BOOL)p_directlyManagesContentForLayer:(id)arg1 ;
-(CGImageRef)p_imageForDirectlyManagedLayer:(id)arg1 ;
-(BOOL)p_shouldRenderWithMaskToBounds;
-(void)p_getAliasedValuesForMaskToBoundsDirectLayerFrame:(out CGRect*)arg1 transform:(out CGAffineTransform*)arg2 ;
-(long long)p_orientationForDirectlyManagedLayer;
-(void)p_createMaskLayerForLayer:(id)arg1 ;
-(BOOL)p_shouldBakeMaskIntoSizedImage;
-(void)p_updateStrokeLayerForStroke:(id)arg1 repLayer:(id)arg2 ;
-(BOOL)p_shouldMaskWithFrameLayers;
-(void)p_updateMaskSublayersForMaskEditMode;
-(void)p_updateMaskLayer:(id)arg1 forRepLayer:(id)arg2 shouldIncludeMask:(BOOL)arg3 shouldIncludeInstantAlpha:(BOOL)arg4 ;
-(id)p_imageProvider;
-(BOOL)p_drawsInOneStep;
-(BOOL)p_okayToGenerateSizedImage;
-(void)p_takeSizedImageFromCache;
-(void)p_startSizing;
-(void)p_generateSizedImage:(id)arg1 ;
-(void)p_takeSizedImageFromState;
-(BOOL)p_takeSizedImageFromState:(id)arg1 ;
-(void)unhighlightImage;
-(void)p_canvasSelectionDidChange:(id)arg1 ;
-(void)pushDisableImageSizing;
-(void)popDisableImageSizing;
-(void)cacheImageAtCurrentSize;
-(id)newCachedSizedImage;
-(id)newCachedSizedImageWithNaturalSize;
-(void)useCachedSizedImage:(id)arg1 ;
-(void)generateSizedImageOnBackgroundThread;
-(void)p_popoverViewPresented:(id)arg1 ;
@end

