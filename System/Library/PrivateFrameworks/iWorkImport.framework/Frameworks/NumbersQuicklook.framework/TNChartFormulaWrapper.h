/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 12:27:09 PM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/Frameworks/NumbersQuicklook.framework/NumbersQuicklook
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <NumbersQuicklook/NumbersQuicklook-Structs.h>
@class TSCEFormulaObject, TNChartVectorWrapper, NSArray;

@interface TNChartFormulaWrapper : NSObject {

	TSCEFormulaObject* _formulaObject;
	long long _cachedNumberOfValues;
	TNChartVectorWrapper* _cachedOutputValueVector;
	vector<TSUCellCoord, std::__1::allocator<TSUCellCoord> >* _cachedChromeCoords;
	NSArray* _cachedPlotwiseLabels;
	BOOL _cachedSkipHiddenData;
	BOOL _cachedLabelsByRow;
	BOOL _cachedChromeCoordsRealized;

}

@property (nonatomic,retain,readonly) TSCEFormulaObject * formulaObject; 
+(id)chartFormulaForRangeReference:(TSCERangeRef)arg1 ;
+(id)chartFormulaForTractReference:(id)arg1 ;
+(id)chartFormulaForTractAsRangeReferences:(id)arg1 ;
+(id)chartFormulaForCellRegion:(id)arg1 inTable:(id)arg2 ;
+(id)chartFormulaForString:(id)arg1 ;
+(id)chartFormulaWithFormulaObject:(id)arg1 ;
+(id)emptyChartFormula;
+(id)chartFormulaForCellReference:(TSCECellRef)arg1 ;
-(BOOL)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(id)description;
-(id)argumentCollectionWithCalcEngine:(id)arg1 inChart:(const UUIDData<TSP::UUIDData>*)arg2 ;
-(TSCEFormulaObject *)formulaObject;
-(BOOL)isAllStaticValuesWithCalcEngine:(id)arg1 inOwner:(const UUIDData<TSP::UUIDData>*)arg2 ;
-(unsigned long long)numberOfTotalPlotwiseLabelValuesWithCalcEngine:(id)arg1 inChart:(const UUIDData<TSP::UUIDData>*)arg2 byRow:(BOOL)arg3 shouldSkipHiddenData:(BOOL)arg4 ;
-(id)outputValue:(TSCEEvaluationContext*)arg1 shouldSkipHiddenData:(BOOL)arg2 ;
-(id)plotwiseLabelValuesWithEvaluationContext:(TSCEEvaluationContext*)arg1 byRow:(BOOL)arg2 shouldSkipHiddenData:(BOOL)arg3 ;
-(id)initWithFormulaObject:(id)arg1 ;
-(TSCERangeRef)rangeCircumscribingPrecedentsWithCalcEngine:(id)arg1 inOwner:(const UUIDData<TSP::UUIDData>*)arg2 ;
-(id)stringValueForFormulaWithCalcEngine:(id)arg1 inOwner:(const UUIDData<TSP::UUIDData>*)arg2 ;
-(unsigned long long)numberOfValuesWithCalcEngine:(id)arg1 inChart:(const UUIDData<TSP::UUIDData>*)arg2 ;
-(id)argumentCollectionWithCalcEngine:(id)arg1 inChart:(const UUIDData<TSP::UUIDData>*)arg2 storeBadRef:(BOOL)arg3 ;
-(id)formulaByProcessingArgumentsWithCalcEngine:(id)arg1 inOwner:(const UUIDData<TSP::UUIDData>*)arg2 usingBlock:(/*^block*/id)arg3 ;
-(id)outputValue:(TSCEEvaluationContext*)arg1 shouldSkipHiddenData:(BOOL)arg2 requiresChromeCoords:(BOOL)arg3 ;
-(vector<std::__1::pair<TSCEValue, TSUCellCoord>, std::__1::allocator<std::__1::pair<TSCEValue, TSUCellCoord> > >*)outputVectorValuesWithChromeCoords:(TSCEEvaluationContext*)arg1 shouldSkipHiddenData:(BOOL)arg2 ;
-(BOOL)formulaIsEqualTo:(id)arg1 ;
-(void)clearCacheForCalculationEngine:(id)arg1 ;
-(id)formulaByRewriting:(BOOL)arg1 withCalcEngine:(id)arg2 andHostUID:(const UUIDData<TSP::UUIDData>*)arg3 ;
-(id)formulaByBakingValuesWithCalcEngine:(id)arg1 inOwner:(const UUIDData<TSP::UUIDData>*)arg2 ;
-(id)formulaByTrimmingCategoryLabels:(unsigned long long)arg1 plotByRow:(BOOL)arg2 calcEngine:(id)arg3 inChart:(UUIDData<TSP::UUIDData>*)arg4 ;
@end

