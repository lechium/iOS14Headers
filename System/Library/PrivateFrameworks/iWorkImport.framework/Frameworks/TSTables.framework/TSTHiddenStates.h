/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 12:31:31 PM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/Frameworks/TSTables.framework/TSTables
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSTables/TSTables-Structs.h>
#import <TSTables/TSTTableHiddenRowColumnProviding.h>
#import <TSTables/TSTAdditionalHiddenRowColumnProviding.h>

@class TSTHiddenStateExtent, TSTHiddenStatesOwner, TSTTableFilterSet, NSString;

@interface TSTHiddenStates : NSObject <TSTTableHiddenRowColumnProviding, TSTAdditionalHiddenRowColumnProviding> {

	UUIDData<TSP::UUIDData> _hiddenStatesUid;
	TSTHiddenStateExtent* _rowHiddenStateExtent;
	TSTHiddenStateExtent* _columnHiddenStateExtent;
	TSTHiddenStatesOwner* _hiddenStatesOwner;

}

@property (assign,nonatomic,__weak) TSTHiddenStatesOwner * hiddenStatesOwner;                      //@synthesize hiddenStatesOwner=_hiddenStatesOwner - In the implementation block
@property (nonatomic,retain,readonly) TSTHiddenStateExtent * rowHiddenStateExtent;                 //@synthesize rowHiddenStateExtent=_rowHiddenStateExtent - In the implementation block
@property (nonatomic,retain,readonly) TSTHiddenStateExtent * columnHiddenStateExtent;              //@synthesize columnHiddenStateExtent=_columnHiddenStateExtent - In the implementation block
@property (assign,nonatomic) UUIDData<TSP::UUIDData> hiddenStatesUid;                              //@synthesize hiddenStatesUid=_hiddenStatesUid - In the implementation block
@property (nonatomic,readonly) BOOL hasHiddenRows; 
@property (nonatomic,readonly) BOOL hasHiddenColumns; 
@property (nonatomic,readonly) BOOL hasUserHiddenRows; 
@property (nonatomic,readonly) BOOL hasUserHiddenColumns; 
@property (nonatomic,readonly) BOOL hasCollapsedRows; 
@property (nonatomic,readonly) unsigned numberOfHiddenRows; 
@property (nonatomic,readonly) unsigned numberOfHiddenColumns; 
@property (nonatomic,readonly) unsigned numberOfUserHiddenRows; 
@property (nonatomic,readonly) unsigned numberOfUserHiddenColumns; 
@property (assign,nonatomic) UUIDData<TSP::UUIDData> hiddenStateOwnerForRowsUID; 
@property (assign,nonatomic) UUIDData<TSP::UUIDData> hiddenStateOwnerForColumnsUID; 
@property (nonatomic,retain) TSTTableFilterSet * filterSet; 
@property (assign,nonatomic) BOOL needsFilterFormulaRewriteForImport; 
@property (assign,nonatomic) BOOL needsToUpdateFilterSetForImport; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(TSUCellCoord)filterFormulaCoordinateForRow:(unsigned)arg1 ;
+(TSUCellCoord)filterFormulaThresholdCoordinateForRow:(unsigned)arg1 ;
+(TSUCellCoord)filterFormulaCoordinate;
+(id)mutableIndexSetByIntersecting:(id)arg1 withRange:(NSRange)arg2 ;
-(unsigned)numberOfHiddenRows;
-(unsigned)numberOfHiddenColumns;
-(unsigned)numberOfUserHiddenRows;
-(unsigned)numberOfUserHiddenColumns;
-(void)setTableInfo:(id)arg1 ;
-(void)encodeToArchive:(HiddenStatesArchive*)arg1 archiver:(id)arg2 ;
-(id)indexesOfVisibleRowsInRowRange:(id)arg1 ;
-(TSCERangeRef)referenceToHiddenStateFromRow:(unsigned)arg1 toRow:(unsigned)arg2 ;
-(TSCERangeRef)referenceToHiddenStateFromColumn:(unsigned short)arg1 toColumn:(unsigned short)arg2 ;
-(void)unregisterFromCalcEngine;
-(unsigned)indexOfVisibleRowAfterAndIncludingRowAtIndex:(unsigned)arg1 ;
-(unsigned)indexOfVisibleRowBeforeAndIncludingRowAtIndex:(unsigned)arg1 ;
-(id)indexesOfVisibleColumnsInCellRange:(TSUCellRect)arg1 ;
-(unsigned short)indexOfVisibleColumnAfterAndIncludingColumnAtIndex:(unsigned short)arg1 ;
-(unsigned short)indexOfVisibleColumnBeforeAndIncludingColumnAtIndex:(unsigned short)arg1 ;
-(id)indexesOfUserHiddenRowsInCellRange:(TSUCellRect)arg1 ;
-(BOOL)showRowAtIndex:(unsigned)arg1 forAction:(unsigned char)arg2 ;
-(id)indexesOfHiddenColumnsInCellRange:(TSUCellRect)arg1 ;
-(BOOL)showColumnAtIndex:(unsigned short)arg1 forAction:(unsigned char)arg2 ;
-(BOOL)hasHiddenRows;
-(id)mutableFilteredRowIndexes;
-(BOOL)hasHiddenColumns;
-(TSTHiddenStatesOwner *)hiddenStatesOwner;
-(UUIDData<TSP::UUIDData>)hiddenStateOwnerForRowsUID;
-(UUIDData<TSP::UUIDData>)hiddenStateOwnerForColumnsUID;
-(void)insertNewRowsInBaseRange:(NSRange)arg1 ;
-(BOOL)showBaseRowAtIndex:(TSUModelRowIndex)arg1 forAction:(unsigned char)arg2 ;
-(BOOL)hideBaseRowAtIndex:(TSUModelRowIndex)arg1 forAction:(unsigned char)arg2 ;
-(void)insertNewColumnsInBaseRange:(NSRange)arg1 ;
-(BOOL)hideBaseColumnAtIndex:(TSUModelColumnIndex)arg1 forAction:(unsigned char)arg2 ;
-(void)deleteRowsFromBaseRange:(NSRange)arg1 rowUids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 ;
-(void)deleteColumnsFromBaseRange:(NSRange)arg1 columnUids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 ;
-(void)moveBaseRowRange:(NSRange)arg1 toRowIndex:(TSUModelRowIndex)arg2 ;
-(void)moveBaseColumnRange:(NSRange)arg1 toColumnIndex:(TSUModelColumnIndex)arg2 ;
-(void)swapBaseRowAtIndex:(TSUModelRowIndex)arg1 withRowAtIndex:(TSUModelRowIndex)arg2 ;
-(BOOL)hideRowAtIndex:(unsigned)arg1 forAction:(unsigned char)arg2 ;
-(BOOL)hideColumnAtIndex:(unsigned short)arg1 forAction:(unsigned char)arg2 ;
-(BOOL)needsToUpdateFilterSetForImport;
-(void)setFormulaOwnerUIDsWithMap:(id)arg1 ;
-(void)remapTableUIDsInFormulasWithMap:(const UUIDMap<TSP::UUIDMap>*)arg1 calcEngine:(id)arg2 ;
-(id)initWithHiddenStatesOwner:(id)arg1 ;
-(UUIDData<TSP::UUIDData>)hiddenStatesUid;
-(void)copyFromHiddenStates:(id)arg1 forRange:(TSUCellRect)arg2 withContext:(id)arg3 isWholeTableCopy:(BOOL)arg4 ;
-(BOOL)hasActiveFilters;
-(TSTTableFilterSet *)filterSet;
-(int)registerWithCalcEngine:(id)arg1 baseOwnerUID:(const UUIDData<TSP::UUIDData>*)arg2 ;
-(void)filterSetUpdated;
-(void)setFilterSet:(TSTTableFilterSet *)arg1 ;
-(id)duplicateFilterSetInUidFormWithTable:(id)arg1 ;
-(void)setFilterSetType:(int)arg1 ;
-(void)dirtyFilterState;
-(BOOL)hasFilterRulesWithTable:(id)arg1 inBaseColumns:(id)arg2 ;
-(unsigned short)indexOfVisibleColumnBeforeColumnAtIndex:(unsigned short)arg1 ;
-(unsigned short)indexOfVisibleColumnAfterColumnAtIndex:(unsigned short)arg1 ;
-(unsigned)indexOfVisibleRowBeforeRowAtIndex:(unsigned)arg1 ;
-(unsigned)indexOfVisibleRowAfterRowAtIndex:(unsigned)arg1 ;
-(TSTHiddenStateExtent *)rowHiddenStateExtent;
-(BOOL)hasUserHiddenRows;
-(BOOL)hasUserHiddenColumns;
-(unsigned)numberOfHiddenRowsInCellRange:(TSUCellRect)arg1 ;
-(unsigned)numberOfUserHiddenRowsInCellRange:(TSUCellRect)arg1 ;
-(unsigned)numberOfHiddenColumnsInCellRange:(TSUCellRect)arg1 ;
-(BOOL)hasHiddenRowAtIndex:(unsigned)arg1 forAction:(unsigned char)arg2 ;
-(BOOL)hasHiddenColumnAtIndex:(unsigned short)arg1 forAction:(unsigned char)arg2 ;
-(id)indexesOfUserHiddenColumnsInCellRange:(TSUCellRect)arg1 ;
-(id)indexesOfVisibleColumnsInCellRegion:(id)arg1 ;
-(id)indexesOfVisibleColumnsInColumnRange:(id)arg1 ;
-(id)indexesOfHiddenRowsInCellRange:(TSUCellRect)arg1 ;
-(id)indexesOfFilteredRowsInCellRange:(TSUCellRect)arg1 ;
-(id)indexesOfVisibleRowsInCellRange:(TSUCellRect)arg1 ;
-(id)indexesOfVisibleRowsInCellRegion:(id)arg1 ;
-(id)indexesOfUserVisibleRowsInCellRange:(TSUCellRect)arg1 ;
-(id)indexesOfCollapsedRowsInCellRange:(TSUCellRect)arg1 ;
-(unsigned char)hidingActionForRowAtIndex:(unsigned)arg1 ;
-(unsigned char)hidingActionForColumnAtIndex:(unsigned short)arg1 ;
-(BOOL)anyHiddenRowsInCellRange:(TSUCellRect)arg1 forAction:(unsigned char)arg2 ;
-(BOOL)hasHiddenRowAtIndex:(unsigned)arg1 ;
-(BOOL)hasHiddenColumnAtIndex:(unsigned short)arg1 ;
-(BOOL)anyHiddenRowsInCellRange:(TSUCellRect)arg1 ;
-(BOOL)anyHiddenColumnsInCellRange:(TSUCellRect)arg1 ;
-(id)applyCollapseExpandState:(id)arg1 outUndoState:(id*)arg2 ;
-(void)willChangeGroupByTo:(id)arg1 ;
-(id)collapseSummaryGroupUIDs:(id)arg1 ;
-(id)expandSummaryGroupUIDs:(id)arg1 ;
-(BOOL)isCategoryGroupOrParentsCollapsed:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(void)setHiddenStatesUid:(UUIDData<TSP::UUIDData>)arg1 ;
-(void)setHiddenStateOwnerForColumnsUID:(UUIDData<TSP::UUIDData>)arg1 ;
-(void)setHiddenStateOwnerForRowsUID:(UUIDData<TSP::UUIDData>)arg1 ;
-(void)setNeedsToUpdateFilterSetForImport:(BOOL)arg1 ;
-(id)duplicateFilterSet;
-(BOOL)needsFilterFormulaRewriteForImport;
-(void)setNeedsFilterFormulaRewriteForImport:(BOOL)arg1 ;
-(void)enableFilterSet:(BOOL)arg1 ;
-(id)mutableAnyHiddenColumnIndexes;
-(id)mutableAnyHiddenRowIndexes;
-(void)loadIndexesFromTable:(id)arg1 ;
-(TSTHiddenStateExtent *)columnHiddenStateExtent;
-(id)initWithArchive:(const HiddenStatesArchive*)arg1 unarchiver:(id)arg2 forHiddenStatesOwner:(id)arg3 ;
-(id)initWithHiddenStatesOwner:(id)arg1 hiddenStatesUid:(const UUIDData<TSP::UUIDData>*)arg2 ;
-(void)syncUpHiddenStateFormulaOwnerUIDs;
-(BOOL)isCategoryGroupUIDCollapsed:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(void)setCategoryGroupUID:(const UUIDData<TSP::UUIDData>*)arg1 asCollapsed:(BOOL)arg2 ;
-(id)collapsedGroupUids;
-(id)copyCollapsedStateToUpdatedGroupUids:(id)arg1 ;
-(id)runChange:(id)arg1 withCollapsedState:(id)arg2 outUndoState:(id*)arg3 ;
-(void)mutateFormulaFiltersWithTable:(id)arg1 usingBlock:(/*^block*/id)arg2 ;
-(void)dirtyFilterStateForHeaders;
-(void)dirtyFilterStateForFooters;
-(BOOL)showBaseColumnAtIndex:(TSUModelColumnIndex)arg1 forAction:(unsigned char)arg2 ;
-(unsigned char)hidingActionForBaseRowAtIndex:(TSUModelRowIndex)arg1 ;
-(unsigned char)hidingActionForBaseColumnAtIndex:(TSUModelColumnIndex)arg1 ;
-(TSUModelColumnIndex)numberOfHiddenColumnsInBaseCellRange:(TSUModelCellRect)arg1 ;
-(id)indexesOfHiddenColumnsInBaseCellRange:(TSUModelCellRect)arg1 ;
-(TSUModelRowIndex)numberOfHiddenRowsInBaseCellRange:(TSUModelCellRect)arg1 ;
-(TSUModelRowIndex)numberOfUserHiddenRowsInBaseCellRange:(TSUModelCellRect)arg1 ;
-(id)indexesOfHiddenRowsInBaseCellRange:(TSUModelCellRect)arg1 ;
-(BOOL)hasCollapsedRows;
-(void)moveViewColumnRange:(NSRange)arg1 toColumnIndex:(TSUViewColumnIndex)arg2 ;
-(id)mutableUserHiddenRowIndexes;
-(id)mutableUserHiddenColumnIndexes;
-(void)setHiddenStatesOwner:(TSTHiddenStatesOwner *)arg1 ;
@end

