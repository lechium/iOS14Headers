/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 12:31:30 PM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/Frameworks/TSTables.framework/TSTables
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSTables/TSTables-Structs.h>
#import <libobjc.A.dylib/NSCopying.h>

@class TSCECalculationEngine, TSCECellTractRef, TSTColumnRowUIDMapper;

@interface TSTUIDRectRef : NSObject <NSCopying> {

	TSCECalculationEngine* _calcEngine;
	UUIDRect<TSP::UUIDRect>* _uidRange;
	TSCECellTractRef* _lastKnownViewTractRef;
	unsigned long long _viewMapVersionCounter;
	BOOL _needsUidRectUpgrade;
	TSTColumnRowUIDMapper* _viewUidMapper;
	unsigned char _basePreserveFlags;
	UUIDData<TSP::UUIDData> _tableUID;
	RefTypeHolder<TSCERangeRef, 2> _chromeRangeRef;

}

@property (assign,nonatomic,__weak) TSCECalculationEngine * calcEngine;                        //@synthesize calcEngine=_calcEngine - In the implementation block
@property (assign,nonatomic) unsigned char basePreserveFlags;                                  //@synthesize basePreserveFlags=_basePreserveFlags - In the implementation block
@property (assign,nonatomic) unsigned char viewPreserveFlags; 
@property (nonatomic,readonly) BOOL isValid; 
@property (nonatomic,readonly) UUIDRect<TSP::UUIDRect> uidRange; 
@property (nonatomic,readonly) UUIDData<TSP::UUIDData> tableUID;                               //@synthesize tableUID=_tableUID - In the implementation block
@property (nonatomic,readonly) UUIDData<TSP::UUIDData> singleReferencedColumnUid; 
@property (readonly) TSUViewCellCoord viewTopLeftCoord; 
@property (readonly) TSUViewCellCoord viewBottomRightCoord; 
@property (readonly) TSUModelCellCoord baseTopLeftCoord; 
@property (readonly) TSUModelCellCoord baseBottomRightCoord; 
@property (assign,nonatomic) BOOL needsUidRectUpgrade;                                         //@synthesize needsUidRectUpgrade=_needsUidRectUpgrade - In the implementation block
@property (nonatomic,readonly) unsigned long long area; 
@property (nonatomic,readonly) unsigned long long numberOfColumns; 
@property (nonatomic,readonly) unsigned long long numberOfRows; 
@property (assign,nonatomic) RefTypeHolder<TSCERangeRef chromeRangeRef;                        //@synthesize chromeRangeRef=_chromeRangeRef - In the implementation block
@property (nonatomic,readonly) BOOL isEmpty; 
@property (nonatomic,readonly) BOOL isViewRectangle; 
@property (nonatomic,readonly) BOOL isBaseRectangle; 
@property (nonatomic,readonly) BOOL spansAllColumns; 
@property (nonatomic,readonly) BOOL spansAllRows; 
-(unsigned long long)numberOfRows;
-(id)copyWithZone:(NSZone*)arg1 ;
-(unsigned long long)numberOfColumns;
-(unsigned long long)area;
-(id)tableModel;
-(BOOL)isEqual:(id)arg1 ;
-(BOOL)isValid;
-(BOOL)isEmpty;
-(unsigned long long)hash;
-(id)description;
-(id)tableInfo;
-(UUIDData<TSP::UUIDData>)tableUID;
-(BOOL)spansAllRows;
-(TSCECalculationEngine *)calcEngine;
-(BOOL)spansAllColumns;
-(void)setCalcEngine:(TSCECalculationEngine *)arg1 ;
-(unsigned char)basePreserveFlags;
-(void)setBaseRangeRef:(const RefTypeHolder<TSCERangeRef, 0>*)arg1 preserveFlags:(unsigned char)arg2 ;
-(id)grabViewUidMapper;
-(void)setViewRangeRef:(const RefTypeHolder<TSCERangeRef, 1>*)arg1 preserveFlags:(unsigned char)arg2 ;
-(void)setChromeRangeRef:(const RefTypeHolder<TSCERangeRef, 2>*)arg1 preserveFlags:(unsigned char)arg2 ;
-(void)convertUIDRefToViewTractRef;
-(void)convertViewTractRefToUID;
-(id)viewTractRef;
-(id)initWithCalcEngine:(id)arg1 viewTractRef:(id)arg2 ;
-(id)initWithCalcEngine:(id)arg1 tableUID:(const UUIDData<TSP::UUIDData>*)arg2 uidRange:(const UUIDRect<TSP::UUIDRect>*)arg3 preserveFlags:(unsigned char)arg4 ;
-(UUIDRect<TSP::UUIDRect>)uidRange;
-(vector<RefTypeHolder<TSCERangeRef, 1>, std::__1::allocator<RefTypeHolder<TSCERangeRef, 1> > >*)viewRangeRefs;
-(vector<RefTypeHolder<TSCERangeRef, 0>, std::__1::allocator<RefTypeHolder<TSCERangeRef, 0> > >*)baseRangeRefs;
-(BOOL)baseToViewPreserveFlagsAreInverted;
-(void)setViewPreserveFlags:(unsigned char)arg1 ;
-(unsigned char)viewPreserveFlags;
-(id)initWithCalcEngine:(id)arg1 viewRangeRef:(const RefTypeHolder<TSCERangeRef, 1>*)arg2 preserveFlags:(unsigned char)arg3 ;
-(id)initWithCalcEngine:(id)arg1 chromeRangeRef:(const RefTypeHolder<TSCERangeRef, 2>*)arg2 preserveFlags:(unsigned char)arg3 ;
-(id)initWithCalcEngine:(id)arg1 baseRangeRef:(const RefTypeHolder<TSCERangeRef, 0>*)arg2 preserveFlags:(unsigned char)arg3 ;
-(BOOL)isViewRectangle;
-(BOOL)isBaseRectangle;
-(RefTypeHolder<TSCERangeRef, 0>)baseRangeRef;
-(RefTypeHolder<TSCERangeRef, 1>)viewRangeRef;
-(id)baseTractRef;
-(id)chromeTractRef;
-(id)viewTractRefIfFullyValid;
-(TSUViewCellCoord)viewTopLeftCoord;
-(TSUViewCellCoord)viewBottomRightCoord;
-(TSUModelCellCoord)baseTopLeftCoord;
-(TSUModelCellCoord)baseBottomRightCoord;
-(id)viewCellRegionWithRangeContext:(unsigned char)arg1 ;
-(BOOL)isValidReference;
-(id)includeUidTractList;
-(UUIDData<TSP::UUIDData>)singleReferencedColumnUid;
-(void)setBasePreserveFlags:(unsigned char)arg1 ;
-(BOOL)needsUidRectUpgrade;
-(void)setNeedsUidRectUpgrade:(BOOL)arg1 ;
-(RefTypeHolder<TSCERangeRef)chromeRangeRef;
-(void)setChromeRangeRef:(RefTypeHolder<TSCERangeRef)arg1 ;
@end

