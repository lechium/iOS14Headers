/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 12:31:30 PM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/Frameworks/TSTables.framework/TSTables
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSTables/TSTables-Structs.h>
#import <TSTables/TSCERefNamingProtocol.h>

@class TSCECalculationEngine, NSCharacterSet, NSString;

@interface TSTRefNamer : NSObject <TSCERefNamingProtocol> {

	TSCECalculationEngine* _calcEngine;
	NSCharacterSet* _whitespaceAndNewlineCharSet;
	NSCharacterSet* _nonWhitespaceAndNewlineCharSet;

}

@property (nonatomic,retain) NSCharacterSet * whitespaceAndNewlineCharSet;                 //@synthesize whitespaceAndNewlineCharSet=_whitespaceAndNewlineCharSet - In the implementation block
@property (nonatomic,retain) NSCharacterSet * nonWhitespaceAndNewlineCharSet;              //@synthesize nonWhitespaceAndNewlineCharSet=_nonWhitespaceAndNewlineCharSet - In the implementation block
@property (nonatomic,__weak,readonly) TSCECalculationEngine * calcEngine;                  //@synthesize calcEngine=_calcEngine - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(TSCECalculationEngine *)calcEngine;
-(id)initWithCalcEngine:(id)arg1 ;
-(id)chromeNameForBaseRangeRef:(const RefTypeHolder<TSCERangeRef, 0>*)arg1 namingContext:(id)arg2 ;
-(id)nameForBaseTractRef:(id)arg1 namingContext:(id)arg2 ;
-(id)nameForChromeRangeRef:(const RefTypeHolder<TSCERangeRef, 2>*)arg1 namingContext:(id)arg2 ;
-(id)nameForChromeColumnIndex:(const TSUChromeColumnIndex*)arg1 inTable:(const UUIDData<TSP::UUIDData>*)arg2 useSymbolicNames:(BOOL)arg3 ;
-(id)cellRangeNameFromChromeRangeRef:(const RefTypeHolder<TSCERangeRef, 2>*)arg1 namingContext:(id)arg2 ;
-(id)stringForRangeRefPair:(id)arg1 namingContext:(id)arg2 ;
-(id)nameForBaseRangeRef:(const RefTypeHolder<TSCERangeRef, 0>*)arg1 namingContext:(id)arg2 ;
-(id)cellRangeName:(id)arg1 namingContext:(id)arg2 ;
-(id)stringValueAtCellCoord:(const TSUModelCellCoord*)arg1 inTableModel:(id)arg2 ;
-(id)p_columnNameForBaseCellCoord:(const TSUModelCellCoord*)arg1 inTableModel:(id)arg2 cellRangeContainingName:(TSUModelCellRect*)arg3 ;
-(id)createNameComponentWithChromeRangeRef:(const RefTypeHolder<TSCERangeRef, 2>*)arg1 rowOrColumnName:(id)arg2 isSticky:(BOOL)arg3 namingContext:(id)arg4 ;
-(id)p_rowNameForBaseCellCoord:(const TSUModelCellCoord*)arg1 inTableModel:(id)arg2 cellRangeContainingName:(TSUModelCellRect*)arg3 ;
-(id)p_symbolicColumnNameForRefPair:(id)arg1 useTopLeft:(BOOL)arg2 isSticky:(BOOL)arg3 foundRange:(TSUModelCellRect*)arg4 inTableModel:(id)arg5 namingContext:(id)arg6 ;
-(id)p_symbolicRowNameForRefPair:(id)arg1 useTopLeft:(BOOL)arg2 isSticky:(BOOL)arg3 foundRange:(TSUModelCellRect*)arg4 inTableModel:(id)arg5 namingContext:(id)arg6 ;
-(id)nameForViewTractRef:(id)arg1 namingContext:(id)arg2 coordMapper:(id)arg3 ;
-(id)nameForWrappedRangeRef:(id)arg1 namingContext:(id)arg2 ;
-(NSCharacterSet *)whitespaceAndNewlineCharSet;
-(void)setWhitespaceAndNewlineCharSet:(NSCharacterSet *)arg1 ;
-(NSCharacterSet *)nonWhitespaceAndNewlineCharSet;
-(void)setNonWhitespaceAndNewlineCharSet:(NSCharacterSet *)arg1 ;
@end

