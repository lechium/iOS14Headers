/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 12:31:30 PM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/Frameworks/TSTables.framework/TSTables
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSTables/TSTables-Structs.h>
#import <TSReading/TSPObject.h>
#import <TSTables/TSCEColumnRowUIDMapping.h>

@class TSTColumnRowUIDMapper;

@interface TSTColumnRowUIDMap : TSPObject <TSCEColumnRowUIDMapping> {

	vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >* _columnUidForIndex;
	vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >* _rowUidForIndex;
	unordered_map<TSU::UUIDData<TSP::UUIDData>, unsigned short, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, unsigned short> > >* _columnIndexForUid;
	unordered_map<TSU::UUIDData<TSP::UUIDData>, unsigned int, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, unsigned int> > >* _rowIndexForUid;
	unsigned long long _versionCounter;
	TSTColumnRowUIDMapper* _copyOnWriteUIDMapper;

}

@property (nonatomic,readonly) unsigned short numberOfColumns; 
@property (nonatomic,readonly) unsigned numberOfRows; 
@property (nonatomic,readonly) unsigned long long versionCounter;              //@synthesize versionCounter=_versionCounter - In the implementation block
-(unsigned)numberOfRows;
-(TSUCellRect)range;
-(void)reset;
-(unsigned short)numberOfColumns;
-(id)copyWithContext:(id)arg1 ;
-(BOOL)isEmpty;
-(id)initWithContext:(id)arg1 ;
-(void)removeRowsAtIndexes:(id)arg1 ;
-(void)loadFromUnarchiver:(id)arg1 ;
-(void)saveToArchiver:(id)arg1 ;
-(UUIDData<TSP::UUIDData>)columnUIDForColumnIndex:(unsigned short)arg1 ;
-(UUIDData<TSP::UUIDData>)rowUIDForRowIndex:(unsigned)arg1 ;
-(TSTCellUID)cellUIDForCellID:(const TSUCellCoord*)arg1 ;
-(unsigned)rowIndexForRowUID:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(id)mutableColumnIndexesForUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(id)mutableRowIndexesForUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(unsigned short)columnIndexForColumnUID:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)columnUIDsForColumnIndexes:(id)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)rowUIDsForRowIndexes:(id)arg1 ;
-(id)UIDSetForIndexes:(id)arg1 isRows:(BOOL)arg2 ;
-(TSCERangeCoordinate)tableRangeCoordinate;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)rowUIDsForRowRange:(NSRange)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)columnUIDsForColumnRange:(NSRange)arg1 ;
-(TSUCellCoord)cellIDForCellUID:(const TSTCellUID*)arg1 ;
-(unsigned long long)versionCounter;
-(id)initWithContext:(id)arg1 columnUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 rowUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg3 ;
-(id)initWithContext:(id)arg1 tableUUID:(id)arg2 numberOfRows:(unsigned)arg3 numberOfColumns:(unsigned)arg4 ;
-(void)insertNewRowsInIndexRange:(NSRange)arg1 ;
-(void)insertNewColumnsInIndexRange:(NSRange)arg1 ;
-(void)insertRowsWithUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 atIndex:(unsigned)arg2 ;
-(void)insertColumnsWithUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 atIndex:(unsigned short)arg2 ;
-(void)removeColumnsAtIndexes:(id)arg1 ;
-(void)moveRowIndexRange:(NSRange)arg1 toIndex:(unsigned)arg2 ;
-(void)moveColumnIndexRange:(NSRange)arg1 toIndex:(unsigned short)arg2 ;
-(void)swapRowAtIndex:(unsigned)arg1 withRowAtIndex:(unsigned)arg2 ;
-(void)assertCollaborationConvergence;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)columnUIDs;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)rowUIDs;
-(BOOL)writeCellIDsInCellUIDList:(id)arg1 toVector:(vector<TSUCellCoord, std::__1::allocator<TSUCellCoord> >*)arg2 prunedCellUIDs:(vector<TSTCellUID, std::__1::allocator<TSTCellUID> >*)arg3 ;
-(void)convertCellUIDLookupList:(id)arg1 toCellRangeVector:(vector<TSUCellRect, std::__1::allocator<TSUCellRect> >*)arg2 prunedSummaryCellUIDs:(vector<TSTCellUID, std::__1::allocator<TSTCellUID> >*)arg3 ;
-(id)rowIndexesForUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(id)columnIndexesForUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)prunedColumnUIDsFromColumnUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)prunedRowUIDsFromRowUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(id)mutableIndexesForUIDSet:(id)arg1 isRows:(BOOL)arg2 ;
-(id)mutableIndexesForUIDSet:(id)arg1 isRows:(BOOL)arg2 notFoundUIDs:(id)arg3 ;
-(NSRange)rowRangeForUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(NSRange)columnRangeForUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(TSUCellRect)cellRangeForUIDRange:(const UUIDRect<TSP::UUIDRect>*)arg1 ;
-(UUIDRect<TSP::UUIDRect>*)cellUIDRangeForCellRange:(TSUCellRect)arg1 ;
-(id)cellRegionForUIDRange:(const UUIDRect<TSP::UUIDRect>*)arg1 ;
-(id)cellTractRefForUIDRectRef:(id)arg1 ;
-(id)copyOnWriteUIDMapper;
-(BOOL)_checkStructure;
-(id)p_mutableRowIndexesForUIDSet:(id)arg1 notFoundUIDs:(id)arg2 ;
-(id)p_mutableColumnIndexesForUIDSet:(id)arg1 notFoundUIDs:(id)arg2 ;
-(void)incrementVersionCounter;
-(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)allOrderedRowUIDs;
-(void)replaceRowsWithUids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(void)replaceColumnsWithUids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(void)applyMap:(const UUIDMap<TSP::UUIDMap>*)arg1 toRows:(BOOL)arg2 ;
@end

