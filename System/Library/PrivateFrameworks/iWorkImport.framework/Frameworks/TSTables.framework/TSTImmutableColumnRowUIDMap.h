/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 12:31:30 PM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/Frameworks/TSTables.framework/TSTables
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSTables/TSTables-Structs.h>
#import <TSTables/TSCEColumnRowUIDMapping.h>

@class TSTColumnRowUIDMap;

@interface TSTImmutableColumnRowUIDMap : NSObject <TSCEColumnRowUIDMapping> {

	TSTColumnRowUIDMap* _originalMap;

}

@property (nonatomic,readonly) unsigned short numberOfColumns; 
@property (nonatomic,readonly) unsigned numberOfRows; 
@property (nonatomic,readonly) unsigned long long versionCounter; 
-(unsigned)numberOfRows;
-(TSUCellRect)range;
-(unsigned short)numberOfColumns;
-(UUIDData<TSP::UUIDData>)columnUIDForColumnIndex:(unsigned short)arg1 ;
-(UUIDData<TSP::UUIDData>)rowUIDForRowIndex:(unsigned)arg1 ;
-(unsigned)rowIndexForRowUID:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(id)mutableColumnIndexesForUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(id)mutableRowIndexesForUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(unsigned short)columnIndexForColumnUID:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)columnUIDsForColumnIndexes:(id)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)rowUIDsForRowIndexes:(id)arg1 ;
-(id)UIDSetForIndexes:(id)arg1 isRows:(BOOL)arg2 ;
-(TSCERangeCoordinate)tableRangeCoordinate;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)rowUIDsForRowRange:(NSRange)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)columnUIDsForColumnRange:(NSRange)arg1 ;
-(unsigned long long)versionCounter;
-(void)assertCollaborationConvergence;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)columnUIDs;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)rowUIDs;
-(id)rowIndexesForUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(id)columnIndexesForUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)prunedColumnUIDsFromColumnUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)prunedRowUIDsFromRowUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(id)mutableIndexesForUIDSet:(id)arg1 isRows:(BOOL)arg2 ;
-(id)mutableIndexesForUIDSet:(id)arg1 isRows:(BOOL)arg2 notFoundUIDs:(id)arg3 ;
-(NSRange)rowRangeForUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(NSRange)columnRangeForUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(TSUCellRect)cellRangeForUIDRange:(const UUIDRect<TSP::UUIDRect>*)arg1 ;
-(UUIDRect<TSP::UUIDRect>*)cellUIDRangeForCellRange:(TSUCellRect)arg1 ;
-(id)initWithColumnRowUIDMap:(id)arg1 ;
@end

