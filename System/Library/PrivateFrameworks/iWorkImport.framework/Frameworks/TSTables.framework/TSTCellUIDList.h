/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 12:31:31 PM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/Frameworks/TSTables.framework/TSTables
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSTables/TSTables-Structs.h>
#import <libobjc.A.dylib/NSCopying.h>

@protocol OS_dispatch_queue;
@class TSTCellUIDLookupListWrapper, NSObject;

@interface TSTCellUIDList : NSObject <NSCopying> {

	vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >* _rowIdList;
	vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >* _columnIdList;
	vector<int, std::__1::allocator<int> >* _rowUIDIndexList;
	vector<int, std::__1::allocator<int> >* _columnUIDIndexList;
	TSTCellUIDLookupListWrapper* _uncompressedCellUIDs;
	unsigned long long _compressedSize;
	NSObject*<OS_dispatch_queue> _queue;

}

@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> queue;              //@synthesize queue=_queue - In the implementation block
@property (nonatomic,readonly) unsigned long long compressedSize;               //@synthesize compressedSize=_compressedSize - In the implementation block
+(id)cellUIDList;
+(id)cellUIDListFromRange:(const UUIDRect<TSP::UUIDRect>*)arg1 ;
-(id)copyWithZone:(NSZone*)arg1 ;
-(void)compress;
-(unsigned long long)compressedSize;
-(id)init;
-(NSObject*<OS_dispatch_queue>)queue;
-(unsigned long long)count;
-(id)iterator;
-(void)saveToMessage:(CellUIDListArchive*)arg1 archiver:(id)arg2 ;
-(id)initFromMessage:(const CellUIDListArchive*)arg1 unarchiver:(id)arg2 ;
-(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)columnUIDs;
-(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)rowUIDs;
-(void)enumerateCellUIDsUsingBlock:(/*^block*/id)arg1 ;
-(id)uncompressedCellUIDs;
-(void)addCellUID:(const TSTCellUID*)arg1 ;
-(void)reserve:(unsigned long long)arg1 ;
-(void)addCellUIDs:(vector<TSTCellUID, std::__1::allocator<TSTCellUID> >*)arg1 ;
-(void)addCellRegion:(id)arg1 withColumnUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 rowUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg3 ;
-(void)p_compressUID:(const UUIDData<TSP::UUIDData>*)arg1 index:(unsigned long long)arg2 UIDtoIndexMap:(map<TSU::UUIDData<TSP::UUIDData>, unsigned long, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, unsigned long> > >*)arg3 UIDs:(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg4 compressedIndexes:(vector<int, std::__1::allocator<int> >*)arg5 lastSameUIDIndex:(vector<unsigned long, std::__1::allocator<unsigned long> >*)arg6 ;
-(void)compressUIDIndexListFrom:(const vector<int, std::__1::allocator<int> >*)arg1 withUIDCount:(unsigned long long)arg2 to:(vector<int, std::__1::allocator<int> >*)arg3 ;
-(id)pruneCellUIDListAgainstTable:(id)arg1 behavior:(unsigned long long)arg2 usingBlock:(/*^block*/id)arg3 ;
-(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)compressedRowUIDs;
-(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)compressedColumnUIDs;
-(const vector<int, std::__1::allocator<int> >*)compressedRowIndexes;
-(const vector<int, std::__1::allocator<int> >*)compressedColumnIndexes;
-(void)setCompressedColumnIndexes:(const vector<int, std::__1::allocator<int> >*)arg1 ;
-(unsigned long long)computeValidCount;
-(void)addCellUIDRanges:(const UUIDRect<TSP::UUIDRect>*)arg1 ;
-(id)pruneCellUIDListAgainstTable:(id)arg1 behavior:(unsigned long long)arg2 ;
@end

