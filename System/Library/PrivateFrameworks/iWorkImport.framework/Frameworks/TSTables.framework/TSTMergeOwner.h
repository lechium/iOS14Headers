/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 12:31:31 PM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/Frameworks/TSTables.framework/TSTables
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSTables/TSTables-Structs.h>
#import <TSTables/TSCEFormulaOwning.h>

@class TSTFormulaStore, TSTMergeRangeCache, TSTTableModel, TSCECalculationEngine, TSTMergeChangeDistributor, NSString;

@interface TSTMergeOwner : NSObject <TSCEFormulaOwning> {

	unordered_map<TSUModelCellCoord, TSUModelCellCoord, std::__1::hash<TSUModelCellCoord>, std::__1::equal_to<TSUModelCellCoord>, std::__1::allocator<std::__1::pair<const TSUModelCellCoord, TSUModelCellCoord> > >* _mergeOriginsMap;
	unordered_map<TSUModelCellCoord, TSUModelCellCoord, std::__1::hash<TSUModelCellCoord>, std::__1::equal_to<TSUModelCellCoord>, std::__1::allocator<std::__1::pair<const TSUModelCellCoord, TSUModelCellCoord> > >* _reverseOriginsMap;
	BOOL _needsMergeCacheLoad;
	TSTFormulaStore* _formulaStore;
	TSTMergeRangeCache* _mergeRangeCache;
	TSTTableModel* _tableModel;
	TSCECalculationEngine* _calculationEngine;
	TSTMergeChangeDistributor* _mergeChangeDistributor;
	UUIDData<TSP::UUIDData> _ownerUID;

}

@property (nonatomic,retain) TSTMergeRangeCache * mergeRangeCache;                                    //@synthesize mergeRangeCache=_mergeRangeCache - In the implementation block
@property (assign,nonatomic) BOOL needsMergeCacheLoad;                                                //@synthesize needsMergeCacheLoad=_needsMergeCacheLoad - In the implementation block
@property (nonatomic,__weak,readonly) TSTTableModel * tableModel;                                     //@synthesize tableModel=_tableModel - In the implementation block
@property (assign,nonatomic,__weak) TSCECalculationEngine * calculationEngine;                        //@synthesize calculationEngine=_calculationEngine - In the implementation block
@property (nonatomic,retain) TSTFormulaStore * formulaStore;                                          //@synthesize formulaStore=_formulaStore - In the implementation block
@property (nonatomic,retain) TSTMergeChangeDistributor * mergeChangeDistributor;                      //@synthesize mergeChangeDistributor=_mergeChangeDistributor - In the implementation block
@property (nonatomic,readonly) unsigned long long count; 
@property (nonatomic,readonly) BOOL isEmpty; 
@property (assign,nonatomic) UUIDData<TSP::UUIDData> ownerUID;                                        //@synthesize ownerUID=_ownerUID - In the implementation block
@property (nonatomic,readonly) const unordered_map<TSUModelCellCoord* mergeOriginsMap;                //@synthesize mergeOriginsMap=_mergeOriginsMap - In the implementation block
@property (nonatomic,readonly) const unordered_map<TSUModelCellCoord* reverseOriginsMap;              //@synthesize reverseOriginsMap=_reverseOriginsMap - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(BOOL)find:(TSUModelCellRect)arg1 ;
-(TSTTableModel *)tableModel;
-(id)init;
-(unsigned long long)count;
-(BOOL)isEmpty;
-(long long)evaluationMode;
-(id)initWithTableModel:(id)arg1 ;
-(BOOL)hasMergeRanges;
-(id)mergedGridIndicesForDimension:(long long)arg1 ;
-(vector<TSUModelCellRect, std::__1::allocator<TSUModelCellRect> >*)mergeRanges;
-(TSCECalculationEngine *)calculationEngine;
-(void)saveToArchive:(MergeOwnerArchive*)arg1 archiver:(id)arg2 ;
-(UUIDData<TSP::UUIDData>)ownerUID;
-(unsigned short)ownerKind;
-(id)linkedResolver;
-(void)writeResultsForCalcEngine:(id)arg1 ;
-(void)invalidateForCalcEngine:(id)arg1 ;
-(TSCERecalculationState)multiEvaluateFormulasAt:(const TSCECellCoordSet*)arg1 withCalcEngine:(id)arg2 recalcOptions:(TSCERecalculationState)arg3 ;
-(void)setCalculationEngine:(TSCECalculationEngine *)arg1 ;
-(void)setOwnerUID:(UUIDData<TSP::UUIDData>)arg1 ;
-(const unordered_map<TSUModelCellCoord*)mergeOriginsMap;
-(void)unregisterFromCalcEngine;
-(const unordered_map<TSUModelCellCoord*)reverseOriginsMap;
-(vector<TSUModelCellRect, std::__1::allocator<TSUModelCellRect> >*)mergeRangesIntersectingBaseCellRegion:(id)arg1 ;
-(BOOL)insertBaseMergeRange:(TSUModelCellRect)arg1 ;
-(TSTFormulaStore *)formulaStore;
-(id)initWithTableModel:(id)arg1 ownerUID:(const UUIDData<TSP::UUIDData>*)arg2 ;
-(id)initWithArchive:(const MergeOwnerArchive*)arg1 unarchiver:(id)arg2 forTableModel:(id)arg3 ;
-(void)resetMergeCache;
-(TSUModelCellRect)mergedRangeForBaseCellCoord:(TSUModelCellCoord)arg1 ;
-(void)rewriteMergesForInsertedRange:(NSRange)arg1 uids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 isRows:(BOOL)arg3 ;
-(void)rewriteMergesForRemovedRange:(NSRange)arg1 uids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 isRows:(BOOL)arg3 ;
-(void)remapTableUIDsInFormulasWithMap:(const UUIDMap<TSP::UUIDMap>*)arg1 calcEngine:(id)arg2 ;
-(void)enumerateMergeFormulasUsingBlock:(/*^block*/id)arg1 ;
-(BOOL)insertBaseMergeRangeRemovingOverlaps:(TSUModelCellRect)arg1 ;
-(void)assertCollaborationConvergence;
-(int)registerWithCalcEngine:(id)arg1 baseOwnerUID:(const UUIDData<TSP::UUIDData>*)arg2 ;
-(BOOL)hasRangeSpanningRowsForCellRange:(TSUModelCellRect)arg1 ;
-(id)performActionReturningInverse:(id)arg1 ;
-(BOOL)isValidMergeRange:(TSUModelCellRect)arg1 ;
-(BOOL)hasMergeRangeSpanningRowsForBaseCellRect:(TSUModelCellRect)arg1 ;
-(unsigned long long)markForRollback;
-(void)rollbackToMark:(unsigned long long)arg1 ;
-(id)mergeIndexesForRange:(TSUModelCellRect)arg1 ;
-(id)mergeIndexesForBaseCellRegion:(id)arg1 ;
-(void)openRewritingTransaction;
-(void)commitRewritingTransaction;
-(vector<TSUModelCellRect, std::__1::allocator<TSUModelCellRect> >*)mergeRangesIntersectingBaseCellRect:(TSUModelCellRect)arg1 ;
-(TSUModelCellRect)expandBaseCellRectToCoverMergedCells:(TSUModelCellRect)arg1 ;
-(id)expandBaseCellRegionToCoverMergedCells:(id)arg1 ;
-(BOOL)hasRangeSpanningRowsForCellRegion:(id)arg1 ;
-(TSTMergeChangeDistributor *)mergeChangeDistributor;
-(TSUModelCellCoord)mergeOriginForBaseCellCoord:(TSUModelCellCoord)arg1 ;
-(TSTMergeRangeCache *)mergeRangeCache;
-(void)loadMergeCache;
-(void)p_updateOriginMapWithSourceCellCoord:(TSUModelCellCoord)arg1 destCellCoord:(TSUModelCellCoord)arg2 ;
-(void)p_moveCellFromCellCoord:(TSUModelCellCoord)arg1 toCellCoord:(TSUModelCellCoord)arg2 ;
-(id)mergeActionForBaseCellRegion:(id)arg1 nonOriginPartialsOnly:(BOOL)arg2 ;
-(void)reloadMergeCacheForIndexes:(id)arg1 ;
-(void)p_dirtyCellsForMerge:(const TSUModelCellRect*)arg1 ;
-(void)removeBaseMergeRange:(TSUModelCellRect)arg1 ;
-(id)p_shrinkReturningInverseForAction:(id)arg1 ;
-(id)p_growReturningInverseForAction:(id)arg1 ;
-(id)p_shrinkMergesAtIndexes:(id)arg1 intersectedByBaseRegion:(id)arg2 ;
-(id)shrinkReturningInverseForBaseCellRegion:(id)arg1 ;
-(TSUModelCellRect)p_growRangeFrom:(TSUModelCellRect)arg1 toDesired:(TSUModelCellRect)arg2 ;
-(void)enumerateMergesIntersectingBaseCellRegion:(id)arg1 usingBlock:(/*^block*/id)arg2 ;
-(id)allMergesAsString;
-(void)resetMergeOriginMap;
-(id)mergeActionForBaseCellRegion:(id)arg1 ;
-(id)removeReturningInverseForBaseCellRegion:(id)arg1 ;
-(void)p_enumerateMergesUsingBlock:(/*^block*/id)arg1 ;
-(vector<TSUModelCellRect, std::__1::allocator<TSUModelCellRect> >*)mergeRangesAndCrumbsIntersectingBaseCellRect:(TSUModelCellRect)arg1 ;
-(BOOL)hasMergeRangesIntersectingBaseCellRect:(const TSUModelCellRect*)arg1 ;
-(BOOL)hasMergeRangesIntersectingBaseCellRegion:(id)arg1 ;
-(BOOL)mergeRangesPartiallyIntersectBaseCellRect:(TSUModelCellRect)arg1 ;
-(BOOL)mergeRangesPartiallyIntersectBaseCellRegion:(id)arg1 ;
-(TSUModelCellRect)rewroteFormula:(id)arg1 atCoordinate:(TSUModelCellCoord)arg2 withRewriteSpec:(id)arg3 isUndo:(BOOL)arg4 ;
-(void)setFormulaStore:(TSTFormulaStore *)arg1 ;
-(void)setMergeRangeCache:(TSTMergeRangeCache *)arg1 ;
-(BOOL)needsMergeCacheLoad;
-(void)setNeedsMergeCacheLoad:(BOOL)arg1 ;
-(void)setMergeChangeDistributor:(TSTMergeChangeDistributor *)arg1 ;
@end

