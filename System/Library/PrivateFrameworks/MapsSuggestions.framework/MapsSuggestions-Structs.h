/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:41:47 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/PrivateFrameworks/MapsSuggestions.framework/MapsSuggestions
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSObject<OS_dispatch_queue>, NSString, MapsSuggestionsEngineBuilder, MapsSuggestionsObservers, NSMutableArray, NSMutableSet, NSDate, <MapsSuggestionsTimer>, NSArray, NSObject<OS_dispatch_source>;

typedef struct Queue {
	NSObject<OS_dispatch_queue>* _innerQueue;
	NSString* _name;
} Queue;

typedef struct {
	double field1;
	double field2;
} SCD_Struct_Ma1;

typedef struct ReadWriteQueue {
	NSObject<OS_dispatch_queue>* _innerQueue;
	NSString* _name;
} ReadWriteQueue;

typedef struct _NSZone* NSZoneRef;

typedef struct _compressed_pair<MSg::_RollingWindowBudgetRule *, std::__1::allocator<MSg::_RollingWindowBudgetRule> > {
	_RollingWindowBudgetRule __value_;
} compressed_pair<MSg::_RollingWindowBudgetRule *, std::__1::allocator<MSg::_RollingWindowBudgetRule> >;

typedef struct vector<MSg::_RollingWindowBudgetRule, std::__1::allocator<MSg::_RollingWindowBudgetRule> > {
	_RollingWindowBudgetRule __begin_;
	_RollingWindowBudgetRule __end_;
	compressed_pair<MSg::_RollingWindowBudgetRule *, std::__1::allocator<MSg::_RollingWindowBudgetRule> > __end_cap_;
} vector<MSg::_RollingWindowBudgetRule, std::__1::allocator<MSg::_RollingWindowBudgetRule> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *> *> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<MapsSuggestionsSignalType, std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, std::__1::hash<MapsSuggestionsSignalType>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<MapsSuggestionsSignalType, std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, std::__1::hash<MapsSuggestionsSignalType>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<MapsSuggestionsSignalType, std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, std::__1::equal_to<MapsSuggestionsSignalType>, true> > {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<MapsSuggestionsSignalType, std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, std::__1::equal_to<MapsSuggestionsSignalType>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *> *> > __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, std::__1::__unordered_map_hasher<MapsSuggestionsSignalType, std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, std::__1::hash<MapsSuggestionsSignalType>, true>, std::__1::__unordered_map_equal<MapsSuggestionsSignalType, std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, std::__1::equal_to<MapsSuggestionsSignalType>, true>, std::__1::allocator<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal> > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<MapsSuggestionsSignalType, std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, std::__1::hash<MapsSuggestionsSignalType>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<MapsSuggestionsSignalType, std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, std::__1::equal_to<MapsSuggestionsSignalType>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, std::__1::__unordered_map_hasher<MapsSuggestionsSignalType, std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, std::__1::hash<MapsSuggestionsSignalType>, true>, std::__1::__unordered_map_equal<MapsSuggestionsSignalType, std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, std::__1::equal_to<MapsSuggestionsSignalType>, true>, std::__1::allocator<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal> > >;

typedef struct unordered_map<MapsSuggestionsSignalType, MSg::Signal, std::__1::hash<MapsSuggestionsSignalType>, std::__1::equal_to<MapsSuggestionsSignalType>, std::__1::allocator<std::__1::pair<const MapsSuggestionsSignalType, MSg::Signal> > > {
	hash_table<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, std::__1::__unordered_map_hasher<MapsSuggestionsSignalType, std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, std::__1::hash<MapsSuggestionsSignalType>, true>, std::__1::__unordered_map_equal<MapsSuggestionsSignalType, std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, std::__1::equal_to<MapsSuggestionsSignalType>, true>, std::__1::allocator<std::__1::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal> > > __table_;
} unordered_map<MapsSuggestionsSignalType, MSg::Signal, std::__1::hash<MapsSuggestionsSignalType>, std::__1::equal_to<MapsSuggestionsSignalType>, std::__1::allocator<std::__1::pair<const MapsSuggestionsSignalType, MSg::Signal> > >;

typedef struct SignalPack {
	unordered_map<MapsSuggestionsSignalType, MSg::Signal, std::__1::hash<MapsSuggestionsSignalType>, std::__1::equal_to<MapsSuggestionsSignalType>, std::__1::allocator<std::__1::pair<const MapsSuggestionsSignalType, MSg::Signal> > > dict_;
} SignalPack;

typedef struct _compressed_pair<MSg::Queue *, std::__1::default_delete<MSg::Queue> > {
	Queue __value_;
} compressed_pair<MSg::Queue *, std::__1::default_delete<MSg::Queue> >;

typedef struct unique_ptr<MSg::Queue, std::__1::default_delete<MSg::Queue> > {
	compressed_pair<MSg::Queue *, std::__1::default_delete<MSg::Queue> > __ptr_;
} unique_ptr<MSg::Queue, std::__1::default_delete<MSg::Queue> >;

typedef struct Config {
	NSString* name;
	MapsSuggestionsEngineBuilder* engineBuilder;
	MapsSuggestionsObservers* observers;
	double minRunTime;
	double maxRunTime;
	double minSleepTime;
	double maxSleepTime;
	double leewayRunTime;
	double leewaySleepTime;
	NSMutableArray* triggers;
	NSMutableArray* runConditions;
	NSMutableSet* filters;
	unsigned long long maxEntries;
	BOOL nilledWhenAsleep;
} Config;

typedef struct State {
	NSDate* minSilenceDate;
	NSDate* earliestRunDate;
	NSString* firedTriggerName;
	NSString* failedRunConditionName;
	<MapsSuggestionsTimer>* stopRunTimer;
	<MapsSuggestionsTimer>* wakeUpTimer;
	NSArray* entries;
} State;

typedef struct _long {
	char* __data_;
	unsigned long long __size_;
	unsigned long long __cap_;
} long;

typedef struct {
	unsigned char __size_;
} SCD_Struct_Ma22;

typedef struct _raw {
	unsigned long long __words[3];
} raw;

typedef struct _short {
	char __data_[23];
	SCD_Struct_Ma22 ;
} short;

typedef struct _rep {
	/*function pointer*/void* ;
	long __l;
	short __s;
	const aw) __r;
} rep;

typedef struct _compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > {
	const ep __value_;
} compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {
	compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > __r_;
} basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >;

typedef struct Notification {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > darwinNotification;
	int token;
	unsigned long long state;
} Notification;

typedef struct _compressed_pair<MSg::NotificationSender *, std::__1::default_delete<MSg::NotificationSender> > {
	NotificationSender __value_;
} compressed_pair<MSg::NotificationSender *, std::__1::default_delete<MSg::NotificationSender> >;

typedef struct unique_ptr<MSg::NotificationSender, std::__1::default_delete<MSg::NotificationSender> > {
	compressed_pair<MSg::NotificationSender *, std::__1::default_delete<MSg::NotificationSender> > __ptr_;
} unique_ptr<MSg::NotificationSender, std::__1::default_delete<MSg::NotificationSender> >;

typedef struct _compressed_pair<MSg::NotificationReceiver *, std::__1::default_delete<MSg::NotificationReceiver> > {
	NotificationReceiver __value_;
} compressed_pair<MSg::NotificationReceiver *, std::__1::default_delete<MSg::NotificationReceiver> >;

typedef struct unique_ptr<MSg::NotificationReceiver, std::__1::default_delete<MSg::NotificationReceiver> > {
	compressed_pair<MSg::NotificationReceiver *, std::__1::default_delete<MSg::NotificationReceiver> > __ptr_;
} unique_ptr<MSg::NotificationReceiver, std::__1::default_delete<MSg::NotificationReceiver> >;

typedef struct {
	NSDate* firesAt;
} SCD_Struct_Ma33;

typedef struct Timer {
	Queue _queue;
	NSString* _name;
	NSObject<OS_dispatch_source>* _timer;
	SCD_Struct_Ma33 _state;
} Timer;

typedef struct _compressed_pair<MapsSuggestionsEntryType *, std::__1::allocator<MapsSuggestionsEntryType> > {
	long long __value_;
} compressed_pair<MapsSuggestionsEntryType *, std::__1::allocator<MapsSuggestionsEntryType> >;

typedef struct vector<MapsSuggestionsEntryType, std::__1::allocator<MapsSuggestionsEntryType> > {
	long long __begin_;
	long long __end_;
	compressed_pair<MapsSuggestionsEntryType *, std::__1::allocator<MapsSuggestionsEntryType> > __end_cap_;
} vector<MapsSuggestionsEntryType, std::__1::allocator<MapsSuggestionsEntryType> >;

