/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:40:20 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/Frameworks/CoreMotion.framework/CoreMotion
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol OS_dispatch_queue;
#import <CoreMotion/CoreMotion-Structs.h>
@class NSOperationQueue, NSObject, NSString;

@interface CMMotionManagerInternal : NSObject {

	os_unfair_lock_s fSampleLock;
	Dispatcher* fAccelerometerDispatcher;
	double fAccelerometerUpdateInterval;
	/*^block*/id fAccelerometerHandler;
	NSOperationQueue* fAccelerometerQueue;
	double fLastAccelerometerNotificationTimestamp;
	Sample fLatestAccelerometerSample;
	Dispatcher* fAmbientPressureDispatcher;
	double fAmbientPressureUpdateInterval;
	/*^block*/id fAmbientPressureHandler;
	NSOperationQueue* fAmbientPressureQueue;
	double fLastAmbientPressureNotificationTimestamp;
	Sample fLatestAmbientPressureSample;
	Dispatcher* fCompensatedAmbientPressureDispatcher;
	double fCompensatedAmbientPressureUpdateInterval;
	/*^block*/id fCompensatedAmbientPressureHandler;
	NSOperationQueue* fCompensatedAmbientPressureQueue;
	double fLastCompensatedAmbientPressureNotificationTimestamp;
	Sample fLatestCompensatedAmbientPressureSample;
	Dispatcher* fGyroDispatcher;
	double fGyroUpdateInterval;
	/*^block*/id fGyroHandler;
	NSOperationQueue* fGyroQueue;
	double fLastGyroNotificationTimestamp;
	Sample fLatestGyroSample;
	Dispatcher* fDeviceMotionDispatcher;
	double fDeviceMotionUpdateInterval;
	/*^block*/id fDeviceMotionHandler;
	NSOperationQueue* fDeviceMotionQueue;
	double fLastDeviceMotionNotificationTimestamp;
	int fDeviceMotionMode;
	unsigned long long fAttitudeReferenceFrame;
	BOOL fCompassCalibrationHud;
	BOOL fIsCompassCalibrated;
	BOOL fIsUsingCalibratedCompass;
	BOOL fHaveSentDeviceRequiresMovementError;
	BOOL fHaveSentTrueNorthUnavailableError;
	double fDeviceMotionStartTimestamp;
	SCD_Struct_CM8 fInitialReferenceRotation;
	BOOL fIsInitialReferenceAvailable;
	Dispatcher* fMagnetometerDispatcher;
	double fMagnetometerUpdateInterval;
	/*^block*/id fMagnetometerHandler;
	NSOperationQueue* fMagnetometerQueue;
	double fLastMagnetometerNotificationTimestamp;
	Sample fLatestMagnetometerSample;
	BOOL fShowsDeviceMovementDisplay;
	Dispatcher* fPrivateAccelerometerDataDispatcher;
	/*function pointer*/void* fPrivateAccelerometerDataCallback;
	void* fPrivateAccelerometerDataCallbackInfo;
	Dispatcher* fPrivateGyroDataDispatcher;
	/*function pointer*/void* fPrivateGyroDataCallback;
	void* fPrivateGyroDataCallbackInfo;
	Dispatcher* fPrivateMagnetometerDataDispatcher;
	/*function pointer*/void* fPrivateMagnetometerDataCallback;
	void* fPrivateMagnetometerDataCallbackInfo;
	Dispatcher* fPrivateDeviceMotionDispatcher;
	/*function pointer*/void* fPrivateDeviceMotionCallback;
	void* fPrivateDeviceMotionCallbackInfo;
	BOOL fPrivateDeviceMotionUse9Axis;
	BOOL fPrivateUseAccelerometer;
	CLConnectionClient* fConnection;
	NSObject*<OS_dispatch_queue> fConnectionQueue;
	BOOL fSidebandSensorFusionEnabled;
	BOOL fSidebandSensorFusionLatency;
	BOOL fSidebandSensorFusionSnoop;
	unique_ptr<CLIspDataVisitor, std::__1::default_delete<CLIspDataVisitor> >* fSidebandVisitor;
	int fPrivatePowerConservationMode;
	/*function pointer*/void* fPrivateNotificationCallback;
	void* fPrivateNotificationCallbackInfo;
	Dispatcher* fPrivateDeviceMotionSensorStatusDispatcher;
	/*^block*/id fDeviceMotionErrorHandler;
	NSOperationQueue* fDeviceMotionErrorQueue;
	BOOL fIsApplicationActive;
	unique_ptr<CLDeviceMotionLiteService, std::__1::default_delete<CLDeviceMotionLiteService> >* fDeviceMotionLiteService;
	unique_ptr<CMMotionManagerStatsCollector, std::__1::default_delete<CMMotionManagerStatsCollector> >* fMotionManagerStatsCollector;
	NSOperationQueue* _fDeviceMotionLiteClientQueue;
	/*^block*/id _fDeviceMotionLiteFusedHandler;
	NSString* _fDeviceMotionLitePhysicalDeviceID;

}

@property (nonatomic,retain) NSOperationQueue * fDeviceMotionLiteClientQueue;              //@synthesize fDeviceMotionLiteClientQueue=_fDeviceMotionLiteClientQueue - In the implementation block
@property (nonatomic,copy) id fDeviceMotionLiteFusedHandler;                               //@synthesize fDeviceMotionLiteFusedHandler=_fDeviceMotionLiteFusedHandler - In the implementation block
@property (nonatomic,retain) NSString * fDeviceMotionLitePhysicalDeviceID;                 //@synthesize fDeviceMotionLitePhysicalDeviceID=_fDeviceMotionLitePhysicalDeviceID - In the implementation block
-(void)dealloc;
-(void)setFDeviceMotionLiteFusedHandler:(id)arg1 ;
-(id)init;
-(id)fDeviceMotionLiteFusedHandler;
-(void)setFDeviceMotionLiteClientQueue:(NSOperationQueue *)arg1 ;
-(void)teardownPrivate;
-(void)setFDeviceMotionLitePhysicalDeviceID:(NSString *)arg1 ;
-(NSOperationQueue *)fDeviceMotionLiteClientQueue;
-(NSString *)fDeviceMotionLitePhysicalDeviceID;
@end

