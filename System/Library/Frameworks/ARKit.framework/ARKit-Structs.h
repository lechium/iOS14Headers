/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:53:17 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/Frameworks/ARKit.framework/ARKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct {
	[4 columns];
} SCD_Struct_AR0;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct opaqueCMSampleBuffer* opaqueCMSampleBufferRef;

typedef struct ARFLSimpleSpringState {
	double position;
	double velocity;
} ARFLSimpleSpringState;

typedef struct ARFLSimpleSpring {
	ARFLSimpleSpringState state;
	double mass;
	double stiffness;
	double damping;
	double anchor;
	double stablePositionThreshold;
	double stableVelocityThreshold;
} ARFLSimpleSpring;

typedef struct ARFLCompoundSpring {
	ARFLSimpleSpringState state;
	ARFLSimpleSpring stiffness;
	ARFLSimpleSpring damping;
	ARFLSimpleSpring dampingRatio;
	ARFLSimpleSpring response;
	ARFLSimpleSpring anchor;
	BOOL usesDampingRatioResponse;
} ARFLCompoundSpring;

typedef struct ARFLSpringParameters {
	double dampingRatio;
	double dampingRatioSmoothing;
	double response;
	double responseSmoothing;
} ARFLSpringParameters;

typedef struct UIEdgeInsets {
	double top;
	double left;
	double bottom;
	double right;
} UIEdgeInsets;

typedef struct os_unfair_lock_s {
	unsigned _os_unfair_lock_opaque;
} os_unfair_lock_s;

typedef struct __CVBuffer* CVBufferRef;

typedef struct {
	 vector;
} SCD_Struct_AR10;

typedef struct {
	float field1;
} SCD_Struct_AR11;

typedef struct _compressed_pair<ARCoachingControlPoint *, std::__1::allocator<ARCoachingControlPoint> > {
	/*function pointer*/void* __value_;
} compressed_pair<ARCoachingControlPoint *, std::__1::allocator<ARCoachingControlPoint> >;

typedef struct vector<ARCoachingControlPoint, std::__1::allocator<ARCoachingControlPoint> > {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<ARCoachingControlPoint *, std::__1::allocator<ARCoachingControlPoint> > __end_cap_;
} vector<ARCoachingControlPoint, std::__1::allocator<ARCoachingControlPoint> >;

typedef struct _compressed_pair<ARCoachingPatchData *, std::__1::allocator<ARCoachingPatchData> > {
	/*function pointer*/void* __value_;
} compressed_pair<ARCoachingPatchData *, std::__1::allocator<ARCoachingPatchData> >;

typedef struct vector<ARCoachingPatchData, std::__1::allocator<ARCoachingPatchData> > {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<ARCoachingPatchData *, std::__1::allocator<ARCoachingPatchData> > __end_cap_;
} vector<ARCoachingPatchData, std::__1::allocator<ARCoachingPatchData> >;

typedef struct _compressed_pair<unsigned short *, std::__1::allocator<unsigned short> > {
	unsigned short __value_;
} compressed_pair<unsigned short *, std::__1::allocator<unsigned short> >;

typedef struct vector<unsigned short, std::__1::allocator<unsigned short> > {
	unsigned short __begin_;
	unsigned short __end_;
	compressed_pair<unsigned short *, std::__1::allocator<unsigned short> > __end_cap_;
} vector<unsigned short, std::__1::allocator<unsigned short> >;

typedef struct {
	float field1;
	float field2;
	float field3;
	float field4;
} SCD_Struct_AR18;

typedef struct {
	double field1;
	float field2;
	float field3;
	float field4;
} SCD_Struct_AR19;

typedef struct {
	double angle;
	 axis;
} SCD_Struct_AR20;

