/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:40:18 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/Frameworks/HealthKit.framework/HealthKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct _NSZone* NSZoneRef;

typedef struct os_unfair_lock_s {
	unsigned _os_unfair_lock_opaque;
} os_unfair_lock_s;

typedef struct {
	char* field1;
	char* field2;
	char* field3;
	char* field4;
	BOOL field5;
	BOOL field6;
} SCD_Struct_HK2;

typedef struct {
	long long majorVersion;
	long long minorVersion;
	long long patchVersion;
} SCD_Struct_HK3;

typedef struct {
	unsigned val[8];
} SCD_Struct_HK4;

typedef struct {
	unsigned long long field1;
	id field2;
	unsigned long long field3;
	unsigned long long field4[5];
} SCD_Struct_HK5;

typedef struct _xmlSchema* xmlSchemaRef;

typedef struct archive* archiveRef;

typedef struct archive_entry* archive_entryRef;

typedef struct __SecTask* SecTaskRef;

typedef struct NSRange {
	unsigned long long location;
	unsigned long long length;
} NSRange;

typedef struct {
	unsigned latestSampleStartTime : 1;
} SCD_Struct_HK11;

typedef struct __SecCertificate* SecCertificateRef;

typedef struct _compressed_pair<HKIntervalTree<double> *, std::__1::default_delete<HKIntervalTree<double> > > {
	HKIntervalTree<double> __value_;
} compressed_pair<HKIntervalTree<double> *, std::__1::default_delete<HKIntervalTree<double> > >;

typedef struct unique_ptr<HKIntervalTree<double>, std::__1::default_delete<HKIntervalTree<double> > > {
	compressed_pair<HKIntervalTree<double> *, std::__1::default_delete<HKIntervalTree<double> > > __ptr_;
} unique_ptr<HKIntervalTree<double>, std::__1::default_delete<HKIntervalTree<double> > >;

typedef struct {
	unsigned version : 1;
	unsigned trailingHMACLength : 1;
	unsigned trailingSHALength : 1;
	unsigned compressed : 1;
} SCD_Struct_HK15;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<binarysample::ElectrocardiogramLead_Name, std::__1::__value_type<binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead>, std::__1::less<binarysample::ElectrocardiogramLead_Name>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<binarysample::ElectrocardiogramLead_Name, std::__1::__value_type<binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead>, std::__1::less<binarysample::ElectrocardiogramLead_Name>, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead>, void *> > >;

typedef struct _tree<std::__1::__value_type<binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead>, std::__1::__map_value_compare<binarysample::ElectrocardiogramLead_Name, std::__1::__value_type<binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead>, std::__1::less<binarysample::ElectrocardiogramLead_Name>, true>, std::__1::allocator<std::__1::__value_type<binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<binarysample::ElectrocardiogramLead_Name, std::__1::__value_type<binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead>, std::__1::less<binarysample::ElectrocardiogramLead_Name>, true> > __pair3_;
} tree<std::__1::__value_type<binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead>, std::__1::__map_value_compare<binarysample::ElectrocardiogramLead_Name, std::__1::__value_type<binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead>, std::__1::less<binarysample::ElectrocardiogramLead_Name>, true>, std::__1::allocator<std::__1::__value_type<binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead> > >;

typedef struct map<binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead, std::__1::less<binarysample::ElectrocardiogramLead_Name>, std::__1::allocator<std::__1::pair<const binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead> > > {
	tree<std::__1::__value_type<binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead>, std::__1::__map_value_compare<binarysample::ElectrocardiogramLead_Name, std::__1::__value_type<binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead>, std::__1::less<binarysample::ElectrocardiogramLead_Name>, true>, std::__1::allocator<std::__1::__value_type<binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead> > > __tree_;
} map<binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead, std::__1::less<binarysample::ElectrocardiogramLead_Name>, std::__1::allocator<std::__1::pair<const binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead> > >;

typedef struct {
	unsigned timeInterval : 1;
	unsigned value : 1;
	unsigned duration : 1;
} SCD_Struct_HK21;

typedef struct {
	id field1;
	id field2;
	id field3;
	id field4;
	short field5;
	char field6;
	unsigned char field7;
} SCD_Struct_HK22;

typedef struct {
	unsigned count : 1;
	unsigned dataTypeCode : 1;
	unsigned endTime : 1;
	unsigned persistentID : 1;
	unsigned seriesIndex : 1;
	unsigned sourceID : 1;
	unsigned startTime : 1;
	unsigned value : 1;
} SCD_Struct_HK23;

typedef struct {
	char* field1;
	unsigned long long field2;
	char* field3;
	unsigned long long field4;
	void field5;
} SCD_Struct_HK24;

typedef struct {
	char* field1;
	BOOL field2;
	char* field3;
	double field4;
	double field5;
	BOOL field6;
} SCD_Struct_HK25;

typedef struct atomic_flag {
	AB _Value;
} atomic_flag;

typedef struct {
	unsigned endDate : 1;
	unsigned startDate : 1;
} SCD_Struct_HK27;

typedef struct _CCCryptor* CCCryptorRef;

typedef struct {
	unsigned ctx[96];
} SCD_Struct_HK29;

typedef struct CC_SHA256state_st {
	unsigned count[2];
	unsigned hash[8];
	unsigned wbuf[16];
} CC_SHA256state_st;

typedef struct __SecKey* SecKeyRef;

typedef struct {
	long long field1;
	long long field2;
} SCD_Struct_HK32;

typedef struct HKLazyLoader<bool> {
	BOOL _value;
	BOOL _hasLoaded;
	os_unfair_lock_s _loadLock;
} HKLazyLoader<bool>;

typedef struct __CTServerConnection* CTServerConnectionRef;

typedef struct _compressed_pair<std::__1::unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > *, std::__1::allocator<std::__1::unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > > > {
	unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > __value_;
} compressed_pair<std::__1::unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > *, std::__1::allocator<std::__1::unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > > >;

typedef struct vector<std::__1::unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> >, std::__1::allocator<std::__1::unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > > > {
	unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > __begin_;
	unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > __end_;
	compressed_pair<std::__1::unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > *, std::__1::allocator<std::__1::unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > > > __end_cap_;
} vector<std::__1::unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> >, std::__1::allocator<std::__1::unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > > >;

typedef struct PtrVector<binarysample::ElectrocardiogramLead> {
	vector<std::__1::unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> >, std::__1::allocator<std::__1::unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > > > _v;
} PtrVector<binarysample::ElectrocardiogramLead>;

typedef struct Electrocardiogram {
	/*function pointer*/void* _vptr$Base;
	double _frequency;
	PtrVector<binarysample::ElectrocardiogramLead> _leads;
	SCD_Struct_HK11 _has;
} Electrocardiogram;

