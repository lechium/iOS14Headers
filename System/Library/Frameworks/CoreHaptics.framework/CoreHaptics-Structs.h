/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:40:04 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/Frameworks/CoreHaptics.framework/CoreHaptics
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSString;

typedef struct Data {
	NSString* name;
} Data;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> *> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<AVHapticPlayerEventType, std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, std::__1::hash<AVHapticPlayerEventType>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<AVHapticPlayerEventType, std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, std::__1::hash<AVHapticPlayerEventType>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<AVHapticPlayerEventType, std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, std::__1::equal_to<AVHapticPlayerEventType>, true> > {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<AVHapticPlayerEventType, std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, std::__1::equal_to<AVHapticPlayerEventType>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> *> > __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, std::__1::__unordered_map_hasher<AVHapticPlayerEventType, std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, std::__1::hash<AVHapticPlayerEventType>, true>, std::__1::__unordered_map_equal<AVHapticPlayerEventType, std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, std::__1::equal_to<AVHapticPlayerEventType>, true>, std::__1::allocator<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *> > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<AVHapticPlayerEventType, std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, std::__1::hash<AVHapticPlayerEventType>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<AVHapticPlayerEventType, std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, std::__1::equal_to<AVHapticPlayerEventType>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, std::__1::__unordered_map_hasher<AVHapticPlayerEventType, std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, std::__1::hash<AVHapticPlayerEventType>, true>, std::__1::__unordered_map_equal<AVHapticPlayerEventType, std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, std::__1::equal_to<AVHapticPlayerEventType>, true>, std::__1::allocator<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *> > >;

typedef struct unordered_map<AVHapticPlayerEventType, NSString *, std::__1::hash<AVHapticPlayerEventType>, std::__1::equal_to<AVHapticPlayerEventType>, std::__1::allocator<std::__1::pair<const AVHapticPlayerEventType, NSString *> > > {
	hash_table<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, std::__1::__unordered_map_hasher<AVHapticPlayerEventType, std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, std::__1::hash<AVHapticPlayerEventType>, true>, std::__1::__unordered_map_equal<AVHapticPlayerEventType, std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, std::__1::equal_to<AVHapticPlayerEventType>, true>, std::__1::allocator<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *> > > __table_;
} unordered_map<AVHapticPlayerEventType, NSString *, std::__1::hash<AVHapticPlayerEventType>, std::__1::equal_to<AVHapticPlayerEventType>, std::__1::allocator<std::__1::pair<const AVHapticPlayerEventType, NSString *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, NSURL *>, std::__1::less<unsigned long>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, NSURL *>, std::__1::less<unsigned long>, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, NSURL *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, NSURL *>, void *> > >;

typedef struct _tree<std::__1::__value_type<unsigned long, NSURL *>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, NSURL *>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, NSURL *> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, NSURL *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, NSURL *>, std::__1::less<unsigned long>, true> > __pair3_;
} tree<std::__1::__value_type<unsigned long, NSURL *>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, NSURL *>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, NSURL *> > >;

typedef struct map<unsigned long, NSURL *, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, NSURL *> > > {
	tree<std::__1::__value_type<unsigned long, NSURL *>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, NSURL *>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, NSURL *> > > __tree_;
} map<unsigned long, NSURL *, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, NSURL *> > >;

