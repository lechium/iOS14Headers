/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:43:41 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/Frameworks/PencilKit.framework/PencilKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol PKShapeDrawingControllerDelegate;
#import <PencilKit/PencilKit-Structs.h>
@class UIView, PKShape, PKStrokeRenderMask, NSUUID, CHRecognizer;

@interface PKShapeDrawingController : NSObject {

	UIView* _view;
	vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >* _currentStrokePoints;
	CGRect _currentStrokeBounds;
	BOOL _closedShapeDetected;
	BOOL _stopGestureDetected;
	vector<TimestampedPoint, std::__1::allocator<TimestampedPoint> >* _timestampedPoints;
	SCD_Struct_PK69 _averageInputPoint;
	unsigned long long _numInputPoints;
	double _strokeStartTime;
	double _latestAddedPointTime;
	double _strokeDuration;
	double _minimumRecognitionDelay;
	double _maximumRecognitionDelay;
	BOOL _smartFillEnabled;
	BOOL _shapeRecognitionOn;
	id<PKShapeDrawingControllerDelegate> _delegate;
	PKShape* _detectedShape;
	PKStrokeRenderMask* _smartFillRenderMask;
	NSUUID* _smartFillGroupID;
	CHRecognizer* _shapeRecognizer;
	/*^block*/id _timerBlock;

}

@property (nonatomic,retain) PKStrokeRenderMask * smartFillRenderMask;                          //@synthesize smartFillRenderMask=_smartFillRenderMask - In the implementation block
@property (nonatomic,retain) NSUUID * smartFillGroupID;                                         //@synthesize smartFillGroupID=_smartFillGroupID - In the implementation block
@property (nonatomic,retain) CHRecognizer * shapeRecognizer;                                    //@synthesize shapeRecognizer=_shapeRecognizer - In the implementation block
@property (nonatomic,copy) id timerBlock;                                                       //@synthesize timerBlock=_timerBlock - In the implementation block
@property (assign,nonatomic,__weak) id<PKShapeDrawingControllerDelegate> delegate;              //@synthesize delegate=_delegate - In the implementation block
@property (getter=isActive,nonatomic,readonly) BOOL active; 
@property (assign,getter=isSmartFillEnabled,nonatomic) BOOL smartFillEnabled;                   //@synthesize smartFillEnabled=_smartFillEnabled - In the implementation block
@property (assign,getter=isShapeRecognitionOn,nonatomic) BOOL shapeRecognitionOn;               //@synthesize shapeRecognitionOn=_shapeRecognitionOn - In the implementation block
@property (getter=isSmartFillActive,nonatomic,readonly) BOOL smartFillActive; 
@property (getter=isRecordingStroke,nonatomic,readonly) BOOL recordingStroke; 
@property (nonatomic,readonly) SCD_Struct_PK6 averageInputPoint; 
@property (nonatomic,retain) PKShape * detectedShape;                                           //@synthesize detectedShape=_detectedShape - In the implementation block
+(BOOL)shouldBeAvailableForWindow:(id)arg1 ;
+(CGPathRef)_createNormalizedPathFromPath:(CGPathRef)arg1 ;
+(CGPathRef)_createNormalizedPathFromSVGPath:(id)arg1 ;
+(void)_addLeftCloudPath:(CGPathRef)arg1 ;
+(void)_addBottomCenterCloudPath:(CGPathRef)arg1 transform:(CGAffineTransform)arg2 ;
+(void)_addRightCloudPath:(CGPathRef)arg1 transform:(CGAffineTransform)arg2 ;
+(void)_addTopCenterCloudPath:(CGPathRef)arg1 transform:(CGAffineTransform)arg2 leftEdge:(BOOL)arg3 rightEdge:(BOOL)arg4 ;
+(CGPathRef)_normalizedHeartPath;
+(long long)_numCenterCloudPiecesFromInOutSize:(CGSize*)arg1 ;
+(CGPathRef)_createNormalizedCloudPathWithNumCenterPieces:(long long)arg1 ;
+(CGPathRef)_normalizedCloudPath;
-(void)_cancelTimer;
-(BOOL)isActive;
-(void)setDelegate:(id<PKShapeDrawingControllerDelegate>)arg1 ;
-(id<PKShapeDrawingControllerDelegate>)delegate;
-(void)_scheduleTimer;
-(id)initWithDelegate:(id)arg1 view:(id)arg2 ;
-(void)setShapeRecognitionOn:(BOOL)arg1 ;
-(void)beginStrokeAtPoint:(CGPoint)arg1 ;
-(BOOL)isRecordingStroke;
-(void)addStrokePoint:(CGPoint)arg1 inputPoint:(SCD_Struct_PK6)arg2 ;
-(void)cancelDetectionIfNecessary;
-(PKShape *)detectedShape;
-(void)resetStroke;
-(SCD_Struct_PK6)averageInputPoint;
-(id)detectedShapeWithInputScale:(double)arg1 strokeTransform:(CGAffineTransform)arg2 averageInputPoint:(SCD_Struct_PK6)arg3 createCurrentStrokeBlock:(/*^block*/id)arg4 ;
-(void)setDetectedShape:(PKShape *)arg1 ;
-(id)shapeFromStroke:(id)arg1 inputScale:(double)arg2 averageInputPoint:(SCD_Struct_PK6)arg3 ;
-(BOOL)isSmartFillEnabled;
-(BOOL)isShapeRecognitionOn;
-(PKStrokeRenderMask *)smartFillRenderMask;
-(id)_strokeFromPoints:(const vector<CGPoint, std::__1::allocator<CGPoint> >*)arg1 inputScale:(double)arg2 averageInputPoint:(SCD_Struct_PK6)arg3 sourceStroke:(id)arg4 ;
-(double)_arrowRadiusForStroke:(id)arg1 inputScale:(double)arg2 ;
-(id)_arrowStrokesWithInputScale:(double)arg1 firstPt:(CGPoint)arg2 secondPt:(CGPoint)arg3 radius:(double)arg4 averageInputPoint:(SCD_Struct_PK6)arg5 sourceStroke:(id)arg6 ;
-(CGSize)aspectRatioAdjustedSizeFromResult:(id)arg1 ;
-(void)_updateAverageInputPoint:(const SCD_Struct_PK6*)arg1 ;
-(SCD_Struct_PK6)averageInputPointFromStroke:(id)arg1 ;
-(id)_chDrawingFromStroke:(id)arg1 ;
-(CHRecognizer *)shapeRecognizer;
-(long long)_shapeTypeFromResultName:(id)arg1 ;
-(id)_generateRectangle:(id)arg1 sourceStroke:(id)arg2 inputScale:(double)arg3 averageInputPoint:(SCD_Struct_PK6)arg4 ;
-(id)_generateTriangle:(id)arg1 sourceStroke:(id)arg2 inputScale:(double)arg3 averageInputPoint:(SCD_Struct_PK6)arg4 ;
-(id)_generateOval:(id)arg1 sourceStroke:(id)arg2 inputScale:(double)arg3 averageInputPoint:(SCD_Struct_PK6)arg4 ;
-(id)_generateStar:(id)arg1 sourceStroke:(id)arg2 inputScale:(double)arg3 averageInputPoint:(SCD_Struct_PK6)arg4 ;
-(id)_generateHeart:(id)arg1 sourceStroke:(id)arg2 inputScale:(double)arg3 averageInputPoint:(SCD_Struct_PK6)arg4 ;
-(id)_generateChatBubble:(id)arg1 sourceStroke:(id)arg2 inputScale:(double)arg3 averageInputPoint:(SCD_Struct_PK6)arg4 ;
-(id)_generatePentagon:(id)arg1 sourceStroke:(id)arg2 inputScale:(double)arg3 averageInputPoint:(SCD_Struct_PK6)arg4 ;
-(id)_generateLine:(id)arg1 sourceStroke:(id)arg2 inputScale:(double)arg3 averageInputPoint:(SCD_Struct_PK6)arg4 ;
-(id)_generateOutlineArrow:(id)arg1 sourceStroke:(id)arg2 inputScale:(double)arg3 averageInputPoint:(SCD_Struct_PK6)arg4 ;
-(id)_generateManhattanLine:(id)arg1 sourceStroke:(id)arg2 inputScale:(double)arg3 averageInputPoint:(SCD_Struct_PK6)arg4 ;
-(id)_generateCloud:(id)arg1 sourceStroke:(id)arg2 inputScale:(double)arg3 averageInputPoint:(SCD_Struct_PK6)arg4 ;
-(void)setSmartFillGroupID:(NSUUID *)arg1 ;
-(NSUUID *)smartFillGroupID;
-(BOOL)isSmartFillActive;
-(void)setSmartFillRenderMask:(PKStrokeRenderMask *)arg1 ;
-(void)_smartFillRenderMaskFromStroke:(id)arg1 outPoints:(vector<CGPoint, std::__1::allocator<CGPoint> >*)arg2 strokeTransform:(CGAffineTransform)arg3 completionBlock:(/*^block*/id)arg4 ;
-(void)_addCurrentStrokePoint:(CGPoint)arg1 ;
-(void)_checkDetectedStroke;
-(double)_movementSpeed;
-(BOOL)hasMovementStopped;
-(id)timerBlock;
-(void)setTimerBlock:(id)arg1 ;
-(id)beginSmartFillForStroke:(id)arg1 strokeTransform:(CGAffineTransform)arg2 ;
-(void)addSmartFillRenderMaskForStroke:(id)arg1 ;
-(CGRect)smartFillStrokeBounds;
-(void)endSmartFill;
-(void)setSmartFillEnabled:(BOOL)arg1 ;
-(void)setShapeRecognizer:(CHRecognizer *)arg1 ;
@end

