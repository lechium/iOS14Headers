/*
* This header is generated by classdump-dyld 1.0
* on Sunday, September 27, 2020 at 11:39:50 AM Mountain Standard Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <MediaPlayer/MediaPlayer-Structs.h>
#import <libobjc.A.dylib/_MPActiveUserChangeMonitorDelegate.h>
#import <libobjc.A.dylib/NSSecureCoding.h>

@protocol MPMediaLibraryDataProviderPrivate, OS_dispatch_queue;
@class NSObject, NSArray, QueryCriteriaResultsCache, NSMutableDictionary, NSMutableArray, NSPointerArray, ICUserIdentity, _MPActiveUserChangeMonitor, NSURL, NSString, NSNumber, NSDate, ML3MusicLibrary;

@interface MPMediaLibrary : NSObject <_MPActiveUserChangeMonitorDelegate, NSSecureCoding> {

	id<MPMediaLibraryDataProviderPrivate> _libraryDataProvider;
	NSObject*<OS_dispatch_queue> _entityCacheQueue;
	NSObject*<OS_dispatch_queue> _fixedQueue;
	NSArray* _notificationObservers;
	QueryCriteriaResultsCache* _itemsForCriteriaCache;
	QueryCriteriaResultsCache* _hasItemsForCriteriaCache;
	QueryCriteriaResultsCache* _countOfItemsForCriteriaCache;
	QueryCriteriaResultsCache* _itemResultSetsForCriteriaCache;
	QueryCriteriaResultsCache* _collectionsForCriteriaCache;
	QueryCriteriaResultsCache* _hasCollectionsForCriteriaCache;
	QueryCriteriaResultsCache* _countOfCollectionsForCriteriaCache;
	QueryCriteriaResultsCache* _collectionsResultSetsForCriteriaCache;
	NSMutableDictionary* _hasItemsDidLoadForCriteria;
	NSMutableDictionary* _hasCollectionsDidLoadForCriteria;
	NSMutableDictionary* _countOfCollectionsDidLoadForCriteria;
	NSMutableDictionary* _countOfItemsDidLoadForCriteria;
	NSMutableArray* _additionalLibraryFilterPredicates;
	NSObject*<OS_dispatch_queue> _additionalLibraryFilterPredicatesAccessQueue;
	NSPointerArray* _connectionAssertions;
	NSObject*<OS_dispatch_queue> _connectionAssertionsQueue;
	BOOL _disconnectAfterReleasingAssertions;
	float _connectionProgress;
	long long _removalReason;
	unsigned _determinedHasMedia : 1;
	unsigned _hasMedia : 1;
	unsigned _determinedHasSongs : 1;
	unsigned _hasSongs : 1;
	unsigned _determinedHasGeniusMixes : 1;
	unsigned _hasGeniusMixes : 1;
	unsigned _determinedHasPlaylists : 1;
	unsigned _hasPlaylists : 1;
	unsigned _determinedHasComposers : 1;
	unsigned _hasComposers : 1;
	unsigned _determinedHasPodcasts : 1;
	unsigned _hasPodcasts : 1;
	unsigned _determinedHasUbiquitousBookmarkableItems : 1;
	unsigned _hasUbiquitousBookmarkableContent : 1;
	unsigned _determinedHasAudiobooks : 1;
	unsigned _hasAudiobooks : 1;
	long long _cloudFilteringType;
	BOOL _filteringDisabled;
	BOOL _hasVideos;
	BOOL _determinedHasVideos;
	BOOL _hasMusicVideos;
	BOOL _determinedHasMusicVideos;
	BOOL _hasAudibleAudioBooks;
	BOOL _determinedHasAudibleAudioBooks;
	BOOL _hasMovies;
	BOOL _determinedHasMovies;
	BOOL _hasCompilations;
	BOOL _determinedHasCompilations;
	BOOL _hasITunesU;
	BOOL _determinedHasITunesU;
	BOOL _hasVideoITunesU;
	BOOL _determinedHasVideoITunesU;
	BOOL _hasMovieRentals;
	BOOL _determinedHasMovieRentals;
	BOOL _hasTVShows;
	BOOL _determinedHasTVShows;
	BOOL _hasHomeVideos;
	BOOL _determinedHasHomeVideos;
	BOOL _hasVideoPodcasts;
	BOOL _determinedHasVideoPodcasts;
	unsigned char _originalCellNetworkFlags;
	unsigned char _originalWiFiNetworkFlags;
	os_unfair_lock_s __MLCoreStorageLock;
	id __MLCoreStorage;
	ICUserIdentity* _userIdentity;
	long long _libraryChangeObservers;
	_MPActiveUserChangeMonitor* _activeUserChangeMonitor;
	os_unfair_lock_s* __MLCoreStorageLockPointer;

}

@property (nonatomic,readonly) shared_ptr<mlcore::DeviceLibrary>* _MediaLibrary_coreLibrary; 
@property (nonatomic,readonly) NSURL * protectedContentSupportStorageURL; 
@property (nonatomic,readonly) NSString * _syncValidity; 
@property (nonatomic,copy) NSNumber * sagaAccountID; 
@property (nonatomic,copy) NSDate * sagaLastItemPlayDataUploadDate; 
@property (nonatomic,copy) NSDate * sagaLastPlaylistPlayDataUploadDate; 
@property (assign,nonatomic) long long sagaDatabaseUserVersion; 
@property (nonatomic,copy) NSString * storefrontIdentifier; 
@property (nonatomic,copy) NSDate * sagaLastLibraryUpdateTime; 
@property (nonatomic,copy) NSDate * sagaLastSubscribedContainersUpdateTime; 
@property (assign,nonatomic) long long sagaOnDiskDatabaseRevision; 
@property (nonatomic,readonly) long long libraryChangeObservers;                                          //@synthesize libraryChangeObservers=_libraryChangeObservers - In the implementation block
@property (assign,nonatomic) long long removalReason; 
@property (nonatomic,readonly) os_unfair_lock_s _MLCoreStorageLock;                                       //@synthesize _MLCoreStorageLock=__MLCoreStorageLock - In the implementation block
@property (nonatomic,retain) _MPActiveUserChangeMonitor * activeUserChangeMonitor;                        //@synthesize activeUserChangeMonitor=_activeUserChangeMonitor - In the implementation block
@property (setter=_setMLCoreStorage:,nonatomic,retain) id _MLCoreStorage;                                 //@synthesize _MLCoreStorage=__MLCoreStorage - In the implementation block
@property (nonatomic,readonly) os_unfair_lock_s* _MLCoreStorageLockPointer;                               //@synthesize _MLCoreStorageLockPointer=__MLCoreStorageLockPointer - In the implementation block
@property (nonatomic,readonly) ML3MusicLibrary * ml3Library; 
@property (nonatomic,copy,readonly) ICUserIdentity * userIdentity;                                        //@synthesize userIdentity=_userIdentity - In the implementation block
@property (nonatomic,readonly) NSDate * lastModifiedDate; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(void)initialize;
+(void)setLibraryServerDisabled:(BOOL)arg1 ;
+(long long)authorizationStatus;
+(void)_endDiscoveringMediaLibrariesIfAllowed;
+(void)syncGenerationDidChangeForLibraryDataProvider:(id)arg1 ;
+(id)mediaLibraryWithUniqueIdentifier:(id)arg1 ;
+(BOOL)supportsSecureCoding;
+(id)deviceMediaLibraryWithUserIdentity:(id)arg1 ;
+(BOOL)isLibraryServerDisabled;
+(void)setRunLoopForNotifications:(id)arg1 ;
+(id)_deviceMediaLibraryWithUserIdentity:(id)arg1 createIfRequired:(BOOL)arg2 ;
+(void)_postNotificationName:(id)arg1 library:(id)arg2 ;
+(void)libraryPathDidChangeForDataProvider:(id)arg1 ;
+(id)defaultMediaLibrary;
+(void)reloadLibraryDataProvider:(id)arg1 ;
+(void)_postNotificationName:(id)arg1 library:(id)arg2 userInfo:(id)arg3 ;
+(void)setDefaultMediaLibrary:(id)arg1 ;
+(id)_libraryForDataProvider:(id)arg1 ;
+(void)uniqueIdentifierDidChangeForLibraryDataProvider:(id)arg1 ;
+(void)endDiscoveringMediaLibraries;
+(id)sharedMediaLibraries;
+(void)reloadInvisiblePropertiesForLibraryDataProvider:(id)arg1 ;
+(void)requestAuthorization:(/*^block*/id)arg1 ;
+(void)reloadDynamicPropertiesForLibraryDataProvider:(id)arg1 ;
+(id)_libraryDataProviders;
+(id)mediaLibraries;
+(void)validatePermissionsExpiryWithCompletion:(/*^block*/id)arg1 ;
+(id)libraryDataProviders;
+(id)deviceMediaLibrary;
+(void)beginDiscoveringMediaLibraries;
+(void)removeLibraryDataProvider:(id)arg1 removalReason:(long long)arg2 ;
+(id)_mediaLibraries;
+(void)postEntitiesAddedOrRemovedNotificationForLibraryDataProvider:(id)arg1 ;
+(void)addLibraryDataProvider:(id)arg1 ;
+(void)reloadDisplayValuesForLibraryDataProvider:(id)arg1 ;
-(void)_disconnect;
-(BOOL)hasComposers;
-(NSString *)storefrontIdentifier;
-(void)disconnect;
-(BOOL)hasAudibleAudioBooks;
-(void)setStorefrontIdentifier:(NSString *)arg1 ;
-(id)artworkDataSource;
-(ICUserIdentity *)userIdentity;
-(BOOL)removePlaylist:(id)arg1 ;
-(float)connectionProgress;
-(BOOL)hasAudioITunesUContent;
-(id)databasePath;
-(void)_clearCachedEntitiesIncludingResultSets:(BOOL)arg1 ;
-(void)clearLocationPropertiesOfItem:(id)arg1 ;
-(long long)removalReason;
-(BOOL)isGeniusEnabled;
-(long long)playlistGeneration;
-(void)addLibraryFilterPredicate:(id)arg1 ;
-(BOOL)isCurrentThreadInTransaction;
-(void)_setupNotifications;
-(id)newPlaylistWithPersistentID:(unsigned long long)arg1 ;
-(BOOL)hasSongs;
-(void)performStoreItemLibraryImport:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(void)removeLibraryFilterPredicate:(id)arg1 ;
-(void)_tearDownNotifications;
-(id)entityWithLibraryURL:(id)arg1 ;
-(BOOL)hasTVShows;
-(BOOL)hasMediaOfType:(unsigned long long)arg1 ;
-(void)_reloadLibraryForRestrictionsChange;
-(id)_collectionPersistentIdentifiersForQueryCriteria:(id)arg1 ;
-(NSDate *)sagaLastLibraryUpdateTime;
-(id)valueForDatabaseProperty:(id)arg1 ;
-(void)addStoreItem:(long long)arg1 andAddTracksToCloudLibrary:(BOOL)arg2 withCompletion:(/*^block*/id)arg3 ;
-(void)enumerateEntityChangesAfterSyncAnchor:(id)arg1 maximumRevisionType:(long long)arg2 inUsersLibrary:(BOOL)arg3 usingBlock:(/*^block*/id)arg4 ;
-(id)additionalLibraryFilterPredicates;
-(void)_setLibraryFilterPredicates;
-(void)clearSagaLastItemPlayDataUploadDate;
-(id)preferredAudioLanguages;
-(id)connectionAssertionWithIdentifier:(id)arg1 ;
-(void)_reloadLibraryForInvisiblePropertyChangeWithNotificationInfo:(id)arg1 ;
-(BOOL)hasAudiobooks;
-(BOOL)collectionExistsWithStoreID:(long long)arg1 groupingType:(long long)arg2 existentPID:(unsigned long long*)arg3 ;
-(void)_displayValuesDidChangeNotification:(id)arg1 ;
-(void)_activeUserDidChangeNotification:(id)arg1 ;
-(BOOL)_checkHasContent:(BOOL*)arg1 determined:(BOOL*)arg2 queryHasEntitiesBlock:(/*^block*/id)arg3 ;
-(BOOL)hasPlaylists;
-(BOOL)collectionExistsWithSagaID:(long long)arg1 groupingType:(long long)arg2 existentPID:(unsigned long long*)arg3 ;
-(id)libraryDataProvider;
-(BOOL)writable;
-(id)_initWithLibraryDataProvider:(id)arg1 ;
-(id)errorResolverForItem:(id)arg1 ;
-(id)_itemPersistentIdentifiersForQueryCriteria:(id)arg1 ;
-(void)_reloadLibraryForDynamicPropertyChangeWithNotificationInfo:(id)arg1 ;
-(BOOL)itemExistsWithPersistentID:(unsigned long long)arg1 ;
-(id)localizedSectionHeaderForSectionIndex:(unsigned long long)arg1 ;
-(BOOL)isDeviceLibrary;
-(void)addTracksToMyLibrary:(id)arg1 ;
-(unsigned long long)_countOfItemsForQueryCriteria:(id)arg1 ;
-(BOOL)recordPlayEventForAlbumPersistentID:(long long)arg1 ;
-(void)enumerateEntityChangesAfterSyncAnchor:(id)arg1 maximumRevisionType:(long long)arg2 usingBlock:(/*^block*/id)arg3 ;
-(id)addPlaylistWithName:(id)arg1 ;
-(void)_scheduleLibraryChangeNotificationPostingBlock:(/*^block*/id)arg1 ;
-(unsigned long long)filterAvailableContentGroups:(unsigned long long)arg1 withOptions:(unsigned long long)arg2 ;
-(BOOL)hasAlbums;
-(NSDate *)sagaLastSubscribedContainersUpdateTime;
-(void)setSagaLastSubscribedContainersUpdateTime:(NSDate *)arg1 ;
-(void)dealloc;
-(void)setSyncPlaylistId:(unsigned long long)arg1 ;
-(void)importArtworkTokenForEntityPersistentID:(unsigned long long)arg1 entityType:(long long)arg2 artworkToken:(id)arg3 artworkType:(long long)arg4 sourceType:(long long)arg5 ;
-(unsigned long long)_persistentIDForAssetURL:(id)arg1 ;
-(void)_reloadLibraryForContentsChangeWithNotificationInfo:(id)arg1 ;
-(void)getPlaylistWithUUID:(id)arg1 creationMetadata:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(long long)status;
-(BOOL)isValidAssetURL:(id)arg1 ;
-(BOOL)_checkHasContent:(BOOL*)arg1 determined:(BOOL*)arg2 mediaType:(unsigned long long)arg3 queryHasEntitiesBlock:(/*^block*/id)arg4 ;
-(BOOL)requiresAuthentication;
-(void)connectWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)setSagaDatabaseUserVersion:(long long)arg1 ;
-(NSString *)_syncValidity;
-(id)pathForAssetURL:(id)arg1 ;
-(void)setSagaOnDiskDatabaseRevision:(long long)arg1 ;
-(void)endGeneratingLibraryChangeNotifications;
-(os_unfair_lock_s)_MLCoreStorageLock;
-(void)addStoreItemIDs:(id)arg1 andAddTracksToCloudLibrary:(BOOL)arg2 withCompletion:(/*^block*/id)arg3 ;
-(void)_clearPendingDisconnection;
-(void)_clearCachedContentDataAndResultSets:(BOOL)arg1 ;
-(void)setValues:(id)arg1 forProperties:(id)arg2 forItemPersistentIDs:(id)arg3 ;
-(BOOL)removeItems:(id)arg1 ;
-(BOOL)itemExistsInDatabaseWithPersistentID:(unsigned long long)arg1 ;
-(void)beginGeneratingLibraryChangeNotifications;
-(void)clearSagaCloudAccountID;
-(void)_setMLCoreStorage:(id)arg1 ;
-(long long)cloudFilteringType;
-(void)_didReceiveMemoryWarning:(id)arg1 ;
-(void)addNonLibraryOwnedPlaylistsWithGlobalIDs:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)populateLocationPropertiesOfItem:(id)arg1 withPath:(id)arg2 assetProtectionType:(long long)arg3 ;
-(void)setSagaLastItemPlayDataUploadDate:(NSDate *)arg1 ;
-(BOOL)collectionExistsWithName:(id)arg1 groupingType:(long long)arg2 existentPID:(unsigned long long*)arg3 ;
-(id)entityWithMultiverseIdentifier:(id)arg1 ;
-(BOOL)hasMedia;
-(void)_reloadLibraryForPathChange;
-(BOOL)deleteItems:(id)arg1 ;
-(void)addPlaylistStoreItemsWithMetadata:(id)arg1 completion:(/*^block*/id)arg2 ;
-(id)init;
-(BOOL)importOriginalArtworkFromImageData:(id)arg1 withArtworkToken:(id)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4 mediaType:(unsigned long long)arg5 ;
-(BOOL)hasUserPlaylistsContainingAppleMusicContent;
-(id)entityWithPersistentID:(long long)arg1 entityType:(long long)arg2 ;
-(id)entityCache;
-(BOOL)hasVideos;
-(void)_performBlockOnLibraryHandlingTheSameAccount:(/*^block*/id)arg1 ;
-(id)uniqueIdentifier;
-(id)entityWithSpotlightIdentifier:(id)arg1 ;
-(id)completeMyCollectionArtworkDataSource;
-(id)_itemsForQueryCriteria:(id)arg1 ;
-(_MPActiveUserChangeMonitor *)activeUserChangeMonitor;
-(BOOL)hasMusicVideos;
-(id)_initWithUserIdentity:(id)arg1 ;
-(BOOL)_hasItemsForQueryCriteria:(id)arg1 ;
-(BOOL)hasGenres;
-(void)addStoreItemIDs:(id)arg1 referralObject:(id)arg2 andAddTracksToCloudLibrary:(BOOL)arg3 withCompletion:(/*^block*/id)arg4 ;
-(void)setSagaAccountID:(NSNumber *)arg1 ;
-(unsigned long long)syncGenerationID;
-(NSDate *)sagaLastItemPlayDataUploadDate;
-(BOOL)_hasCollectionsForQueryCriteria:(id)arg1 ;
-(unsigned long long)_countOfCollectionsForQueryCriteria:(id)arg1 ;
-(id)itemWithStoreID:(unsigned long long)arg1 ;
-(id)addPlaylistWithName:(id)arg1 activeGeniusPlaylist:(BOOL)arg2 ;
-(BOOL)performTransactionWithBlock:(/*^block*/id)arg1 ;
-(long long)sagaOnDiskDatabaseRevision;
-(BOOL)isEqual:(id)arg1 ;
-(BOOL)collectionExistsWithPersistentID:(unsigned long long)arg1 groupingType:(long long)arg2 ;
-(id)initWithCoder:(id)arg1 ;
-(BOOL)hasVideoITunesUContent;
-(long long)libraryChangeObservers;
-(BOOL)collectionExistsWithCloudUniversalLibraryID:(id)arg1 groupingType:(long long)arg2 existentPID:(unsigned long long*)arg3 ;
-(id)_getCachedValueForQueryCritiera:(id)arg1 valueCriteriaCache:(id)arg2 entitiesForCriteriaCache:(id)arg3 didLoadBlocksByQueryCriteria:(id)arg4 valueLoadedFromEntitiesArrayBlock:(/*^block*/id)arg5 loadValueFromDataProviderBlock:(/*^block*/id)arg6 ;
-(BOOL)hasMovies;
-(id)itemWithPersistentID:(unsigned long long)arg1 ;
-(unsigned)homeSharingDatabaseID;
-(id)playbackHistoryPlaylist;
-(NSNumber *)sagaAccountID;
-(void)setRemovalReason:(long long)arg1 ;
-(void)setActiveUserChangeMonitor:(_MPActiveUserChangeMonitor *)arg1 ;
-(void)geniusItemsForSeedItem:(id)arg1 completion:(/*^block*/id)arg2 ;
-(BOOL)collectionExistsContainedWithinPersistentIDs:(const unsigned long long*)arg1 count:(unsigned long long)arg2 groupingType:(long long)arg3 existentPID:(unsigned long long*)arg4 ;
-(id)playlistWithPersistentID:(unsigned long long)arg1 ;
-(void)clearSagaLastPlaylistPlayDataUploadDate;
-(void)_canShowCloudTracksDidChangeNotification:(id)arg1 ;
-(id)itemWithPersistentID:(unsigned long long)arg1 verifyExistence:(BOOL)arg2 ;
-(void)enumerateEntityChangesAfterSyncAnchor:(id)arg1 usingBlock:(/*^block*/id)arg2 ;
-(shared_ptr<mlcore::DeviceLibrary>*)_MediaLibrary_coreLibrary;
-(void)encodeWithCoder:(id)arg1 ;
-(BOOL)hasMovieRentals;
-(BOOL)setValue:(id)arg1 forDatabaseProperty:(id)arg2 ;
-(void)addNonLibraryOwnedPlaylistWithGlobalID:(id)arg1 completion:(/*^block*/id)arg2 ;
-(BOOL)deleteDatabaseProperty:(id)arg1 ;
-(unsigned long long)syncPlaylistId;
-(BOOL)playlistExistsWithPersistentID:(unsigned long long)arg1 ;
-(BOOL)collectionExistsContainedWithinSyncIDs:(id)arg1 groupingType:(long long)arg2 existentPID:(unsigned long long*)arg3 ;
-(os_unfair_lock_s*)_MLCoreStorageLockPointer;
-(BOOL)hasHomeVideos;
-(id)collectionWithPersistentID:(unsigned long long)arg1 groupingType:(long long)arg2 ;
-(BOOL)hasArtists;
-(BOOL)isHomeSharingLibrary;
-(BOOL)_handlesSameAccountAs:(id)arg1 ;
-(id)URLForHomeSharingRequest:(id)arg1 ;
-(unsigned long long)currentEntityRevision;
-(void)connectWithAuthenticationData:(id)arg1 completionBlock:(/*^block*/id)arg2 ;
-(BOOL)hasUbiquitousBookmarkableItems;
-(BOOL)recordPlayEventForPlaylistPersistentID:(long long)arg1 ;
-(void)setSagaLastLibraryUpdateTime:(NSDate *)arg1 ;
-(id)preferredSubtitleLanguages;
-(void)setSagaLastPlaylistPlayDataUploadDate:(NSDate *)arg1 ;
-(id)syncValidity;
-(id)_collectionsForQueryCriteria:(id)arg1 ;
-(long long)sagaDatabaseUserVersion;
-(id)collectionWithPersistentID:(unsigned long long)arg1 groupingType:(long long)arg2 verifyExistence:(BOOL)arg3 ;
-(unsigned long long)hash;
-(void)_removeConnectionAssertion:(id)arg1 ;
-(ML3MusicLibrary *)ml3Library;
-(id)multiverseIdentifierForTrackWithPersistentID:(long long)arg1 ;
-(void)populateLocationPropertiesOfItem:(id)arg1 withPath:(id)arg2 assetProtectionType:(long long)arg3 completionBlock:(/*^block*/id)arg4 ;
-(NSURL *)protectedContentSupportStorageURL;
-(BOOL)hasVideoPodcasts;
-(id)multiverseIdentifierForCollectionWithPersistentID:(long long)arg1 groupingType:(long long)arg2 ;
-(void)addGlobalPlaylistWithID:(id)arg1 andAddToCloudLibrary:(BOOL)arg2 completion:(/*^block*/id)arg3 ;
-(id)name;
-(id)localizedSectionIndexTitles;
-(id)_MLCoreStorage;
-(BOOL)hasPodcasts;
-(BOOL)hasCompilations;
-(id)decodeItemWithCoder:(id)arg1 ;
-(BOOL)hasITunesUContent;
-(void)downloadAsset:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(NSDate *)lastModifiedDate;
-(BOOL)hasAddedToLibraryAppleMusicContent;
-(void)addItemWithProductID:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(NSDate *)sagaLastPlaylistPlayDataUploadDate;
-(void)setCloudFilteringType:(long long)arg1 ;
-(void)performReadTransactionWithBlock:(/*^block*/id)arg1 ;
-(NSString *)description;
-(BOOL)hasGeniusMixes;
-(BOOL)hasUserPlaylists;
-(void)activeUserChangeDidFinish;
@end

