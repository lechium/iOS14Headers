//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "CLLocationManagerDelegate-Protocol.h"
#import "FMFSessionDelegate-Protocol.h"

@class CLLocationManager, FMDataArchiver, FMFSession, NSArray, NSDictionary, NSSet, NSString;
@protocol FMFFencesMgrDelegate;

@interface FMFFencesMgr : NSObject <FMFSessionDelegate, CLLocationManagerDelegate>
{
    _Bool _networkAvailable;	// 8 = 0x8
    NSString *_triggerURL;	// 16 = 0x10
    NSString *_fenceVersion;	// 24 = 0x18
    double _triggerValidityDuration;	// 32 = 0x20
    id <FMFFencesMgrDelegate> _delegate;	// 40 = 0x28
    NSArray *_fencesToMonitor;	// 48 = 0x30
    NSSet *_allFences;	// 56 = 0x38
    NSDictionary *_monitoredFences;	// 64 = 0x40
    CLLocationManager *_locMgr;	// 72 = 0x48
    FMDataArchiver *_dataArchiver;	// 80 = 0x50
    FMFSession *_session;	// 88 = 0x58
}

+ (id)sharedInstance;	// IMP=0x000000010001c6dc
- (void).cxx_destruct;	// IMP=0x000000010001f9d0
@property(nonatomic, getter=isNetworkAvailable) _Bool networkAvailable; // @synthesize networkAvailable=_networkAvailable;
@property(readonly, nonatomic) FMFSession *session; // @synthesize session=_session;
@property(retain, nonatomic) FMDataArchiver *dataArchiver; // @synthesize dataArchiver=_dataArchiver;
@property(retain, nonatomic) CLLocationManager *locMgr; // @synthesize locMgr=_locMgr;
@property(retain, nonatomic) NSDictionary *monitoredFences; // @synthesize monitoredFences=_monitoredFences;
@property(retain, nonatomic) NSSet *allFences; // @synthesize allFences=_allFences;
@property(retain, nonatomic) NSArray *fencesToMonitor; // @synthesize fencesToMonitor=_fencesToMonitor;
@property(nonatomic) __weak id <FMFFencesMgrDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) double triggerValidityDuration; // @synthesize triggerValidityDuration=_triggerValidityDuration;
@property(retain, nonatomic) NSString *fenceVersion; // @synthesize fenceVersion=_fenceVersion;
@property(retain, nonatomic) NSString *triggerURL; // @synthesize triggerURL=_triggerURL;
- (id)CLErrorAsString:(long long)arg1;	// IMP=0x000000010001f7f8
- (void)showDebugFenceTriggerAlertIfNeededWithTitle:(id)arg1 text:(id)arg2;	// IMP=0x000000010001f608
- (void)locationManager:(id)arg1 didStartMonitoringForRegion:(id)arg2;	// IMP=0x000000010001f590
- (void)locationManager:(id)arg1 monitoringDidFailForRegion:(id)arg2 withError:(id)arg3;	// IMP=0x000000010001f3ac
- (void)locationManager:(id)arg1 didFailWithError:(id)arg2;	// IMP=0x000000010001f278
- (void)locationManager:(id)arg1 didExitRegion:(id)arg2;	// IMP=0x000000010001f100
- (void)locationManager:(id)arg1 didEnterRegion:(id)arg2;	// IMP=0x000000010001ef88
- (void)didUpdateFences:(id)arg1;	// IMP=0x000000010001ef7c
- (void)networkReachabilityUpdated:(_Bool)arg1;	// IMP=0x000000010001ef70
- (id)_currentFences;	// IMP=0x000000010001ef0c
- (id)_fencesCacheFileURL;	// IMP=0x000000010001ed9c
- (void)_readFencesToMonitorCache;	// IMP=0x000000010001eaa4
- (void)_updateFencesToMonitorCache;	// IMP=0x000000010001e630
- (void)_trigger:(long long)arg1 forRegionWithID:(id)arg2 atLocation:(id)arg3;	// IMP=0x000000010001e180
- (void)_updateCL;	// IMP=0x000000010001dc04
- (id)fenceWithID:(id)arg1;	// IMP=0x000000010001d75c
- (id)updatedFenceForFence:(id)arg1;	// IMP=0x000000010001d5f8
- (void)__updateMonitoredFences;	// IMP=0x000000010001d3f8
- (void)_updateMonitoredFences;	// IMP=0x000000010001d39c
@property(readonly, copy) NSString *description;
- (_Bool)isFenceBeingMonitored:(id)arg1;	// IMP=0x000000010001d06c
- (void)setFencesToMonitor:(id)arg1 withFenceVersion:(id)arg2 triggerValidityDuration:(double)arg3 andTriggerURL:(id)arg4;	// IMP=0x000000010001cfa0
- (void)stop;	// IMP=0x000000010001ce0c
- (void)start;	// IMP=0x000000010001cb58
- (void)dealloc;	// IMP=0x000000010001c9bc
- (id)init;	// IMP=0x000000010001c748

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

