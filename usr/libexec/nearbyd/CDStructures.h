//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

@class RBSProcessState;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AOAHypothesis;

struct AoARad {
    float _field1;
    float _field2;
};

struct AuthorizationState {
    long long _field1;
    struct optional<double> _field2;
};

struct ConnectionEventTriggerDescriptor {
    unsigned int connection_interval_ms;
};

struct DaisyChainServiceRequest;

struct FilteredSolution {
    double _field1;
    unsigned long long _field2;
    struct set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    double _field15;
    int _field16;
};

struct GRConfig {
    _Bool requiresAcqSignalAfterSync;
    _Bool usesBLEAdv;
    _Bool sendTrackingAssistanceData;
    unsigned char appleBLEAdvType;
    unsigned char jobType;
    unsigned char sessionDataProtocolVersion;
};

struct PRConfigurationManager;

struct PRNearbyInteractionClientInfo {
    id _field1;
    int _field2;
};

struct PRRangingManagerClient;

struct PRUWBDeviceCapabilities {
    _Bool _field1;
    _Bool _field2;
};

struct PRUnifiedAppState {
    RBSProcessState *processState;
    int appState;
};

struct RangeEnableParameters {
    struct optional<unsigned char> ses_role;
    struct optional<unsigned char> tx_ant_mask;
    struct optional<unsigned char> rx_ant_mask;
    struct optional<unsigned char> rx_sync_search_ant_mask;
    struct optional<unsigned char> tx_preamble;
    struct optional<unsigned char> rx_preamble;
    struct optional<unsigned char> tx_pkt_type;
    struct optional<unsigned char> rx_pkt_type;
    struct optional<unsigned char> tx_mslot_sz_250us;
    struct optional<unsigned char> rx_mslot_sz_250us;
    struct optional<unsigned short> debug_flags;
    struct optional<unsigned long long> start_time;
    struct optional<unsigned int> start_time_uncertainty;
    struct optional<unsigned char> rf_channel;
    struct optional<unsigned char> dual_ranging_enable;
    struct optional<unsigned char> tx_ant_mask2;
    struct optional<unsigned char> rx_ant_mask2;
    struct optional<unsigned char> rx_sync_search_ant_mask2;
    struct optional<short> soi_rssi_thd2;
    struct optional<unsigned short> interval_ms;
    struct optional<unsigned long long> base_mac_addr;
    struct optional<unsigned short> interval_min_ms;
    struct optional<unsigned short> interval_max_ms;
    struct optional<unsigned char> naccess_slots_min;
    struct optional<unsigned char> naccess_slots_max;
    struct optional<unsigned long long> peer_addr;
    struct optional<unsigned char> gr_type;
    struct optional<unsigned char> start_channel;
    struct optional<unsigned char> alternate_channel;
    struct optional<unsigned char> channel_hop_pattern_mask;
    struct optional<unsigned short> ncycles;
    struct optional<unsigned char> access_slot_idx;
    struct optional<std::__1::array<unsigned char, 16>> sts_cipher_blob;
    struct optional<unsigned long long> local_addr;
    struct optional<rose::GRConfig> gr_config;
};

struct RangeResult {
    struct optional<unsigned char> _field1;
    _Bool _field2;
    struct optional<double> _field3;
    int _field4;
    double _field5;
    unsigned short _field6;
    unsigned long long _field7;
    struct vector<double, std::__1::allocator<double>> _field8;
    struct RangeResultEvent _field9;
};

struct RangeResultEvent {
    unsigned short _field1;
    unsigned short _field2;
    unsigned char _field3;
    double _field4;
    unsigned short _field5;
    unsigned char _field6;
    struct array<unsigned char, 8> _field7;
    double _field8;
    struct vector<Rose::AOAHypothesis, std::__1::allocator<Rose::AOAHypothesis>> _field9;
    double _field10;
    double _field11;
    struct optional<double> _field12;
    struct optional<double> _field13;
    struct optional<double> _field14;
    double _field15;
    double _field16;
    struct optional<double> _field17;
    struct optional<double> _field18;
    unsigned short _field19;
    unsigned int _field20;
    double _field21;
    double _field22;
    unsigned char _field23;
    struct optional<double> _field24;
    struct optional<double> _field25;
    struct optional<double> _field26;
    unsigned char _field27;
    unsigned short _field28;
    unsigned short _field29;
    unsigned short _field30;
    struct optional<double> _field31;
    struct optional<double> _field32;
};

struct RemoteSessionData {
    double _field1;
    unsigned short _field2;
    unsigned long long _field3;
    struct SessionState _field4;
};

struct ResponderSuperframeStats {
    double _field1;
    unsigned short _field2;
    struct SlaveSFCompleteEvent _field3;
    struct optional<double> _field4;
};

struct RoseDeviceDescriptor {
    int type;
    struct optional<std::__1::array<unsigned char, 16>> uuid;
    struct optional<std::__1::array<unsigned char, 8>> rose_mac_address;
    struct optional<std::__1::array<unsigned char, 6>> bt_adv_address;
};

struct RoseServiceRequest {
    unsigned char role;
    int mac_mode;
    optional_70f095c2 peer;
    int measurement_type;
    int qos;
    int channel_diversity_preference;
    struct RangeEnableParameters range_enable_params;
    struct vector<rose::DaisyChainServiceRequest, std::__1::allocator<rose::DaisyChainServiceRequest>> chained_requests;
};

struct RoseSolution {
    double _field1;
    struct optional<double> _field2;
    int _field3;
    unsigned short _field4;
    unsigned long long _field5;
    struct optional<rose::RangeResult> _field6;
    struct optional<RoseSensorFusion::FilteredSolution> _field7;
    struct optional<rose::ResponderSuperframeStats> _field8;
};

struct RoseStartRangingOptions {
    optional_70f095c2 peer;
    unsigned long long start_time_offset_usec;
    unsigned int listening_window_usec;
    int timebase;
    struct optional<rose::ConnectionEventTriggerDescriptor> conn_evt_trigger_desc;
};

struct ServiceRequestStatusUpdate {
    unsigned short _field1;
    int _field2;
    int _field3;
};

struct SessionStartNotification {
    int _field1;
    unsigned short _field2;
    struct optional<unsigned long long> _field3;
    double _field4;
    struct optional<double> _field5;
};

struct SessionState {
    unsigned char _field1;
    unsigned char _field2;
    unsigned char _field3[14];
};

struct SlaveSFCompleteEvent {
    unsigned short _field1;
    unsigned short _field2;
    unsigned char _field3;
    double _field4;
    struct array<unsigned char, 8> _field5;
    unsigned short _field6;
    unsigned short _field7;
    unsigned short _field8;
    unsigned char _field9;
    unsigned char _field10;
    unsigned char _field11;
    unsigned char _field12;
    unsigned char _field13;
    unsigned char _field14;
    double _field15;
    unsigned char _field16;
    unsigned char _field17;
    unsigned char _field18;
    unsigned char _field19;
    struct vector<Rose::SlaveSFRxPacketInfo, std::__1::allocator<Rose::SlaveSFRxPacketInfo>> _field20;
};

struct SlaveSFRxPacketInfo;

struct UWBSessionInterruptionBookkeeping;

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UWBSessionInterruptionReasonInternal, UWBSessionInterruptionBookkeeping>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UWBSessionInterruptionReasonInternal, UWBSessionInterruptionBookkeeping>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, AuthorizationState>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, AuthorizationState>, void *>*> *__next_;
};

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct array<unsigned char, 16> {
    unsigned char __elems_[16];
};

struct array<unsigned char, 6> {
    unsigned char __elems_[6];
};

struct array<unsigned char, 8> {
    unsigned char __elems_[8];
};

struct atomic<bool> {
    struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool>> {
        _Atomic _Bool __a_value;
    } __a_;
};

struct atomic<unsigned long> {
    struct __cxx_atomic_impl<unsigned long, std::__1::__cxx_atomic_base_impl<unsigned long>> {
        _Atomic unsigned long long __a_value;
    } __a_;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *_field1;
                    unsigned long long _field2;
                    unsigned long long _field3;
                } _field1;
                struct __short {
                    char _field1[23];
                    struct {
                        unsigned char _field1;
                    } _field2;
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
};

struct duration<long long, std::__1::ratio<1, 1000>> {
    long long _field1;
};

struct map<unsigned long long, double, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, double>>> {
    struct __tree<std::__1::__value_type<unsigned long long, double>, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, double>, std::__1::less<unsigned long long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long long, double>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long long, double>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, double>, std::__1::less<unsigned long long>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct mutex {
    struct _opaque_pthread_mutex_t {
        long long __sig;
        char __opaque[56];
    } __m_;
};

struct optional<PRUnifiedAppState> {
    union {
        char __null_state_;
        struct PRUnifiedAppState __val_;
    } ;
    _Bool __engaged_;
};

struct optional<RoseSensorFusion::FilteredSolution> {
    union {
        char _field1;
        struct FilteredSolution _field2;
    } _field1;
    _Bool _field2;
};

struct optional<double> {
    union {
        char _field1;
        double _field2;
    } _field1;
    _Bool _field2;
};

struct optional<rose::ConnectionEventTriggerDescriptor> {
    union {
        char __null_state_;
        struct ConnectionEventTriggerDescriptor __val_;
    } ;
    _Bool __engaged_;
};

struct optional<rose::GRConfig> {
    union {
        char __null_state_;
        struct GRConfig __val_;
    } ;
    _Bool __engaged_;
};

struct optional<rose::RangeResult> {
    union {
        char _field1;
        struct RangeResult _field2;
    } _field1;
    _Bool _field2;
};

struct optional<rose::ResponderSuperframeStats> {
    union {
        char _field1;
        struct ResponderSuperframeStats _field2;
    } _field1;
    _Bool _field2;
};

struct optional<rose::RoseDeviceDescriptor> {
    union {
        char __null_state_;
        struct RoseDeviceDescriptor __val_;
    } ;
    _Bool __engaged_;
};

struct optional<rose::RoseServiceRequest> {
    union {
        char __null_state_;
        struct RoseServiceRequest __val_;
    } ;
    _Bool __engaged_;
};

struct optional<rose::RoseStartRangingOptions> {
    union {
        char __null_state_;
        struct RoseStartRangingOptions __val_;
    } ;
    _Bool __engaged_;
};

struct optional<short> {
    union {
        char __null_state_;
        short __val_;
    } ;
    _Bool __engaged_;
};

struct optional<std::__1::array<unsigned char, 16>> {
    union {
        char __null_state_;
        struct array<unsigned char, 16> __val_;
    } ;
    _Bool __engaged_;
};

struct optional<std::__1::array<unsigned char, 6>> {
    union {
        char __null_state_;
        struct array<unsigned char, 6> __val_;
    } ;
    _Bool __engaged_;
};

struct optional<std::__1::array<unsigned char, 8>> {
    union {
        char __null_state_;
        struct array<unsigned char, 8> __val_;
    } ;
    _Bool __engaged_;
};

struct optional<unsigned char> {
    union {
        char __null_state_;
        unsigned char __val_;
    } ;
    _Bool __engaged_;
};

struct optional<unsigned int> {
    union {
        char __null_state_;
        unsigned int __val_;
    } ;
    _Bool __engaged_;
};

struct optional<unsigned long long> {
    union {
        char __null_state_;
        unsigned long long __val_;
    } ;
    _Bool __engaged_;
};

struct optional<unsigned short> {
    union {
        char __null_state_;
        unsigned short __val_;
    } ;
    _Bool __engaged_;
};

struct os_unfair_lock_s {
    unsigned int _os_unfair_lock_opaque;
};

struct set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>> {
    struct __tree<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<unsigned short, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<unsigned short>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct shared_ptr<PRConfigurationManager> {
    struct PRConfigurationManager *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<PRRangingManagerClient> {
    struct PRRangingManagerClient *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct unique_ptr<rose::RoseServiceRequest, std::__1::default_delete<rose::RoseServiceRequest>> {
    struct __compressed_pair<rose::RoseServiceRequest *, std::__1::default_delete<rose::RoseServiceRequest>> {
        struct RoseServiceRequest *__value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UWBSessionInterruptionReasonInternal, UWBSessionInterruptionBookkeeping>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UWBSessionInterruptionReasonInternal, UWBSessionInterruptionBookkeeping>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UWBSessionInterruptionReasonInternal, UWBSessionInterruptionBookkeeping>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UWBSessionInterruptionReasonInternal, UWBSessionInterruptionBookkeeping>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UWBSessionInterruptionReasonInternal, UWBSessionInterruptionBookkeeping>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UWBSessionInterruptionReasonInternal, UWBSessionInterruptionBookkeeping>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UWBSessionInterruptionReasonInternal, UWBSessionInterruptionBookkeeping>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, AuthorizationState>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, AuthorizationState>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, AuthorizationState>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, AuthorizationState>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, AuthorizationState>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, AuthorizationState>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, AuthorizationState>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_map<UWBSessionInterruptionReasonInternal, UWBSessionInterruptionBookkeeping, std::__1::hash<UWBSessionInterruptionReasonInternal>, std::__1::equal_to<UWBSessionInterruptionReasonInternal>, std::__1::allocator<std::__1::pair<const UWBSessionInterruptionReasonInternal, UWBSessionInterruptionBookkeeping>>> {
    struct __hash_table<std::__1::__hash_value_type<UWBSessionInterruptionReasonInternal, UWBSessionInterruptionBookkeeping>, std::__1::__unordered_map_hasher<UWBSessionInterruptionReasonInternal, std::__1::__hash_value_type<UWBSessionInterruptionReasonInternal, UWBSessionInterruptionBookkeeping>, std::__1::hash<UWBSessionInterruptionReasonInternal>, true>, std::__1::__unordered_map_equal<UWBSessionInterruptionReasonInternal, std::__1::__hash_value_type<UWBSessionInterruptionReasonInternal, UWBSessionInterruptionBookkeeping>, std::__1::equal_to<UWBSessionInterruptionReasonInternal>, true>, std::__1::allocator<std::__1::__hash_value_type<UWBSessionInterruptionReasonInternal, UWBSessionInterruptionBookkeeping>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UWBSessionInterruptionReasonInternal, UWBSessionInterruptionBookkeeping>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UWBSessionInterruptionReasonInternal, UWBSessionInterruptionBookkeeping>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UWBSessionInterruptionReasonInternal, UWBSessionInterruptionBookkeeping>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UWBSessionInterruptionReasonInternal, UWBSessionInterruptionBookkeeping>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UWBSessionInterruptionReasonInternal, UWBSessionInterruptionBookkeeping>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<UWBSessionInterruptionReasonInternal, std::__1::__hash_value_type<UWBSessionInterruptionReasonInternal, UWBSessionInterruptionBookkeeping>, std::__1::hash<UWBSessionInterruptionReasonInternal>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<UWBSessionInterruptionReasonInternal, std::__1::__hash_value_type<UWBSessionInterruptionReasonInternal, UWBSessionInterruptionBookkeeping>, std::__1::equal_to<UWBSessionInterruptionReasonInternal>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<int, AuthorizationState, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, AuthorizationState>>> {
    struct __hash_table<std::__1::__hash_value_type<int, AuthorizationState>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, AuthorizationState>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, AuthorizationState>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, AuthorizationState>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, AuthorizationState>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, AuthorizationState>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, AuthorizationState>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, AuthorizationState>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, AuthorizationState>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, AuthorizationState>, std::__1::hash<int>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, AuthorizationState>, std::__1::equal_to<int>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct vector<Rose::AOAHypothesis, std::__1::allocator<Rose::AOAHypothesis>> {
    struct AOAHypothesis *_field1;
    struct AOAHypothesis *_field2;
    struct __compressed_pair<Rose::AOAHypothesis *, std::__1::allocator<Rose::AOAHypothesis>> {
        struct AOAHypothesis *_field1;
    } _field3;
};

struct vector<Rose::SlaveSFRxPacketInfo, std::__1::allocator<Rose::SlaveSFRxPacketInfo>> {
    struct SlaveSFRxPacketInfo *_field1;
    struct SlaveSFRxPacketInfo *_field2;
    struct __compressed_pair<Rose::SlaveSFRxPacketInfo *, std::__1::allocator<Rose::SlaveSFRxPacketInfo>> {
        struct SlaveSFRxPacketInfo *_field1;
    } _field3;
};

struct vector<UWBSessionInterruptionBookkeeping, std::__1::allocator<UWBSessionInterruptionBookkeeping>> {
    struct UWBSessionInterruptionBookkeeping *__begin_;
    struct UWBSessionInterruptionBookkeeping *__end_;
    struct __compressed_pair<UWBSessionInterruptionBookkeeping *, std::__1::allocator<UWBSessionInterruptionBookkeeping>> {
        struct UWBSessionInterruptionBookkeeping *__value_;
    } __end_cap_;
};

struct vector<double, std::__1::allocator<double>> {
    double *_field1;
    double *_field2;
    struct __compressed_pair<double *, std::__1::allocator<double>> {
        double *_field1;
    } _field3;
};

struct vector<rose::DaisyChainServiceRequest, std::__1::allocator<rose::DaisyChainServiceRequest>> {
    struct DaisyChainServiceRequest *__begin_;
    struct DaisyChainServiceRequest *__end_;
    struct __compressed_pair<rose::DaisyChainServiceRequest *, std::__1::allocator<rose::DaisyChainServiceRequest>> {
        struct DaisyChainServiceRequest *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *_field1;
                    unsigned long long _field2;
                    unsigned long long _field3;
                } _field1;
                struct __short {
                    char _field1[23];
                    struct {
                        unsigned char _field1;
                    } _field2;
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
} basic_string_7c0a1c0b;

typedef struct duration<long long, std::__1::ratio<1, 1000>> {
    long long _field1;
} duration_34584d68;

typedef struct optional<rose::RoseDeviceDescriptor> {
    union {
        char __null_state_;
        struct RoseDeviceDescriptor __val_;
    } ;
    _Bool __engaged_;
} optional_70f095c2;

typedef struct shared_ptr<PRConfigurationManager> {
    struct PRConfigurationManager *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_3baa22f1;

typedef struct shared_ptr<PRRangingManagerClient> {
    struct PRRangingManagerClient *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_55175bc8;

