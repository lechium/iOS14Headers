//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "RDAnalyticsEventListenerDelegate-Protocol.h"
#import "RDAuthorizationBroadcasterDelegate-Protocol.h"
#import "RDGizmoSyncDelegate-Protocol.h"
#import "RDLaunchEventsDelegate-Protocol.h"
#import "SRAuthorizationStoreDelegate-Protocol.h"
#import "SRSensorKitServiceServerDebugging-Protocol.h"
#import "SRSensorKitServiceServerPruning-Protocol.h"
#import "SRSensorKitServiceServerReading-Protocol.h"
#import "SRSensorKitServiceServerWriting-Protocol.h"

@class NSString, RDAnalyticsEventListener, RDAppLauncher, RDAuthorizationBroadcaster, RDClientInterestCache, RDDefaults, RDFileURLs, RDGizmoSyncService, RDIDSMessageEventListener, RDLaunchEvents, RDListener, RDNotifier, RDStateCache;
@protocol OS_dispatch_queue, RDGizmoSyncing, RDTimeTelling;

@interface RDDaemon : NSObject <SRSensorKitServiceServerReading, SRSensorKitServiceServerWriting, SRSensorKitServiceServerPruning, SRAuthorizationStoreDelegate, RDGizmoSyncDelegate, RDLaunchEventsDelegate, RDAnalyticsEventListenerDelegate, SRSensorKitServiceServerDebugging, RDAuthorizationBroadcasterDelegate>
{
    _Bool _active;	// 8 = 0x8
    RDListener *_readerListener;	// 16 = 0x10
    RDListener *_writerListener;	// 24 = 0x18
    RDListener *_prunerListener;	// 32 = 0x20
    RDListener *_debuggingListener;	// 40 = 0x28
    id <RDGizmoSyncing> _gizmoSync;	// 48 = 0x30
    RDAuthorizationBroadcaster *_authorizationBroadcaster;	// 56 = 0x38
    RDClientInterestCache *_clientInterest;	// 64 = 0x40
    RDAppLauncher *_appLauncher;	// 72 = 0x48
    RDLaunchEvents *_launchEvents;	// 80 = 0x50
    NSObject<OS_dispatch_queue> *_q;	// 88 = 0x58
    RDDefaults *_defaults;	// 96 = 0x60
    RDFileURLs *_fileURLs;	// 104 = 0x68
    RDIDSMessageEventListener *_IDSMessageEventListener;	// 112 = 0x70
    RDAnalyticsEventListener *_analyticsEventListener;	// 120 = 0x78
    RDGizmoSyncService *_gizmoSyncService;	// 128 = 0x80
    RDNotifier *_notifier;	// 136 = 0x88
    RDStateCache *_stateCache;	// 144 = 0x90
    id <RDTimeTelling> _timeOracle;	// 152 = 0x98
}

+ (void)initialize;	// IMP=0x00000001000247b0
@property(retain, nonatomic) RDListener *debuggingListener; // @synthesize debuggingListener=_debuggingListener;
@property(retain, nonatomic) RDListener *prunerListener; // @synthesize prunerListener=_prunerListener;
@property(retain, nonatomic) RDListener *writerListener; // @synthesize writerListener=_writerListener;
@property(retain, nonatomic) RDListener *readerListener; // @synthesize readerListener=_readerListener;
- (void)listDatastoreWithReply:(CDUnknownBlockType)arg1;	// IMP=0x000000010002c140
- (void)dumpStateCacheWithReply:(CDUnknownBlockType)arg1;	// IMP=0x000000010002c00c
- (void)dumpClientsWithReply:(CDUnknownBlockType)arg1;	// IMP=0x000000010002bdc4
- (long long)prerequisitesStatusForAnalytics:(id)arg1;	// IMP=0x000000010002bdb8
- (id)currentRecordingStatesForAnalytics:(id)arg1;	// IMP=0x000000010002bdb4
- (void)gizmoSync:(id)arg1 didSyncRTCOffset:(double)arg2 timeBeforeUpdate:(double)arg3;	// IMP=0x000000010002baac
- (void)gizmoSync:(id)arg1 didSyncRecordingState:(id)arg2 deviceID:(id)arg3;	// IMP=0x000000010002b7b4
- (void)gizmoSyncConnectedDevicesAdded:(id)arg1;	// IMP=0x000000010002b724
- (void)gizmoSync:(id)arg1 shouldStartRecordingForSensor:(id)arg2;	// IMP=0x000000010002b6a8
- (void)gizmoSync:(id)arg1 shouldStopRecordingForSensor:(id)arg2;	// IMP=0x000000010002b62c
- (long long)launchEventQueryPurgeableSpaceOlderThan:(long long)arg1;	// IMP=0x000000010002b3a4
- (long long)launchEventPurgeSpaceOlderThan:(long long)arg1;	// IMP=0x000000010002b1c8
- (void)launchEventCheckInActivity:(id)arg1;	// IMP=0x000000010002b154
- (void)launchEventXPCEventReceived:(id)arg1;	// IMP=0x000000010002b04c
- (void)launchEventRunActivity:(id)arg1;	// IMP=0x0000000100029bbc
- (void)authorizationBroadcaster:(id)arg1 didSetDataCollectionEnabled:(_Bool)arg2;	// IMP=0x0000000100029b44
- (void)authorizationStore:(id)arg1 resetAuthorizations:(id)arg2 forBundleId:(id)arg3;	// IMP=0x0000000100029a54
- (void)authorizationStore:(id)arg1 revokedAuthorizations:(id)arg2 forBundleId:(id)arg3;	// IMP=0x0000000100029a48
- (void)authorizationStore:(id)arg1 grantedAuthorizations:(id)arg2 forBundleId:(id)arg3;	// IMP=0x00000001000299cc
- (void)authorizationStore:(id)arg1 didDetermineInitialAuthorizationValues:(id)arg2;	// IMP=0x0000000100029858
- (id)bundleIdForConnection:(id)arg1;	// IMP=0x00000001000292f4
- (id)valueForEntitlement:(id)arg1 connection:(id)arg2;	// IMP=0x00000001000292e4
- (void)removeAllSamplesForAllSensors;	// IMP=0x000000010002900c
- (void)removeAllSamplesForCurrentSensor;	// IMP=0x0000000100028e88
- (void)requestFileHandleForPruningAfterSegment:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0000000100028784
- (void)requestFileHandleForPruningSample:(double)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00000001000284b8
- (void)startPruningForSensor:(id)arg1 deviceId:(id)arg2;	// IMP=0x00000001000282f8
- (void)requestFileHandleForWritingWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0000000100027d54
- (void)startWritingForSensor:(id)arg1;	// IMP=0x0000000100027a88
- (void)fetchAllDevices:(id)arg1 idOnly:(_Bool)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x0000000100027810
- (void)fetchReaderMetadata:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0000000100027658
- (void)stopRecording:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0000000100027648
- (void)startRecording:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00000001000274d8
- (void)requestFileHandleForReading:(id)arg1 afterSegment:(id)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x0000000100027080
- (void)requestFileHandleForReading:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0000000100026eb4
- (void)dealloc;	// IMP=0x000000010002595c

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

