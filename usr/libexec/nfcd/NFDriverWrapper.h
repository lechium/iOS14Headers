//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class NFCoreTelephonyConnection, NFFieldNotification, NFTimer, NSData, NSDate, NSLock, NSMutableDictionary;
@protocol NFDriverWrapperDelegate, NFDriverWrapperExpressDelegate, NFDriverWrapperTransactionDelegate;

@interface NFDriverWrapper : NSObject
{
    struct _NFDriver *_driver;	// 8 = 0x8
    int _sessionCount;	// 16 = 0x10
    NSLock *_fieldPresentLock;	// 24 = 0x18
    NFTimer *_fieldAssertionTimer;	// 32 = 0x20
    NFTimer *_fieldCoalescingTimer;	// 40 = 0x28
    _Bool _technologyEventSent;	// 48 = 0x30
    _Bool _isClosing;	// 49 = 0x31
    unsigned long long _lastFieldOffTime;	// 56 = 0x38
    NFFieldNotification *_fieldNotification;	// 64 = 0x40
    NFCoreTelephonyConnection *_ctConnection;	// 72 = 0x48
    NSMutableDictionary *_remoteTags;	// 80 = 0x50
    _Bool _fieldPresent;	// 88 = 0x58
    NSMutableDictionary *_sessionOwners;	// 96 = 0x60
    _Bool _failForwardRecoveryStored;	// 104 = 0x68
    int _restoreState;	// 108 = 0x6c
    NSDate *_readerStartTime;	// 112 = 0x70
    NFTimer *_readermodeBurnoutProtectionTimer;	// 120 = 0x78
    NFTimer *_readermodeBurnoutProtectionDebounceTimer;	// 128 = 0x80
    unsigned int _burnoutProtectionState;	// 136 = 0x88
    NSLock *_burnoutStateLock;	// 144 = 0x90
    NSDate *_lastPowerStateQuery;	// 152 = 0x98
    unsigned int _routingConfigUpdate;	// 160 = 0xa0
    _Bool _hasTransactionEnded;	// 164 = 0xa4
    _Bool _hasSentRAPDU;	// 165 = 0xa5
    _Bool _hasAntenna;	// 166 = 0xa6
    _Bool _powersOffOnSleep;	// 167 = 0xa7
    _Bool _useExpressModeCoalescing;	// 168 = 0xa8
    _Bool _legacyExpress;	// 169 = 0xa9
    int _flags;	// 172 = 0xac
    unsigned int _pollingPeriod;	// 176 = 0xb0
    unsigned int _genericATxHappenedTimeout;	// 180 = 0xb4
    NSObject<NFDriverWrapperDelegate> *_delegate;	// 184 = 0xb8
    NSObject<NFDriverWrapperTransactionDelegate> *_seDelegate;	// 192 = 0xc0
    NSObject<NFDriverWrapperExpressDelegate> *_expressDelegate;	// 200 = 0xc8
    NSData *_chipscopeConfig;	// 208 = 0xd0
}

- (void).cxx_destruct;	// IMP=0x00000001000cb764
@property(readonly) _Bool legacyExpress; // @synthesize legacyExpress=_legacyExpress;
@property _Bool useExpressModeCoalescing; // @synthesize useExpressModeCoalescing=_useExpressModeCoalescing;
@property(retain) NSData *chipscopeConfig; // @synthesize chipscopeConfig=_chipscopeConfig;
@property unsigned int genericATxHappenedTimeout; // @synthesize genericATxHappenedTimeout=_genericATxHappenedTimeout;
@property unsigned int pollingPeriod; // @synthesize pollingPeriod=_pollingPeriod;
@property int flags; // @synthesize flags=_flags;
@property(readonly) _Bool powersOffOnSleep; // @synthesize powersOffOnSleep=_powersOffOnSleep;
@property(readonly) _Bool hasAntenna; // @synthesize hasAntenna=_hasAntenna;
@property _Bool hasSentRAPDU; // @synthesize hasSentRAPDU=_hasSentRAPDU;
@property _Bool hasTransactionEnded; // @synthesize hasTransactionEnded=_hasTransactionEnded;
@property NSObject<NFDriverWrapperExpressDelegate> *expressDelegate; // @synthesize expressDelegate=_expressDelegate;
@property NSObject<NFDriverWrapperTransactionDelegate> *seDelegate; // @synthesize seDelegate=_seDelegate;
@property NSObject<NFDriverWrapperDelegate> *delegate; // @synthesize delegate=_delegate;
- (id)getNFCCTemperature:(double *)arg1;	// IMP=0x00000001000cb410
- (id)isHostWakeCapable:(_Bool *)arg1;	// IMP=0x00000001000cb1b4
- (id)changeDynamicReaderModeRFSettings:(unsigned long long)arg1;	// IMP=0x00000001000cad40
- (void)redactLogging:(_Bool)arg1;	// IMP=0x00000001000cad38
- (_Bool)resetDriver;	// IMP=0x00000001000cacfc
- (void)_closeDriver;	// IMP=0x00000001000cacec
- (void)_closeDriver:(_Bool)arg1;	// IMP=0x00000001000caa7c
- (unsigned long long)_openDriver;	// IMP=0x00000001000c9a28
- (unsigned long long)attemptFailForwardRecovery;	// IMP=0x00000001000c974c
- (void)recoverFailForwardIfNeeded;	// IMP=0x00000001000c9260
- (void)storeFailForwardRecovery:(_Bool)arg1;	// IMP=0x00000001000c8f10
- (int)checkFailForwardState;	// IMP=0x00000001000c89d8
- (int)getRestoreStateAndRunBlockIfUnlocked:(CDUnknownBlockType)arg1;	// IMP=0x00000001000c882c
- (void)setDriverCallbacks;	// IMP=0x00000001000c8318
- (void)_getDriverConfig:(struct _NFDriverConfig *)arg1;	// IMP=0x00000001000c82b8
- (id)setupChipscope:(_Bool)arg1;	// IMP=0x00000001000c78d0
- (void)dumpLPMDebugLog;	// IMP=0x00000001000c786c
- (id)combinePowerCounters:(id)arg1 with:(id)arg2 overflow:(_Bool)arg3;	// IMP=0x00000001000c7370
- (id)getPowerCounters:(id *)arg1;	// IMP=0x00000001000c69a0
- (void)synchronousGetField:(_Bool *)arg1 fieldNotification:(id *)arg2;	// IMP=0x00000001000c693c
- (id)sePowerCycle:(int)arg1;	// IMP=0x00000001000c64a4
- (id)pushSignedRF:(id)arg1;	// IMP=0x00000001000c619c
- (id)changeDynamicTransitRFSettings:(_Bool)arg1;	// IMP=0x00000001000c5d6c
- (_Bool)configureReaderModeRFConfigForTransitPartner:(_Bool)arg1 transitPartner:(unsigned int)arg2;	// IMP=0x00000001000c5d54
- (id)setReaderModeRFGain:(id)arg1;	// IMP=0x00000001000c5ac4
- (id)getUniqueFDRKey:(id *)arg1;	// IMP=0x00000001000c5738
- (id)getDieID;	// IMP=0x00000001000c558c
- (_Bool)resumeDiscovery;	// IMP=0x00000001000c5414
- (_Bool)restartDiscovery;	// IMP=0x00000001000c529c
- (_Bool)_restartDiscoveryWithReconfig:(_Bool)arg1;	// IMP=0x00000001000c51e0
- (struct _NFData *)getUnlockRequestInfoFrom:(int)arg1;	// IMP=0x00000001000c5160
- (_Bool)getPresenceOfAttackLogFromSecureElement:(int)arg1 hasAttackLog:(_Bool *)arg2;	// IMP=0x00000001000c50d0
- (id)getAttackCounterLogFromSecureElement:(int)arg1 asBinary:(_Bool)arg2;	// IMP=0x00000001000c4e48
- (struct _NFData *)getOSUpdateLogFromSecureElement:(int)arg1;	// IMP=0x00000001000c4dc8
- (_Bool)enableGreenCarThreshold:(_Bool)arg1;	// IMP=0x00000001000c4d38
- (_Bool)toggleGPIO:(unsigned short)arg1;	// IMP=0x00000001000c4cb8
- (_Bool)configureExpressFelicaEntry:(int)arg1;	// IMP=0x00000001000c4c38
- (_Bool)enableFelicaTxEndPatternV2:(_Bool)arg1;	// IMP=0x00000001000c4bb8
- (_Bool)enableHeadlessTestMode:(unsigned short)arg1;	// IMP=0x00000001000c4b30
- (_Bool)triggerDelayedWake:(unsigned char)arg1;	// IMP=0x00000001000c4a98
- (unsigned int)getHeadlessFlags:(id *)arg1;	// IMP=0x00000001000c47e4
- (id)disableHeadlessMiniNV;	// IMP=0x00000001000c451c
- (_Bool)enableHeadlessMode:(_Bool)arg1 shutdown:(_Bool)arg2;	// IMP=0x00000001000c41f8
- (_Bool)turnOffHeadlessModeForShutdown;	// IMP=0x00000001000c4190
- (_Bool)removeHeadlessModeFeature:(unsigned long long)arg1;	// IMP=0x00000001000c40a0
- (_Bool)addHeadlessModeFeature:(unsigned long long)arg1;	// IMP=0x00000001000c3fbc
- (_Bool)setHeadlessModeFeature:(unsigned long long)arg1;	// IMP=0x00000001000c3eb4
- (unsigned long long)getHeadlessModeFeature;	// IMP=0x00000001000c3e60
- (_Bool)supportsLPEM;	// IMP=0x00000001000c3e58
- (_Bool)_supportsHeadlessMode:(unsigned int)arg1;	// IMP=0x00000001000c3e3c
- (id)enableLpcdAssist:(_Bool)arg1;	// IMP=0x00000001000c3bac
- (void)setExpressConfig:(int)arg1;	// IMP=0x00000001000c3a3c
- (void)setPollingConfig:(int)arg1 tagNotificationConfig:(struct _NFDriverTagDiscoveryNtf)arg2;	// IMP=0x00000001000c39c0
- (_Bool)sendToHCEDevice:(void *)arg1 buffer:(const void *)arg2 length:(unsigned int)arg3;	// IMP=0x00000001000c3928
- (struct _NFData *)readFromHCEDevice:(void *)arg1;	// IMP=0x00000001000c38a8
- (id)transceive:(id)arg1 tag:(id)arg2 maxTimeout:(double)arg3 error:(id *)arg4;	// IMP=0x00000001000c31b4
- (_Bool)formatTagToNdef:(id)arg1 withKey:(id)arg2 error:(id *)arg3;	// IMP=0x00000001000c2cf8
- (unsigned int)checkTagPresence:(id)arg1;	// IMP=0x00000001000c2c28
- (_Bool)writeLockNdef:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000c27fc
- (_Bool)writeNdefData:(id)arg1 toTag:(id)arg2 error:(id *)arg3;	// IMP=0x00000001000c1e90
- (id)readNdefMessageFromTag:(id)arg1 messageSize:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x00000001000c1de8
- (id)readNdefMessageFromTag:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000c1dd4
- (id)readNdefDataFromTag:(id)arg1 messageSize:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x00000001000c11e8
- (unsigned int)queryMifareTagCapability:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000c0c18
- (_Bool)queryTagNDEFCapability:(id)arg1 hasNdefAbility:(struct _NFNDEFTagInfo *)arg2 error:(id *)arg3;	// IMP=0x00000001000c05c0
- (unsigned int)disconnectTag:(id)arg1 tagRemovalDetect:(_Bool)arg2;	// IMP=0x00000001000c0388
- (void)_cardRemovalDetect:(id)arg1;	// IMP=0x00000001000c01fc
- (unsigned int)connectTag:(id)arg1;	// IMP=0x00000001000c002c
- (void *)_getHandleForTag:(id)arg1;	// IMP=0x00000001000bff6c
- (unsigned int)getTagType:(id)arg1;	// IMP=0x00000001000bfeac
- (id)getExtendedIdentifier:(id)arg1;	// IMP=0x00000001000bfde8
- (id)setSecureElementRouting:(CDStruct_005b3ce2)arg1 fieldDetect:(_Bool)arg2 cardEmulationProtocol:(unsigned long long)arg3;	// IMP=0x00000001000bf58c
- (id)secureElement:(int)arg1 transceive:(id)arg2 error:(id *)arg3;	// IMP=0x00000001000beb8c
- (_Bool)setSecureElement:(int)arg1 alwaysOn:(_Bool)arg2;	// IMP=0x00000001000be9b8
- (unsigned int)triggerAssertion:(int)arg1;	// IMP=0x00000001000be980
- (_Bool)getRFSettings:(id)arg1;	// IMP=0x00000001000be768
- (_Bool)getSecureElementInfo:(int)arg1 info:(id *)arg2;	// IMP=0x00000001000bd49c
- (_Bool)getControllerInfo:(id *)arg1;	// IMP=0x00000001000bcef4
- (id)state;	// IMP=0x00000001000bcc34
- (_Bool)readerModeProtectionActive;	// IMP=0x00000001000bcba0
- (void)_readerModeStopped;	// IMP=0x00000001000bc714
- (void)_handleReaderBurnoutProtectionDebounceTimer;	// IMP=0x00000001000bc44c
- (void)_handleReaderBurnoutProtectionTimer;	// IMP=0x00000001000bc298
- (void)thermalStateChanged:(unsigned long long)arg1;	// IMP=0x00000001000bbf3c
- (_Bool)thermalPressureBackoff;	// IMP=0x00000001000bbee4
- (_Bool)thermalPressureCritical;	// IMP=0x00000001000bbe8c
- (_Bool)requiresReaderModeProtection;	// IMP=0x00000001000bbd28
- (_Bool)requiresThermalModeProtection;	// IMP=0x00000001000bbd20
- (void)driverDidDetectRemoteTags:(struct _NFDriverRemoteTag *)arg1 count:(unsigned char)arg2;	// IMP=0x00000001000bb330
- (void)driverPLLUnlock;	// IMP=0x00000001000bb2e8
- (void)driverDidUpdateTemperature:(double)arg1;	// IMP=0x00000001000bb298
- (void)driverRSSIStatsWithTotalSamples:(unsigned int)arg1 avgRSSI:(unsigned int)arg2 maxRSSI:(unsigned int)arg3 minRSSI:(unsigned int)arg4;	// IMP=0x00000001000bb228
- (void)driverRequestService:(id)arg1;	// IMP=0x00000001000bb1bc
- (void)driverExpressModeExited;	// IMP=0x00000001000bb17c
- (void)driverSecureElementTransaction:(id)arg1 event:(id)arg2;	// IMP=0x00000001000bb0f4
- (void)driverDidDetectHostCardReader:(void *)arg1;	// IMP=0x00000001000bb060
- (void)driverSecureElementSelect:(id)arg1;	// IMP=0x00000001000baf94
- (void)driverDidReceiveTechnologyEvent:(id)arg1;	// IMP=0x00000001000bad48
- (void)driverDidReceiveExpressStartRfTech:(int)arg1 withNotification:(id)arg2;	// IMP=0x00000001000ba934
- (void)driverDidReceiveExpressStartRfTechLegacy:(int)arg1;	// IMP=0x00000001000ba708
- (void)driverDidDetectFieldChange:(_Bool)arg1;	// IMP=0x00000001000ba52c
- (void)driverSecureElementRADPUSent;	// IMP=0x00000001000ba4dc
- (void)driverSecureElementEndOfOperation;	// IMP=0x00000001000ba460
- (void)driverSecureElementRemoved:(int)arg1 withReason:(unsigned int)arg2;	// IMP=0x00000001000ba408
- (void)driverSecureElementRestrictedModeExit:(int)arg1;	// IMP=0x00000001000ba3c0
- (void)driverSecureElementRestrictedMode:(int)arg1;	// IMP=0x00000001000ba378
- (void)driverDidDetectHardwareReset:(id)arg1;	// IMP=0x00000001000ba30c
- (void)driverRestartDiscovery;	// IMP=0x00000001000ba1d4
- (void)_handleFieldExited;	// IMP=0x00000001000ba088
- (void)_handleFieldEntered;	// IMP=0x00000001000b9ed0
- (_Bool)isJCOPTooOld:(unsigned char)arg1 prod:(_Bool)arg2 version:(unsigned short)arg3;	// IMP=0x00000001000b9e78
- (_Bool)enablePMUStandbyPower:(_Bool)arg1;	// IMP=0x00000001000b9e70
@property(readonly) NFFieldNotification *fieldNotification;
@property(readonly) _Bool fieldPresent;
- (_Bool)_isClosed;	// IMP=0x00000001000b9dd8
- (void)stopNow;	// IMP=0x00000001000b9c7c
- (void)closeSession:(id)arg1;	// IMP=0x00000001000b96ec
- (unsigned long long)openSession:(id)arg1;	// IMP=0x00000001000b9358
- (void)dealloc;	// IMP=0x00000001000b92f8
- (id)init;	// IMP=0x00000001000b8ee8

@end

