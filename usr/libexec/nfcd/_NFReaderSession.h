//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import "_NFSession.h"

#import "NFReaderSessionInternalInterface-Protocol.h"
#import "NFSystemPowerConsumptionMonitorDelegate-Protocol.h"

@class NFDriverWrapper, NFServiceWhitelistChecker, NFTimer, NSData, NSMutableArray, NSMutableOrderedSet, NSMutableSet, NSString, SFNFCTagReaderUIController;
@protocol NFTag;

@interface _NFReaderSession : _NFSession <NFSystemPowerConsumptionMonitorDelegate, NFReaderSessionInternalInterface>
{
    id <NFTag> _currentTag;	// 8 = 0x8
    NFServiceWhitelistChecker *_tagWhiteList;	// 16 = 0x10
    NFTimer *_sessionTimer;	// 24 = 0x18
    _Bool _postAWDMetrics;	// 32 = 0x20
    NSData *_sessionUUID;	// 40 = 0x28
    unsigned long long _sessionStartTime;	// 48 = 0x30
    unsigned long long _sessionType;	// 56 = 0x38
    unsigned long long _totalTagRead;	// 64 = 0x40
    unsigned int _exitReason;	// 72 = 0x48
    _Bool _connectedToTagOnce;	// 76 = 0x4c
    unsigned long long _pollOption;	// 80 = 0x50
    unsigned long long _sessionConfig;	// 88 = 0x58
    SFNFCTagReaderUIController *_uiController;	// 96 = 0x60
    long long _uiStateOnInvalidation;	// 104 = 0x68
    _Bool _uiInvalidationHandlerInstalled;	// 112 = 0x70
    _Bool _skipMifareClassification;	// 113 = 0x71
    unsigned long long _serviceType;	// 120 = 0x78
    NSMutableSet *_paceTagsUID;	// 128 = 0x80
    _Bool _rfOverrideRequire;	// 136 = 0x88
    NFDriverWrapper *_driverWrapper;	// 144 = 0x90
    NSMutableArray *_feliCaSystemCodeList;	// 152 = 0x98
    NSMutableOrderedSet *_iso7816AidList;	// 160 = 0xa0
}

- (void).cxx_destruct;	// IMP=0x000000010005c3f8
@property(retain, nonatomic) NSMutableOrderedSet *iso7816AidList; // @synthesize iso7816AidList=_iso7816AidList;
@property(retain, nonatomic) NSMutableArray *feliCaSystemCodeList; // @synthesize feliCaSystemCodeList=_feliCaSystemCodeList;
@property(retain) NFDriverWrapper *driverWrapper; // @synthesize driverWrapper=_driverWrapper;
- (_Bool)_validateMifareAPDU:(id)arg1 response:(id)arg2;	// IMP=0x000000010005c280
- (unsigned int)_queryMifareType:(id)arg1;	// IMP=0x000000010005c0b0
- (_Bool)_mifareCheck:(id)arg1;	// IMP=0x000000010005be80
- (unsigned int)_validateISO15693Packet:(id)arg1;	// IMP=0x000000010005b744
- (unsigned int)_validateAPDU:(id)arg1;	// IMP=0x000000010005b05c
- (id)_readFile:(unsigned short)arg1 fromTag:(id)arg2 offset:(unsigned short)arg3 error:(id *)arg4;	// IMP=0x000000010005ac48
- (id)_selectTag:(id)arg1 aid:(id)arg2 p1:(unsigned char)arg3 p2:(unsigned char)arg4 shortLe:(BOOL)arg5 error:(id *)arg6;	// IMP=0x000000010005a9e8
- (id)_selectFromTag:(id)arg1 aid:(id)arg2 error:(id *)arg3;	// IMP=0x000000010005a510
- (id)_readNdefMessageFromTag:(id)arg1 rawLength:(unsigned long long *)arg2 error:(id *)arg3;	// IMP=0x000000010005a054
- (unsigned int)_refreshNdefTagConnection;	// IMP=0x0000000100059fb0
- (unsigned int)_validateFelicaCommand:(id)arg1;	// IMP=0x0000000100059b6c
- (_Bool)_isFelicaPollingCommand:(id)arg1 systemCode:(id *)arg2;	// IMP=0x0000000100059ac0
- (id)_getSystemInfo:(id)arg1;	// IMP=0x00000001000596a8
- (id)_getIDMFromTag:(id)arg1 systemCode:(id)arg2 outIdm:(id *)arg3 outPmm:(id *)arg4;	// IMP=0x00000001000592b4
- (id)_RequestService:(id)arg1;	// IMP=0x0000000100058ee4
- (id)_getSystemCodeListFromTag:(id)arg1;	// IMP=0x0000000100058a6c
- (_Bool)_getKeyVersionForNodes:(id)arg1;	// IMP=0x0000000100058074
- (id)_getNodeList;	// IMP=0x0000000100057a5c
- (unsigned int)_getAWDReaderSessionType:(unsigned long long)arg1;	// IMP=0x0000000100057a3c
- (id)_processRawTagForCoreNFC:(id)arg1 requireDiscoveryRestart:(_Bool *)arg2;	// IMP=0x000000010005666c
- (struct _NFDriverTagDiscoveryNtf)_getTagNotificationConfig;	// IMP=0x0000000100056650
- (_Bool)_isCoreNFCSession;	// IMP=0x0000000100056638
- (unsigned int)_getTagTypeFromTag:(id)arg1;	// IMP=0x00000001000565f8
- (void)_alterSensitivityForCardIngestion;	// IMP=0x00000001000563e0
- (void)_tagRemovalDetect:(id)arg1;	// IMP=0x0000000100055f1c
- (oneway void)writeProtectNDEFTag:(CDUnknownBlockType)arg1;	// IMP=0x0000000100055b14
- (oneway void)felicaRequestService:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100055868
- (oneway void)updateSharingUIStateOnInvalidation:(long long)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x000000010005584c
- (oneway void)updateSharingUIScanText:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000557cc
- (void)_sync_felicaStateForSystemCode:(id)arg1 withRequestService:(id)arg2 withBlockReadList:(id)arg3 performSearchServiceCode:(_Bool)arg4 callback:(CDUnknownBlockType)arg5;	// IMP=0x0000000100054fdc
- (oneway void)felicaStateForSystemCode:(id)arg1 withRequestService:(id)arg2 withBlockReadList:(id)arg3 performSearchServiceCode:(_Bool)arg4 callback:(CDUnknownBlockType)arg5;	// IMP=0x0000000100054e08
- (void)_sync_execRemoteAdminScript:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100053a48
- (oneway void)execRemoteAdminScript:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100053940
- (void)_sync_restartPolling:(CDUnknownBlockType)arg1;	// IMP=0x00000001000536a0
- (oneway void)restartPolling:(CDUnknownBlockType)arg1;	// IMP=0x00000001000535cc
- (void)_sync_stopPolling:(CDUnknownBlockType)arg1;	// IMP=0x0000000100053110
- (oneway void)stopPolling:(CDUnknownBlockType)arg1;	// IMP=0x000000010005303c
- (void)_sync_startPollingForNDEFMessagesWithSessionConfig:(unsigned long long)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x000000010005255c
- (oneway void)startPollingForNDEFMessagesWithSessionConfig:(unsigned long long)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x000000010005247c
- (void)_sync_startPollingForTechnology:(unsigned int)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100051ad8
- (oneway void)startPollingForTechnology:(unsigned int)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000519f8
- (oneway void)skipMifareClassification:(CDUnknownBlockType)arg1;	// IMP=0x0000000100051800
- (oneway void)startPollingForTags:(unsigned long long)arg1 sessionConfig:(unsigned long long)arg2 callback:(CDUnknownBlockType)arg3;	// IMP=0x0000000100051714
- (void)_sync_startPollingForTags:(unsigned long long)arg1 sessionConfig:(unsigned long long)arg2 callback:(CDUnknownBlockType)arg3;	// IMP=0x00000001000506e4
- (oneway void)checkPresence:(CDUnknownBlockType)arg1;	// IMP=0x00000001000501c4
- (oneway void)formatNdefWithKey:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x000000010004fae4
- (oneway void)ndefWrite:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x000000010004f26c
- (oneway void)ndefRead:(CDUnknownBlockType)arg1;	// IMP=0x000000010004ea0c
- (oneway void)checkNdefSupport:(CDUnknownBlockType)arg1;	// IMP=0x000000010004e4ec
- (oneway void)transceive:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x000000010004e3e4
- (void)_sync_transceive:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x000000010004d2e8
- (oneway void)disconnectWithCardRemoval:(_Bool)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x000000010004cf90
- (id)_disconnectWithCardRemoval:(_Bool)arg1;	// IMP=0x000000010004cca4
- (oneway void)connect:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x000000010004cb9c
- (void)_sync_connect:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x000000010004b98c
- (void)handleInvalidatedXPCWithConnectionUserInfo:(id)arg1;	// IMP=0x000000010004b964
- (void)handleFieldNotification:(id)arg1;	// IMP=0x000000010004b6dc
- (void)handleFieldChanged:(_Bool)arg1;	// IMP=0x000000010004b6d8
- (void)handleReaderBurnoutCleared;	// IMP=0x000000010004b5d0
- (void)handleReaderBurnoutTimer;	// IMP=0x000000010004b184
- (void)handleRemoteTagsDetected:(id)arg1;	// IMP=0x000000010004a134
- (void)coreDuetActivityRevoked;	// IMP=0x0000000100049e88
- (void)cleanup;	// IMP=0x000000010004992c
- (void)didStartSession:(id)arg1;	// IMP=0x0000000100049194
- (_Bool)willStartSession;	// IMP=0x0000000100049160
- (unsigned long long)initialRoutingMode;	// IMP=0x0000000100049158
@property(readonly, nonatomic) _Bool timeLimitedSession;
@property(readonly, retain, nonatomic) NFServiceWhitelistChecker *whitelistChecker;
@property(copy, nonatomic) CDUnknownBlockType uiInvalidationHandler;
@property(readonly, nonatomic) _Bool uiShown;
- (id)initWithRemoteObject:(id)arg1 workQueue:(id)arg2 whitelist:(id)arg3 serviceType:(unsigned long long)arg4 showSharingUI:(unsigned long long)arg5 coreNFCSessionType:(unsigned long long)arg6 scanText:(id)arg7;	// IMP=0x0000000100048554
- (id)initWithRemoteObject:(id)arg1 workQueue:(id)arg2 expressModeManager:(id)arg3 allowsBackgroundMode:(_Bool)arg4;	// IMP=0x000000010004853c
- (_Bool)selectPaceApp:(id)arg1 fromTag:(id)arg2 outError:(id *)arg3;	// IMP=0x0000000100002b24
- (_Bool)selectPaceApp:(id)arg1 fromTag:(id)arg2 outRealAid:(id *)arg3 outError:(id *)arg4;	// IMP=0x0000000100001fc0
- (_Bool)isPaceSupported:(id)arg1;	// IMP=0x0000000100001f10
- (_Bool)validateAID:(id)arg1 withSelectResponse:(id)arg2 outRealAid:(id *)arg3;	// IMP=0x00000001000eeb14
- (_Bool)_isRestrictedRID:(id)arg1;	// IMP=0x00000001000eea8c
- (id)_getApplicationNameFromFciTemplate:(id)arg1;	// IMP=0x00000001000ee9e0
- (id)_getFCITemplate:(id)arg1;	// IMP=0x00000001000ee978
- (_Bool)validateSystemCode:(id)arg1;	// IMP=0x00000001000ee900
- (_Bool)validateAID:(id)arg1;	// IMP=0x00000001000ee778
- (long long)_isIdentifierPermissible:(id)arg1;	// IMP=0x00000001000edb20
- (_Bool)_isAIDStringValid:(id)arg1;	// IMP=0x00000001000ed7e0
- (id)_getFilterWithType:(long long)arg1;	// IMP=0x00000001000ed400
- (id)getPermissibleFelicaSystemCodeFromInfoPlist:(id)arg1;	// IMP=0x00000001000ecf68
- (id)getPermissibleAIDListFromInfoPlist:(id)arg1;	// IMP=0x00000001000ecb5c

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

