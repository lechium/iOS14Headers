//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "SETransceiver-Protocol.h"

@class NSArray, NSData, NSNumber, NSString;
@protocol NFSecureElementHandleInterface, NFSecureElementWrapperDelegate, OS_dispatch_queue;

@interface NFSecureElementWrapper : NSObject <SETransceiver>
{
    NSObject<OS_dispatch_queue> *_authQueue;	// 8 = 0x8
    NSObject<NFSecureElementHandleInterface> *_handle;	// 16 = 0x10
    NSObject<NFSecureElementWrapperDelegate> *_delegate;	// 24 = 0x18
    NSData *_activeAppletAid;	// 32 = 0x20
    NSArray *_cachedAppletsUnfiltered;	// 40 = 0x28
    NSNumber *_cachedAppletUpdateCounter;	// 48 = 0x30
}

+ (void)cleanupATL;	// IMP=0x00000001000eabcc
- (void).cxx_destruct;	// IMP=0x00000001000b810c
@property(retain, nonatomic) NSNumber *cachedAppletUpdateCounter; // @synthesize cachedAppletUpdateCounter=_cachedAppletUpdateCounter;
@property(retain, nonatomic) NSArray *cachedAppletsUnfiltered; // @synthesize cachedAppletsUnfiltered=_cachedAppletsUnfiltered;
@property(retain) NSData *activeAppletAid; // @synthesize activeAppletAid=_activeAppletAid;
@property __weak NSObject<NFSecureElementWrapperDelegate> *delegate; // @synthesize delegate=_delegate;
@property(readonly) NSObject<NFSecureElementHandleInterface> *handle; // @synthesize handle=_handle;
- (id)inRestrictedPerformanceMode:(_Bool *)arg1;	// IMP=0x00000001000b79d4
- (id)checkDeepSleepTimerRunning:(_Bool *)arg1;	// IMP=0x00000001000b7454
- (_Bool)refreshISDCounter;	// IMP=0x00000001000b744c
- (id)queryISDCounter;	// IMP=0x00000001000b72d0
- (id)readBinary:(unsigned int)arg1;	// IMP=0x00000001000b70b0
- (id)selectCRSWithError:(id *)arg1;	// IMP=0x00000001000b6b30
- (_Bool)select:(id)arg1;	// IMP=0x00000001000b6934
- (id)getData:(unsigned int)arg1 subtag:(unsigned int)arg2;	// IMP=0x00000001000b6448
- (id)getData:(unsigned int)arg1;	// IMP=0x00000001000b60e8
- (id)selectByName:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000b60c4
- (id)readBinary:(unsigned char)arg1 offset:(unsigned int)arg2 tag:(unsigned int)arg3 error:(id *)arg4;	// IMP=0x00000001000b6010
- (id)getData:(unsigned char)arg1 tag:(unsigned int)arg2 data:(id)arg3 error:(id *)arg4;	// IMP=0x00000001000b5ff0
- (id)sendRepeatingCommandWithClass:(unsigned char)arg1 instruction:(unsigned char)arg2 p1:(unsigned char)arg3 firstP2:(unsigned char)arg4 nextP2:(unsigned char)arg5 data:(id)arg6 expectedLength:(unsigned char)arg7 error:(id *)arg8;	// IMP=0x00000001000b5c58
- (id)sendCommandWithClass:(unsigned char)arg1 instruction:(unsigned char)arg2 p1:(unsigned char)arg3 p2:(unsigned char)arg4 data:(id)arg5 error:(id *)arg6;	// IMP=0x00000001000b5c2c
- (id)sendCommandWithClass:(unsigned char)arg1 instruction:(unsigned char)arg2 p1:(unsigned char)arg3 p2:(unsigned char)arg4 data:(id)arg5 expectedLength:(unsigned char)arg6 error:(id *)arg7;	// IMP=0x00000001000b53d0
@property(readonly) unsigned long long supportedTechnologies;
- (id)transceiveData:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000b5370
@property(readonly) NSString *eckaCertificate; // @dynamic eckaCertificate;
@property(readonly) NSString *eccCertificate; // @dynamic eccCertificate;
@property(readonly) NSString *rsaCertificate; // @dynamic rsaCertificate;
@property(readonly) NSData *serialNumberAsData;
@property(readonly) NSString *serialNumber; // @dynamic serialNumber;
@property(readonly) _Bool isOperational;
@property(readonly) _Bool isProd;
@property(readonly) _Bool isIceFall;
- (id)getAuthQueue;	// IMP=0x00000001000b4f98
- (id)initWithHandle:(id)arg1;	// IMP=0x00000001000b4f20
- (id)signWithKeyInSlot:(id)arg1 AID:(id)arg2 signRequest:(id)arg3 paymentRequest:(id)arg4 authorization:(id)arg5 uid:(unsigned int)arg6 response:(id *)arg7;	// IMP=0x0000000100060410
- (id)signWithKeyInSlot:(id)arg1 request:(id)arg2 response:(id *)arg3;	// IMP=0x000000010005ff3c
- (id)createKeyInSlot:(id)arg1 request:(id)arg2 response:(id *)arg3;	// IMP=0x000000010005f5ac
- (id)getKeyInSlot:(id)arg1;	// IMP=0x000000010005f130
- (id)deleteKeyInSlot:(id)arg1;	// IMP=0x000000010005eed8
- (id)sendTrustCommand:(unsigned char)arg1 p1:(unsigned char)arg2 p2:(unsigned char)arg3 data:(id)arg4 rapdu:(id *)arg5;	// IMP=0x000000010005ead4
- (id)getGetProtocolV4Container:(id)arg1 forApplet:(id)arg2;	// IMP=0x00000001000726a0
- (void)_addEntriesFromSSD:(id)arg1 intoApp:(id)arg2;	// IMP=0x00000001000720e4
- (void)_parseDiscretionaryData:(id)arg1 intoApp:(id)arg2;	// IMP=0x0000000100071d34
- (id)_sendProprietaryGetStatusCommand:(unsigned char)arg1 tagList:(const char *)arg2 tagListLen:(unsigned long long)arg3 callback:(CDUnknownBlockType)arg4;	// IMP=0x000000010007168c
- (id)getStatusProprietaryPackages;	// IMP=0x0000000100070ac0
- (id)getStatusProprietaryApplications;	// IMP=0x000000010006f598
- (_Bool)supportsGetStatusProprietary;	// IMP=0x000000010006f39c
- (id)_getUnlockRequestInfoFrom:(int)arg1;	// IMP=0x000000010006eb8c
- (id)_generateCASDSignatureIcf:(id)arg1;	// IMP=0x000000010006e81c
- (id)_generateCASDSignatureComet:(id)arg1;	// IMP=0x000000010006e1a4
- (id)_generateSignatureFromStateInfo:(id)arg1;	// IMP=0x000000010006de44
- (id)_getVASDInfo;	// IMP=0x000000010006dba8
- (id)_getCRSInfo;	// IMP=0x000000010006bddc
- (id)_getCASDInfo;	// IMP=0x000000010006b75c
- (id)_getKeyInfo:(_Bool)arg1;	// IMP=0x000000010006afec
- (id)_getISDInfo;	// IMP=0x000000010006a984
- (unsigned int)remoteAdminState:(id)arg1 stateInfo:(id *)arg2;	// IMP=0x0000000100069860
- (unsigned int)remoteAdminState:(id *)arg1;	// IMP=0x0000000100069774
- (unsigned int)restoreTransientAuthForAllAppletsExcept:(id)arg1 uid:(unsigned int)arg2 updated:(_Bool *)arg3;	// IMP=0x000000010009012c
- (unsigned int)requireTransientAuth:(_Bool)arg1 uid:(unsigned int)arg2 applets:(id)arg3 authorization:(id)arg4;	// IMP=0x000000010008f55c
- (unsigned int)signChallengeWithOSVersion:(id)arg1 signature:(id *)arg2;	// IMP=0x000000010008ef50
- (id)signChallengeWithOSVersion:(id)arg1;	// IMP=0x000000010008eecc
- (id)_signChallengeWithOSVersionIcf:(id)arg1;	// IMP=0x000000010008eb6c
- (id)_signChallengeWithOSVersionComet:(id)arg1;	// IMP=0x000000010008e4c4
- (unsigned int)getCryptogram:(id *)arg1 challengeResponse:(id *)arg2;	// IMP=0x000000010008dee8
- (unsigned int)validateSEAndSEPPairing:(unsigned int)arg1;	// IMP=0x000000010008d720
- (id)getPlatformData:(id *)arg1 withSignature:(id *)arg2;	// IMP=0x000000010008d248
- (unsigned int)signChallenge:(id)arg1 value:(id *)arg2;	// IMP=0x000000010008cd04
- (unsigned int)effaceAuthorization:(unsigned int)arg1;	// IMP=0x000000010008bfd8
- (id)authorizeAppletTransaction:(id)arg1 forApplet:(id)arg2 authType:(unsigned char)arg3 authorization:(id)arg4 uid:(unsigned int)arg5;	// IMP=0x000000010008a97c
- (id)authorizeEcommerceTransaction:(id)arg1 uid:(unsigned int)arg2 request:(id)arg3 response:(id *)arg4;	// IMP=0x000000010008806c
- (void)postAWDCRSAuth:(id)arg1 request:(id)arg2 response:(id *)arg3 status:(unsigned int)arg4;	// IMP=0x0000000100087e0c
- (unsigned int)sendEcommerceAPDU:(id)arg1 response:(id *)arg2 swStatus:(unsigned int *)arg3;	// IMP=0x0000000100087468
- (id)createEcommerceAPDU:(id)arg1;	// IMP=0x0000000100087340
- (_Bool)supportsSSESigning:(id *)arg1;	// IMP=0x0000000100087214
- (unsigned int)deauthorizeContactlessPayment;	// IMP=0x0000000100087170
- (unsigned int)authorizeContactlessPayment:(id)arg1 uid:(unsigned int)arg2 withLocalAuthorization:(_Bool)arg3;	// IMP=0x0000000100086498
- (id)getFelicaAppletState:(id)arg1;	// IMP=0x0000000100091cfc
- (id)felicaGetEventDataCommand:(unsigned short)arg1 block:(unsigned short)arg2;	// IMP=0x00000001000919ec
- (id)felicaEnvelopeCommand:(id)arg1;	// IMP=0x00000001000919c8
- (id)_readFromService:(unsigned short)arg1 numBlocks:(unsigned char)arg2;	// IMP=0x000000010009146c
- (id)_readIDM;	// IMP=0x0000000100091330
- (id)_getAppletStateForProvider:(id)arg1;	// IMP=0x0000000100090d60
- (id)activateKeys:(_Bool)arg1 forIdentifiers:(id)arg2 onApplet:(id)arg3;	// IMP=0x00000001000970cc
- (id)setupTransactionCodes:(id)arg1 forIdentifier:(id)arg2 onApplet:(id)arg3 authorization:(id)arg4 uid:(unsigned int)arg5;	// IMP=0x0000000100096644
- (id)_setupEndpoint:(id)arg1 activate:(_Bool)arg2;	// IMP=0x0000000100095f7c
- (id)_setTemporaryVisibilityOnAllEndpoints:(_Bool)arg1;	// IMP=0x0000000100095a28
- (id)appletForIdentifier:(id)arg1 filtered:(_Bool)arg2;	// IMP=0x0000000100095804
- (id)appletForIdentifier:(id)arg1;	// IMP=0x00000001000957f4
- (unsigned int)refreshCachedApplets;	// IMP=0x00000001000957e0
- (id)getUnfilteredApplets:(id *)arg1;	// IMP=0x0000000100095418
- (id)getApplets:(id *)arg1;	// IMP=0x0000000100095188
- (id)deleteApplets:(id)arg1;	// IMP=0x0000000100094b5c
- (id)deselectAllIfNeeded;	// IMP=0x00000001000949a0
- (id)deselectAll;	// IMP=0x00000001000946d8
- (id)deselectApplets:(id)arg1;	// IMP=0x00000001000940a0
- (id)selectApplet:(id)arg1;	// IMP=0x0000000100093bd0
- (id)deleteAllApplets:(unsigned int)arg1;	// IMP=0x00000001000936a0
- (unsigned int)_markApplicationsForDelete:(id)arg1;	// IMP=0x00000001000933e0
- (unsigned int)setApplications:(id)arg1 asSelectable:(_Bool)arg2 groupActivationStyle:(unsigned char)arg3;	// IMP=0x00000001000930b4
@property(readonly, getter=getCachedApplets) NSArray *cachedApplets;
- (id)filterApplications:(id)arg1;	// IMP=0x0000000100092b08
- (id)_performGetStatus;	// IMP=0x0000000100092948
- (void)forceInvalidateAppletCache;	// IMP=0x000000010009290c
- (unsigned int)_getApplicationsFromSE:(id *)arg1 filtered:(_Bool)arg2;	// IMP=0x0000000100092284
- (id)signChallenge:(id)arg1;	// IMP=0x0000000100098948
- (_Bool)getAvailableMemory:(struct _NFSecureElementMemory *)arg1;	// IMP=0x00000001000984c0
- (id)getCertificates;	// IMP=0x0000000100097910
- (unsigned short)getUpdateCounter;	// IMP=0x000000010009778c
- (id)getSerialNumber;	// IMP=0x0000000100097580
- (_Bool)requiresCustomGPGroupActivationType;	// IMP=0x000000010009f23c
- (id)crs_authorizedInternalAuthenticate:(id)arg1 signedData:(id *)arg2;	// IMP=0x000000010009e9e0
- (unsigned int)crs_enableTransientAuth:(_Bool)arg1 applets:(id)arg2 cryptogram:(id)arg3;	// IMP=0x000000010009e730
- (unsigned int)_crs_enableTransientAuth:(_Bool)arg1 applets:(id)arg2 cryptogram:(id)arg3;	// IMP=0x000000010009e12c
- (void)crs_deauthorize;	// IMP=0x000000010009de18
- (void)crs_postAWDCRSAuthECommerce:(unsigned char)arg1 request:(id)arg2 response:(id)arg3 status:(unsigned int)arg4;	// IMP=0x000000010009d8e8
- (unsigned int)crs_authorizeForECommerce:(unsigned char)arg1 cryptogram:(id)arg2 encryptedPIN:(id)arg3 request:(id)arg4 response:(id *)arg5;	// IMP=0x000000010009d684
- (id)crs_decodeResponseTLV:(id)arg1;	// IMP=0x000000010009d1c0
- (unsigned int)crs_authorizeForECommerce:(unsigned char)arg1 input:(id)arg2 output:(id *)arg3 swStatus:(unsigned int *)arg4;	// IMP=0x000000010009cab8
- (unsigned int)crs_authorizeWithLocalValidation:(unsigned char)arg1 cryptogram:(id)arg2;	// IMP=0x000000010009c608
- (unsigned int)crs_authorizeWithCryptogram:(id)arg1;	// IMP=0x000000010009c22c
- (unsigned int)crs_authenticate:(id)arg1 response:(id *)arg2;	// IMP=0x000000010009be44
- (unsigned int)crs_setAuthorizationTimeout:(unsigned short)arg1 challenge:(id)arg2 mac:(id)arg3;	// IMP=0x000000010009b99c
- (unsigned int)crs_setAuthorizationRandom:(id)arg1 mac:(id)arg2;	// IMP=0x000000010009b538
- (_Bool)crs_markApplicationForDelete:(id)arg1;	// IMP=0x000000010009b1a8
- (_Bool)crs_setApplications:(id)arg1 isSelectable:(_Bool)arg2 groupActivationStyle:(unsigned char)arg3;	// IMP=0x000000010009b03c
- (_Bool)_crs_setApplications:(id)arg1 isSelectable:(_Bool)arg2 groupActivationStyle:(unsigned char)arg3;	// IMP=0x000000010009a840
- (_Bool)crs_deactivateAll;	// IMP=0x000000010009a480
- (id)crs_getApplicationsWithSearchCriteria:(id)arg1;	// IMP=0x0000000100099f1c
- (id)crs_applicationsFromTLV:(id)arg1;	// IMP=0x0000000100098b98
- (id)crs_getStatus:(id)arg1 firstRequest:(_Bool)arg2;	// IMP=0x0000000100098b74
- (id)dumpAppletLogging:(id)arg1 info:(id *)arg2;	// IMP=0x00000001000a3fd4
- (id)getAndResetLPEMCounter:(long long *)arg1;	// IMP=0x00000001000a37fc
- (_Bool)getPresenceOfAttackLog:(_Bool *)arg1;	// IMP=0x00000001000a3768
- (id)getAttackCounterLogAsHex;	// IMP=0x00000001000a3678
- (id)getAttackCounterLogAsBinary;	// IMP=0x00000001000a35ac
- (id)getAttackCounterLog;	// IMP=0x00000001000a3514
- (id)getOSUpdateLog;	// IMP=0x00000001000a3450
- (id)decodeCRSPlatformConfiguration:(id)arg1;	// IMP=0x00000001000a3128
- (id)decodeCRSResponse:(id)arg1;	// IMP=0x00000001000a2cc8
- (id)decodeUpdateInfoResponse:(id)arg1;	// IMP=0x00000001000a25c4
- (id)decodeCPLCResponse:(id)arg1;	// IMP=0x00000001000a1ac0
- (id)decodeCertificateResponse:(id)arg1;	// IMP=0x00000001000a15cc
- (id)decodeRootSecurityDomainResponse:(id)arg1;	// IMP=0x00000001000a0c84
- (id)dumpContactlessRegistryService:(id *)arg1;	// IMP=0x00000001000a0720
- (id)dumpRootSecurityDomain:(int)arg1 info:(id *)arg2;	// IMP=0x000000010009f948
- (id)dumpDomain:(unsigned char)arg1 info:(id *)arg2;	// IMP=0x000000010009f3b8
- (unsigned int)upgradeKey:(unsigned char)arg1 inputData:(id)arg2 outWriteCount:(unsigned int *)arg3 appletResult:(unsigned short *)arg4;	// IMP=0x00000001000a7868
- (unsigned int)getHash:(id *)arg1 appletResult:(unsigned short *)arg2;	// IMP=0x00000001000a72c8
- (unsigned int)getData:(id *)arg1 updateKUD:(char *)arg2 outWriteLimit:(unsigned int *)arg3 outWriteCount:(unsigned int *)arg4 appletResult:(unsigned short *)arg5;	// IMP=0x00000001000a6c28
- (unsigned int)deleteSlot:(unsigned char)arg1 outWriteCount:(unsigned int *)arg2 appletResult:(unsigned short *)arg3;	// IMP=0x00000001000a6684
- (unsigned int)authorizeUpdate:(_Bool)arg1 slotIndex:(unsigned char)arg2 userToken:(id)arg3 outWriteCount:(unsigned int *)arg4 appletResult:(unsigned short *)arg5;	// IMP=0x00000001000a60c8
- (unsigned int)resetCounter:(unsigned char)arg1 userToken:(id)arg2 outWriteCount:(unsigned int *)arg3 appletResult:(unsigned short *)arg4;	// IMP=0x00000001000a5b10
- (unsigned int)derive:(unsigned char)arg1 userHash:(id)arg2 outData:(id *)arg3 outWriteCount:(unsigned int *)arg4 appletResult:(unsigned short *)arg5;	// IMP=0x00000001000a5418
- (unsigned int)allocateSlot:(unsigned char)arg1 authorizingUser:(unsigned char)arg2 authorizingUserToken:(id)arg3 outToken:(id *)arg4 outWriteCount:(unsigned int *)arg5 appletResult:(unsigned short *)arg6;	// IMP=0x00000001000a4d3c
- (id)recoverSLAM;	// IMP=0x00000001000b8168
- (_Bool)isLegacyApplet:(id)arg1;	// IMP=0x00000001000eaaf8
- (id)processEndOfFelicaTransactionForApplet:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000ea8ec
- (id)checkSEExpressAppletCompatibility:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000ea68c
- (_Bool)appletRequiresDynamicRF:(id)arg1;	// IMP=0x00000001000ea3ec
- (id)configureSEExpressApplets:(id)arg1 inSession:(_Bool)arg2;	// IMP=0x00000001000e9e1c
- (id)setPlasticCardMode:(_Bool)arg1 forApplet:(id)arg2;	// IMP=0x00000001000e9b44
- (id)reConfigureApplets;	// IMP=0x00000001000e9544
- (id)getATLAppletProperties:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000e915c
- (id)getATLAppletState:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000e8b2c
- (id)transceive:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000e8b20
- (id)deleteKey;	// IMP=0x000000010012b238
- (id)performPeerPayment:(id)arg1 uid:(unsigned int)arg2 request:(id)arg3 response:(id *)arg4;	// IMP=0x00000001001295b4
- (id)createOsloToken:(id)arg1 transactionID:(id *)arg2 error:(id *)arg3;	// IMP=0x0000000100129204
- (id)createSURFToken:(id)arg1 from:(id)arg2 userVerification:(unsigned char)arg3 error:(id *)arg4;	// IMP=0x00000001001283d4
- (id)sendSEPPKSURFPaymentRequest:(id)arg1 error:(id *)arg2;	// IMP=0x000000010012797c
- (unsigned char)getUserVerification:(id)arg1 error:(id *)arg2;	// IMP=0x0000000100127730
- (id)getSEPPKSURFPaymentRequest:(id)arg1 uid:(unsigned int)arg2 authorization:(id)arg3 hostChallenge:(id)arg4 cardChallenge:(id)arg5 cryptogram:(id)arg6 error:(id *)arg7;	// IMP=0x00000001001267c4
- (id)createSURFAPDU:(id)arg1 error:(id *)arg2;	// IMP=0x0000000100126580
- (id)createOsloSpecificInput:(id)arg1 error:(id *)arg2;	// IMP=0x0000000100126188
- (id)createSURFSpecificInput:(id)arg1 error:(id *)arg2;	// IMP=0x0000000100124684
- (id)performPeerPaymentEnrollment:(id)arg1 response:(id *)arg2;	// IMP=0x0000000100123574
- (id)sendCreateKey:(id)arg1 response:(id *)arg2;	// IMP=0x0000000100122b74
- (id)deleteKeyCommandWithError:(id *)arg1;	// IMP=0x0000000100122b4c
- (id)getSurfSlot;	// IMP=0x0000000100121fb8
- (void)deselectSURFApplet;	// IMP=0x0000000100121df0
- (id)selectSURFApplet;	// IMP=0x00000001001219a8

@end

