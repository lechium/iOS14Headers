//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "NFAWDLoggerDelegate-Protocol.h"
#import "NFCHardwareManagerInterface-Protocol.h"
#import "NFClientAppStateObserverDelegate-Protocol.h"
#import "NFDriverWrapperDelegate-Protocol.h"
#import "NFExpressModeManagerDelegate-Protocol.h"
#import "NFHardwareManagerInterface-Protocol.h"
#import "NFPowerObserverDelegate-Protocol.h"
#import "NFSecureElementWrapperDelegate-Protocol.h"
#import "NSXPCListenerDelegate-Protocol.h"
#import "_NFSessionQueue-Protocol.h"

@class NFBackgroundTagReadingManager, NFClientAppStateObserver, NFDriverWrapper, NFExpressModeManager, NFHardwareControllerInfo, NFHardwareSecureElementInfo, NFPowerObserver, NFPreferenceObserver, NFSecureElementWrapper, NFSecureXPCEventPublisher, NFTimer, NFXPCEventPublisher, NSArray, NSMutableArray, NSMutableDictionary, NSMutableSet, NSString, _NFControllerManager, _NFSession;
@protocol OS_dispatch_queue, OS_os_transaction;

@interface _NFHardwareManager : NSObject <NFHardwareManagerInterface, NFDriverWrapperDelegate, NFSecureElementWrapperDelegate, _NFSessionQueue, NFPowerObserverDelegate, NFClientAppStateObserverDelegate, NSXPCListenerDelegate, NFAWDLoggerDelegate, NFCHardwareManagerInterface, NFExpressModeManagerDelegate>
{
    _Bool _isRunning;	// 8 = 0x8
    _Bool _didPreWarmHardware;	// 9 = 0x9
    _Bool _nfcRadioEnabled;	// 10 = 0xa
    unsigned long long _hardwareState;	// 16 = 0x10
    _NFControllerManager *_controllerManager;	// 24 = 0x18
    NFExpressModeManager *_expressModeManager;	// 32 = 0x20
    NSMutableDictionary *_callbackHandlers;	// 40 = 0x28
    NSObject<OS_dispatch_queue> *_xpcConnectionQueue;	// 48 = 0x30
    NSMutableArray *_xpcConnections;	// 56 = 0x38
    NFPowerObserver *_powerObserver;	// 64 = 0x40
    NFPreferenceObserver *_prefObserver;	// 72 = 0x48
    NFHardwareSecureElementInfo *_secureElementInfo;	// 80 = 0x50
    NFHardwareSecureElementInfo *_icefallSecureElementInfo;	// 88 = 0x58
    unsigned long long _lastKnownRoutingMode;	// 96 = 0x60
    _Bool _pendingDriverFlagChange;	// 104 = 0x68
    NSMutableSet *_persistentFieldDetectClients;	// 112 = 0x70
    NSMutableArray *_fieldDetectSessions;	// 120 = 0x78
    NSObject<OS_os_transaction> *_fieldDetectTransaction;	// 128 = 0x80
    _NFSession *_currentSecureElementSession;	// 136 = 0x88
    NSMutableArray *_secureElementSessionQueue;	// 144 = 0x90
    _Bool _avoidSEResetsActive;	// 152 = 0x98
    CDStruct_005b3ce2 _routingTable;	// 156 = 0x9c
    unsigned long long _cardEmulationProtocol;	// 176 = 0xb0
    NSObject<OS_dispatch_queue> *_workQueue;	// 184 = 0xb8
    BOOL _sessionCounter;	// 192 = 0xc0
    NFClientAppStateObserver *_appStateObserver;	// 200 = 0xc8
    NSObject<OS_os_transaction> *_keepAliveTransaction;	// 208 = 0xd0
    _Bool _systemWillSleep;	// 216 = 0xd8
    _Bool _fieldDetectDisabledWhenSleep;	// 217 = 0xd9
    _Bool _processedACLog;	// 218 = 0xda
    NFTimer *_stockholmDispatchOnceTimer;	// 224 = 0xe0
    _Bool _restrictedModeBroadcasted;	// 232 = 0xe8
    unsigned short _prioritySessionCount;	// 234 = 0xea
    NSArray *_hostEmulationLog;	// 240 = 0xf0
    int _notifyToken;	// 248 = 0xf8
    unsigned long long _stateCaptureHandle;	// 256 = 0x100
    int _timeLimitedReaderSessionCount;	// 264 = 0x108
    _Bool _collectAWD;	// 268 = 0x10c
    _Bool _attackLogPresent;	// 269 = 0x10d
    _Bool _powerCycleAfterThisSession;	// 270 = 0x10e
    _Bool _isNonUIBuild;	// 271 = 0x10f
    _Bool _isAPDevBoard;	// 272 = 0x110
    long long _suspendReaderSession;	// 280 = 0x118
    NFBackgroundTagReadingManager *_backgroundTagReadingManager;	// 288 = 0x120
    _Bool _forceHeadlessOnDuringShutdown;	// 296 = 0x128
    _Bool _fdPaused;	// 297 = 0x129
    _Bool _readerUserNotified;	// 298 = 0x12a
    _Bool _radioDisabledNotificationPopup;	// 299 = 0x12b
    NFXPCEventPublisher *_eventPublisher;	// 304 = 0x130
    int _uiInvalidationHandlerState;	// 312 = 0x138
    _Bool _fieldDetectEnabled;	// 316 = 0x13c
    _Bool _userInitiatedShutdown;	// 317 = 0x13d
    NFDriverWrapper *_driverWrapper;	// 320 = 0x140
    NFSecureElementWrapper *_secureElementWrapper;	// 328 = 0x148
    NFSecureElementWrapper *_icefallSecureElementWrapper;	// 336 = 0x150
    NFHardwareControllerInfo *_controllerInfo;	// 344 = 0x158
    NSObject<OS_dispatch_queue> *_xpcEventNotificationQueue;	// 352 = 0x160
    NFSecureXPCEventPublisher *_walletEventPublisher;	// 360 = 0x168
}

+ (id)sharedHardwareManager;	// IMP=0x00000001000f39c8
- (void).cxx_destruct;	// IMP=0x000000010011de64
@property(readonly, nonatomic) NFSecureXPCEventPublisher *walletEventPublisher; // @synthesize walletEventPublisher=_walletEventPublisher;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *xpcEventNotificationQueue; // @synthesize xpcEventNotificationQueue=_xpcEventNotificationQueue;
@property(readonly, nonatomic) _Bool userInitiatedShutdown; // @synthesize userInitiatedShutdown=_userInitiatedShutdown;
@property(readonly) _Bool fieldDetectEnabled; // @synthesize fieldDetectEnabled=_fieldDetectEnabled;
@property(readonly) NFHardwareControllerInfo *controllerInfo; // @synthesize controllerInfo=_controllerInfo;
@property(readonly) NFSecureElementWrapper *icefallSecureElementWrapper; // @synthesize icefallSecureElementWrapper=_icefallSecureElementWrapper;
@property(readonly) NFSecureElementWrapper *secureElementWrapper; // @synthesize secureElementWrapper=_secureElementWrapper;
@property(readonly) NFDriverWrapper *driverWrapper; // @synthesize driverWrapper=_driverWrapper;
- (_Bool)canReaderSessionStart;	// IMP=0x000000010011de00
- (void)resumeReaderSessionStart;	// IMP=0x000000010011dca8
- (void)suspendReaderSessionStart;	// IMP=0x000000010011dc8c
- (_Bool)configureExpressFelicaEntry:(int)arg1 andTxEndPatternV2:(_Bool)arg2;	// IMP=0x000000010011da6c
- (struct os_state_data_s *)dumpState;	// IMP=0x000000010011cfe4
- (void)notifyReaderModeActivityStart;	// IMP=0x000000010011cfa4
- (void)notifyReaderModeActivityEnd;	// IMP=0x000000010011cf68
@property(readonly) unsigned long long hardwarePlatform;
- (unsigned long long)defaultRoutingMode;	// IMP=0x000000010011ce68
- (_Bool)restartDiscovery;	// IMP=0x000000010011ce58
- (id)_setSecureElementRoutingTable:(CDStruct_005b3ce2)arg1 cardEmulationProtocol:(unsigned long long)arg2;	// IMP=0x000000010011c834
- (id)setSecureElementRoutingMode:(unsigned long long)arg1 cardEmulationProtocol:(unsigned long long)arg2;	// IMP=0x000000010011c334
- (id)setSecureElementRoutingMode:(unsigned long long)arg1 cardEmulationProtocol:(unsigned long long)arg2 fieldDetect:(_Bool)arg3;	// IMP=0x000000010011c1b0
- (id)setSecureElementRoutingMode:(unsigned long long)arg1;	// IMP=0x000000010011c01c
- (id)setSecureElementRoutingMode:(unsigned long long)arg1 andFieldDetect:(unsigned long long)arg2;	// IMP=0x000000010011be8c
- (void)pauseFieldDetect:(_Bool)arg1;	// IMP=0x000000010011be84
- (void)reconfigureDynamicTransitRF:(unsigned long long)arg1 withOverride:(_Bool)arg2;	// IMP=0x000000010011bc10
- (_Bool)deviceRequiresFDTChanges;	// IMP=0x000000010011bb94
- (id)setHostEmulationEnabled:(_Bool)arg1;	// IMP=0x000000010011b8f0
- (id)setFieldDetectEnabled:(_Bool)arg1;	// IMP=0x000000010011b300
- (void)preferencesDidChange;	// IMP=0x000000010011afc0
- (_Bool)_readDriverSettings:(int *)arg1 pollingDuration:(long long *)arg2 genericATxTimeout:(long long *)arg3 chipscopeConfig:(id *)arg4;	// IMP=0x0000000100119cf0
- (void)clientAppIsSuspended:(id)arg1;	// IMP=0x00000001001197d0
- (void)powerObserverSystemHasPoweredOn:(id)arg1;	// IMP=0x00000001001193e4
- (void)powerObserverSystemWillSleep:(id)arg1;	// IMP=0x0000000100118b14
- (void)markApplicationForDelete:(id)arg1;	// IMP=0x0000000100118aa4
- (void)updateSeInfo:(id)arg1;	// IMP=0x000000010011876c
- (_Bool)isIceFall:(id)arg1;	// IMP=0x000000010011875c
- (void)secureElementReturnedRestrictedMode:(id)arg1;	// IMP=0x0000000100118698
- (void)handleSecureElementRemoved:(int)arg1 withReason:(unsigned int)arg2;	// IMP=0x0000000100118488
- (void)handleReaderBurnoutCleared;	// IMP=0x00000001001182e8
- (void)handleReaderBurnoutTimer;	// IMP=0x00000001001180ec
- (void)handleRemoteTagsDetected:(id)arg1;	// IMP=0x0000000100117ed8
- (void)handleHostCardReaderDetected:(id)arg1;	// IMP=0x0000000100117e00
- (void)handleFelicaStateEvent:(id)arg1 appletAID:(id)arg2;	// IMP=0x0000000100117c88
- (void)handleTransactionEndEvent:(id)arg1;	// IMP=0x000000010011770c
- (void)handleTransactionStartEvent:(id)arg1 atlData:(id)arg2;	// IMP=0x00000001001171a8
- (void)handleTimerExpiredEvent:(id)arg1;	// IMP=0x000000010011704c
- (void)handleTemperatureChange:(double)arg1;	// IMP=0x0000000100116e08
- (void)handleSelectEvent:(id)arg1;	// IMP=0x0000000100116c04
- (void)queryForPresenceOfAttackLog:(int)arg1;	// IMP=0x00000001001168d4
- (void)handleSecureElementEnteredRestrictedModeExit:(int)arg1;	// IMP=0x0000000100116660
- (void)handleSecureElementEnteredRestrictedMode:(int)arg1;	// IMP=0x00000001001165ec
- (void)handleSecureElementEndOfOperation;	// IMP=0x0000000100116544
- (void)handleFieldReset;	// IMP=0x000000010011649c
- (void)handleFieldNotification:(id)arg1;	// IMP=0x0000000100115f3c
- (void)handleFieldChanged:(_Bool)arg1;	// IMP=0x0000000100115b80
- (id)workQueue;	// IMP=0x0000000100115b78
- (id)appletForIdentifier:(id)arg1;	// IMP=0x0000000100115aec
- (void)handleForceExpressModeEndEvent;	// IMP=0x0000000100115834
- (void)handleRequestService:(id)arg1 inExpress:(_Bool)arg2;	// IMP=0x0000000100115698
- (void)handleAppletInactivityTimeout:(id)arg1;	// IMP=0x000000010011535c
- (void)handleExpressModeTimeout;	// IMP=0x000000010011508c
- (void)handleExpressModeExited;	// IMP=0x0000000100114d14
- (void)handleExpressModeStarted;	// IMP=0x00000001001144dc
- (void)handleStackUnload;	// IMP=0x0000000100114480
- (void)handleStackLoad;	// IMP=0x0000000100114214
- (void)handleHardwareReset:(id)arg1;	// IMP=0x0000000100114208
- (void)handleRestartDiscovery;	// IMP=0x0000000100113efc
- (void)_postCLTMNotification;	// IMP=0x0000000100113a3c
- (oneway void)_sync_actOnUserInitiatedSystemShutDown:(unsigned int)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100113738
- (oneway void)actOnUserInitiatedSystemShutDown:(unsigned int)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x000000010011368c
- (void)_sync_updateBackgroundTagReading:(unsigned int)arg1 callback:(CDUnknownBlockType)arg2 connection:(id)arg3;	// IMP=0x000000010011338c
- (oneway void)updateBackgroundTagReading:(unsigned int)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x000000010011328c
- (void)_sync_preWarm:(CDUnknownBlockType)arg1 connection:(id)arg2;	// IMP=0x0000000100112e5c
- (oneway void)preWarm:(CDUnknownBlockType)arg1;	// IMP=0x0000000100112d70
- (oneway void)queueSecureElementAndHostEmulationSession:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100112294
- (oneway void)queueHostEmulationSession:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001001117e0
- (oneway void)queueNdefTagSession:(id)arg1 data:(id)arg2 callback:(CDUnknownBlockType)arg3;	// IMP=0x0000000100110ec0
- (oneway void)queueTrustSession:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001001104a0
- (oneway void)queuePeerPaymentSession:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x000000010010fa54
- (oneway void)areSessionsAllowed:(CDUnknownBlockType)arg1;	// IMP=0x000000010010f7fc
- (oneway void)queueSeshatSession:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x000000010010f124
- (oneway void)queueReaderSessionInternal:(id)arg1 showUI:(_Bool)arg2 callback:(CDUnknownBlockType)arg3;	// IMP=0x000000010010e6ec
- (void)_sync_configureReaderModeRFForTransitPartner:(_Bool)arg1 transitPartner:(unsigned int)arg2 callback:(CDUnknownBlockType)arg3 connection:(id)arg4;	// IMP=0x000000010010e068
- (oneway void)configureReaderModeRFForTransitPartner:(_Bool)arg1 transitPartner:(unsigned int)arg2 callback:(CDUnknownBlockType)arg3;	// IMP=0x000000010010df5c
- (oneway void)areFeaturesSupported:(unsigned long long)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x000000010010dcc4
- (oneway void)queueReaderSession:(id)arg1 sessionConfig:(id)arg2 callback:(CDUnknownBlockType)arg3;	// IMP=0x000000010010cb64
- (oneway void)queueLoyaltyAndPaymentSession:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x000000010010bd2c
- (oneway void)queueSecureElementManagerSession:(id)arg1 priority:(_Bool)arg2 callback:(CDUnknownBlockType)arg3;	// IMP=0x000000010010b548
- (oneway void)queueContactlessUICCSession:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x000000010010ab8c
- (oneway void)queueContactlessSession:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100109cdc
- (oneway void)queueContactlessPaymentSession:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100108ea4
- (oneway void)queueECommercePaymentSession:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100108458
- (oneway void)queueFieldDetectSession:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001001078ec
- (void)_sync_setChipscope:(_Bool)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x000000010010752c
- (oneway void)setChipscope:(_Bool)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100107480
- (void)_sync_dumpLPMDebugLog:(CDUnknownBlockType)arg1;	// IMP=0x0000000100107200
- (oneway void)dumpLPMDebugLog:(CDUnknownBlockType)arg1;	// IMP=0x0000000100107168
- (oneway void)getTemperature:(CDUnknownBlockType)arg1;	// IMP=0x0000000100106e30
- (oneway void)enableRadio:(_Bool)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100106634
- (oneway void)radioEnabled:(CDUnknownBlockType)arg1;	// IMP=0x00000001001062e4
- (oneway void)cancelSinglePollExpressModeAssertion:(CDUnknownBlockType)arg1;	// IMP=0x0000000100106114
- (oneway void)openSinglePollExpressModeAssertion:(double)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100105f44
- (void)_sync_getPowerCounters:(CDUnknownBlockType)arg1 connection:(id)arg2;	// IMP=0x00000001001059b4
- (oneway void)getPowerCounters:(CDUnknownBlockType)arg1;	// IMP=0x00000001001058c8
- (id)updateAllPowerCounters;	// IMP=0x00000001001055f8
- (void)_sync_disableHeadlessMiniNV:(CDUnknownBlockType)arg1 connection:(id)arg2;	// IMP=0x00000001001050a4
- (oneway void)disableHeadlessMiniNV:(CDUnknownBlockType)arg1;	// IMP=0x0000000100104f90
- (void)_sync_headlessFactoryMode:(CDUnknownBlockType)arg1 connection:(id)arg2;	// IMP=0x0000000100104a2c
- (oneway void)headlessFactoryMode:(CDUnknownBlockType)arg1;	// IMP=0x0000000100104918
- (void)_sync_configureHeadlessFactoryMode:(_Bool)arg1 callback:(CDUnknownBlockType)arg2 connection:(id)arg3;	// IMP=0x0000000100104174
- (oneway void)configureHeadlessFactoryMode:(_Bool)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x000000010010404c
- (id)powerCycleSE:(id)arg1;	// IMP=0x0000000100103d08
- (oneway void)areNFFeaturesSupported:(unsigned long long)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100103920
- (_Bool)supportsCathay;	// IMP=0x000000010010387c
- (oneway void)hasCard:(CDUnknownBlockType)arg1;	// IMP=0x00000001001036a8
- (oneway void)setAuthorization:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100103360
- (oneway void)blessedUser:(CDUnknownBlockType)arg1;	// IMP=0x0000000100103350
- (oneway void)setBlessedUser:(id)arg1 keybagUUID:(id)arg2 withAuthorization:(id)arg3 callback:(CDUnknownBlockType)arg4;	// IMP=0x00000001001032bc
- (oneway void)checkUserBlessing:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100103224
- (void)_sync_getHostCardEmulationLog:(CDUnknownBlockType)arg1 connection:(id)arg2;	// IMP=0x0000000100102f10
- (oneway void)getHostCardEmulationLog:(CDUnknownBlockType)arg1;	// IMP=0x0000000100102db8
- (void)_sync_toggleGPIO:(unsigned short)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100102a48
- (oneway void)toggleGPIO:(unsigned short)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x000000010010299c
- (void)_sync_enableHeadlessTestMode:(unsigned short)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x000000010010262c
- (oneway void)enableHeadlessTestMode:(unsigned short)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100102580
- (oneway void)disableLPEMFeature:(unsigned long long)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100102354
- (oneway void)enableLPEMFeature:(unsigned long long)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100102128
- (void)_sync_triggerDelayedWake:(unsigned char)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100101c9c
- (oneway void)triggerDelayedWake:(unsigned char)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100101bf0
- (oneway void)secureElements:(CDUnknownBlockType)arg1;	// IMP=0x0000000100101b20
- (void)_sync_unregisterForCallbacks:(id)arg1 connection:(id)arg2;	// IMP=0x0000000100101990
- (oneway void)unregisterForCallbacks:(id)arg1;	// IMP=0x00000001001018a4
- (void)_sync_registerForCallbacks:(id)arg1 connection:(id)arg2;	// IMP=0x00000001001016fc
- (oneway void)registerForCallbacks:(id)arg1;	// IMP=0x0000000100101610
- (id)_sync_setFieldDetectEnabled:(_Bool)arg1 callback:(CDUnknownBlockType)arg2 connection:(id)arg3;	// IMP=0x0000000100101140
- (oneway void)setFieldDetectEnabled:(_Bool)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100101008
- (void)_sync_pushSignedRF:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100100b8c
- (oneway void)pushSignedRF:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x0000000100100ab0
- (void)_sync_getUniqueFDRKeyXPC:(CDUnknownBlockType)arg1;	// IMP=0x0000000100100804
- (oneway void)getUniqueFDRKeyXPC:(CDUnknownBlockType)arg1;	// IMP=0x000000010010076c
- (void)_sync_getDieID:(CDUnknownBlockType)arg1;	// IMP=0x00000001001003ec
- (oneway void)getDieID:(CDUnknownBlockType)arg1;	// IMP=0x0000000100100354
- (void)_sync_rfSettings:(CDUnknownBlockType)arg1;	// IMP=0x00000001000fff60
- (oneway void)rfSettings:(CDUnknownBlockType)arg1;	// IMP=0x00000001000ffec8
- (void)_sync_expressModesInfo:(CDUnknownBlockType)arg1;	// IMP=0x00000001000ffe34
- (oneway void)expressModesInfo:(CDUnknownBlockType)arg1;	// IMP=0x00000001000ffd9c
- (oneway void)controllerInfo:(CDUnknownBlockType)arg1;	// IMP=0x00000001000ffd24
- (void)_postWalletEvent:(const char *)arg1 objectString:(id)arg2;	// IMP=0x00000001000ffc4c
- (void)_postWalletEvent:(const char *)arg1;	// IMP=0x00000001000ffad8
- (_Bool)backgroundTagDetectAllow;	// IMP=0x00000001000ffa58
- (void)processRestrictedModeState:(int)arg1;	// IMP=0x00000001000ff338
- (unsigned int)hardwareTypeForAWD;	// IMP=0x00000001000ff2a0
- (_Bool)isReaderModeSupported;	// IMP=0x00000001000ff000
- (void)lockStateChanged;	// IMP=0x00000001000fee00
- (_Bool)sessionsAllowedForTimeConsumingOperations:(_Bool)arg1;	// IMP=0x00000001000fe604
- (_Bool)regularSessionsAllowed:(id)arg1;	// IMP=0x00000001000fe4a0
- (_Bool)getDeviceKeybagState:(unsigned int *)arg1;	// IMP=0x00000001000fe33c
- (id)secureElementDidExitRestrictedMode:(id)arg1;	// IMP=0x00000001000fdd1c
- (void)prioritizeSession:(id)arg1;	// IMP=0x00000001000fd958
- (void)dequeueSession:(id)arg1;	// IMP=0x00000001000fd8bc
- (void)_dequeueSession:(id)arg1 startNextSession:(_Bool)arg2;	// IMP=0x00000001000fcf70
- (void)_dequeueHelperGreenCar;	// IMP=0x00000001000fcf6c
- (void)_dequeueHelperExpress:(_Bool)arg1 updateCache:(_Bool)arg2;	// IMP=0x00000001000fcef8
- (void)_dequeueHelperPowerCycle:(_Bool)arg1 startNextSession:(_Bool)arg2;	// IMP=0x00000001000fcbec
- (void)_dequeueHelperSESession:(id)arg1;	// IMP=0x00000001000fcb8c
- (void)_dequeueHelperLogHCESession:(id)arg1;	// IMP=0x00000001000fcb10
- (void)_dequeueHelperReaderSession:(id)arg1;	// IMP=0x00000001000fc99c
- (void)_dequeueHelperAvoidSEResets;	// IMP=0x00000001000fc918
- (id)_queueHelperReaderSession:(id)arg1 sessionConfig:(id)arg2 serviceType:(unsigned long long)arg3 whitelist:(id)arg4 xpcConnection:(id)arg5 isFirstInQueue:(_Bool *)arg6 outSession:(id *)arg7;	// IMP=0x00000001000fc180
- (_Bool)avoidSEReset:(_Bool)arg1;	// IMP=0x00000001000fbdfc
- (void)enableDefaultRouting;	// IMP=0x00000001000fbc54
- (void)maybeStartNextSession;	// IMP=0x00000001000fabf8
- (void)dumpLPEMAppletLogs;	// IMP=0x00000001000fa820
- (_Bool)executeBlock:(CDUnknownBlockType)arg1 sessionName:(id)arg2 routing:(unsigned long long)arg3;	// IMP=0x00000001000fa560
- (id)copyNextDequeuableSession;	// IMP=0x00000001000fa138
- (void)_startSessionHelperAvoidSEResets;	// IMP=0x00000001000fa0f8
- (void)_startSessionHelperFieldNotifications;	// IMP=0x00000001000fa03c
@property(readonly, nonatomic) _Bool hasSession;
- (oneway void)isHWSupported:(CDUnknownBlockType)arg1;	// IMP=0x00000001000f9f9c
- (_Bool)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;	// IMP=0x00000001000f9564
- (void)didCloseXPCConnection:(id)arg1;	// IMP=0x00000001000f8dd0
- (_Bool)_isRoutingActive;	// IMP=0x00000001000f8da0
- (void)_unloadService;	// IMP=0x00000001000f8c30
- (void)_loadService;	// IMP=0x00000001000f8a00
- (_Bool)nfcRadioEnabled:(id *)arg1 showUIPopup:(_Bool)arg2;	// IMP=0x00000001000f897c
- (_Bool)refreshIcefallSecureElementInfo;	// IMP=0x00000001000f8770
- (_Bool)refreshSecureElementInfo;	// IMP=0x00000001000f852c
- (void)_loadIcefallSecureElement;	// IMP=0x00000001000f82bc
- (void)_loadEmbeddedSecureElement;	// IMP=0x00000001000f71e8
@property(readonly) _Bool shouldUseFieldDetect;
- (void)_notifyCurrentSessionOfPendingPrioritySession;	// IMP=0x00000001000f70f4
- (void)_updatePrioritySessionCount;	// IMP=0x00000001000f6f04
- (void)_queueSecureElementSession:(id)arg1 forConnection:(id)arg2 isFirstInQueue:(_Bool *)arg3;	// IMP=0x00000001000f6a98
- (void)_showRadioDisabledPopup;	// IMP=0x00000001000f694c
- (void)_postActiveSessionsNotification:(int)arg1;	// IMP=0x00000001000f6654
- (_Bool)_isInOSMode;	// IMP=0x00000001000f662c
- (_Bool)_isInJCOPMode;	// IMP=0x00000001000f6604
- (_Bool)_isInOSUAppletMigrationState;	// IMP=0x00000001000f6474
- (_Bool)_isInAppletMigrationState;	// IMP=0x00000001000f644c
- (_Bool)_loadHWInfo;	// IMP=0x00000001000f52dc
- (unsigned long long)_loadHW;	// IMP=0x00000001000f4b80
- (void)getPresenceOfAttackLog;	// IMP=0x00000001000f4b0c
- (void)schedulePostStartupWork;	// IMP=0x00000001000f4ad8
- (void)schedulePostStartupWork:(double)arg1;	// IMP=0x00000001000f49a4
- (double)postStartupWorkScheduledTime;	// IMP=0x00000001000f48ec
- (void)doPostStartupWork;	// IMP=0x00000001000f47c0
- (void)stop;	// IMP=0x00000001000f44e4
- (void)start;	// IMP=0x00000001000f4268
- (void)dealloc;	// IMP=0x00000001000f4208
- (id)init;	// IMP=0x00000001000f3a34

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

