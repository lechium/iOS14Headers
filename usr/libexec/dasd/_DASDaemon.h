//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "NSXPCListenerDelegate-Protocol.h"
#import "_DASActivityMetering-Protocol.h"
#import "_DASActivityOmnibusScheduling-Protocol.h"
#import "_DASPluginDelegate-Protocol.h"

@class NSCountedSet, NSDate, NSDictionary, NSMutableArray, NSMutableDictionary, NSMutableSet, NSString, NSUserDefaults, NSXPCListener, _CDContextualKeyPath, _DASActivityProfiler, _DASBARScheduler, _DASBatchingQueue, _DASBlueListManager, _DASBudgetManager, _DASClosureManager, _DASControlEngine, _DASFairScheduleManager, _DASNetworkEvaluationMonitor, _DASSleepWakeMonitor, _DASSwapPredictionManager, _DASTimer, _DASUserRequestedBackupTaskManager;
@protocol OS_dispatch_queue, OS_dispatch_source, _CDLocalContext, _DASDataStore;

@interface _DASDaemon : NSObject <NSXPCListenerDelegate, _DASPluginDelegate, _DASActivityOmnibusScheduling, _DASActivityMetering>
{
    struct os_unfair_lock_s _groupLock;	// 8 = 0x8
    struct os_unfair_lock_s _constraintsLock;	// 12 = 0xc
    struct os_unfair_lock_s _signpostLock;	// 16 = 0x10
    NSMutableArray *_clients;	// 24 = 0x18
    struct os_unfair_recursive_lock_s _activityStateLock;	// 32 = 0x20
    NSMutableSet *_pendingTasks;	// 40 = 0x28
    NSMutableSet *_prerunningTasks;	// 48 = 0x30
    NSMutableSet *_runningTasks;	// 56 = 0x38
    NSDictionary *_triggerToPolicyMap;	// 64 = 0x40
    NSMutableDictionary *_triggerToActivitiesMap;	// 72 = 0x48
    NSMutableDictionary *_activityToIncompatibleActivitiesMap;	// 80 = 0x50
    NSMutableDictionary *_groups;	// 88 = 0x58
    NSMutableDictionary *_groupToPendingTasks;	// 96 = 0x60
    NSMutableDictionary *_groupToRunningTasks;	// 104 = 0x68
    NSMutableDictionary *_groupToPrerunningTasks;	// 112 = 0x70
    struct os_unfair_recursive_lock_s _applicationLaunchRequestsLock;	// 120 = 0x78
    NSMutableDictionary *_applicationLaunchRequests;	// 128 = 0x80
    NSMutableDictionary *_extensionLaunchRequests;	// 136 = 0x88
    _DASUserRequestedBackupTaskManager *_backupTaskManager;	// 144 = 0x90
    id <_CDLocalContext> _context;	// 152 = 0x98
    NSXPCListener *_listener;	// 160 = 0xa0
    NSObject<OS_dispatch_queue> *_timerSchedulingQueue;	// 168 = 0xa8
    _DASTimer *_schedulingTimer;	// 176 = 0xb0
    NSDate *_timerEarliestFireDate;	// 184 = 0xb8
    NSDate *_timerLatestFireDate;	// 192 = 0xc0
    _DASNetworkEvaluationMonitor *_networkEvaluationMonitor;	// 200 = 0xc8
    _DASSleepWakeMonitor *_sleepWakeMonitor;	// 208 = 0xd0
    id <_DASDataStore> _store;	// 216 = 0xd8
    NSObject<OS_dispatch_source> *_optimalScoringTimer;	// 224 = 0xe0
    NSObject<OS_dispatch_source> *_databaseMaintenanceTimer;	// 232 = 0xe8
    NSObject<OS_dispatch_queue> *_evaluationQueue;	// 240 = 0xf0
    _DASBatchingQueue *_triggerBatchingQueue;	// 248 = 0xf8
    _DASBatchingQueue *_activityCompletedBatchingQueue;	// 256 = 0x100
    _DASFairScheduleManager *_fairScheduleManager;	// 264 = 0x108
    _DASControlEngine *_controlEnginge;	// 272 = 0x110
    NSMutableDictionary *_recentlyLaunchedApps;	// 280 = 0x118
    NSCountedSet *_launchesPerApp;	// 288 = 0x120
    NSObject<OS_dispatch_source> *_launchTimeResetTimer;	// 296 = 0x128
    NSObject<OS_dispatch_queue> *_launchQueue;	// 304 = 0x130
    _DASBARScheduler *_barScheduler;	// 312 = 0x138
    _DASBlueListManager *_blueListManager;	// 320 = 0x140
    NSObject<OS_dispatch_queue> *_activityLaunchQueue;	// 328 = 0x148
    _DASSwapPredictionManager *_swapManager;	// 336 = 0x150
    _DASClosureManager *_closureManager;	// 344 = 0x158
    _DASBudgetManager *_budgetManager;	// 352 = 0x160
    unsigned long long _photosIsBlocked;	// 360 = 0x168
    _CDContextualKeyPath *_utilityConstraintsKP;	// 368 = 0x170
    _CDContextualKeyPath *_maintenanceConstraintsKP;	// 376 = 0x178
    unsigned long long _utilityConstraints;	// 384 = 0x180
    unsigned long long _maintenanceConstraints;	// 392 = 0x188
    NSDictionary *_testModeParameters;	// 400 = 0x190
    NSDictionary *_pausedParameters;	// 408 = 0x198
    NSUserDefaults *_testingDefaults;	// 416 = 0x1a0
    NSMutableSet *_signpostActivitiesRunningDeviceActive;	// 424 = 0x1a8
    NSMutableSet *_signpostActivitiesRunningScreenOff;	// 432 = 0x1b0
    NSMutableDictionary *_activitiesWaitingForBGTaskClients;	// 440 = 0x1b8
    NSMutableDictionary *_connectedBGTaskClients;	// 448 = 0x1c0
    _DASActivityProfiler *_profiler;	// 456 = 0x1c8
}

+ (id)sharedInstance;	// IMP=0x00000001000594e0
+ (id)daemon;	// IMP=0x000000010005856c
- (void).cxx_destruct;	// IMP=0x000000010007693c
@property(retain, nonatomic) _DASActivityProfiler *profiler; // @synthesize profiler=_profiler;
@property(retain, nonatomic) NSMutableDictionary *connectedBGTaskClients; // @synthesize connectedBGTaskClients=_connectedBGTaskClients;
@property(retain, nonatomic) NSMutableDictionary *activitiesWaitingForBGTaskClients; // @synthesize activitiesWaitingForBGTaskClients=_activitiesWaitingForBGTaskClients;
@property(retain, nonatomic) NSMutableSet *signpostActivitiesRunningScreenOff; // @synthesize signpostActivitiesRunningScreenOff=_signpostActivitiesRunningScreenOff;
@property(retain, nonatomic) NSMutableSet *signpostActivitiesRunningDeviceActive; // @synthesize signpostActivitiesRunningDeviceActive=_signpostActivitiesRunningDeviceActive;
@property(nonatomic) struct os_unfair_lock_s signpostLock; // @synthesize signpostLock=_signpostLock;
@property(retain, nonatomic) NSUserDefaults *testingDefaults; // @synthesize testingDefaults=_testingDefaults;
@property(retain) NSDictionary *pausedParameters; // @synthesize pausedParameters=_pausedParameters;
@property(retain) NSDictionary *testModeParameters; // @synthesize testModeParameters=_testModeParameters;
@property(nonatomic) unsigned long long maintenanceConstraints; // @synthesize maintenanceConstraints=_maintenanceConstraints;
@property(nonatomic) unsigned long long utilityConstraints; // @synthesize utilityConstraints=_utilityConstraints;
@property(retain, nonatomic) _CDContextualKeyPath *maintenanceConstraintsKP; // @synthesize maintenanceConstraintsKP=_maintenanceConstraintsKP;
@property(retain, nonatomic) _CDContextualKeyPath *utilityConstraintsKP; // @synthesize utilityConstraintsKP=_utilityConstraintsKP;
@property(nonatomic) struct os_unfair_lock_s constraintsLock; // @synthesize constraintsLock=_constraintsLock;
@property(nonatomic) unsigned long long photosIsBlocked; // @synthesize photosIsBlocked=_photosIsBlocked;
@property(retain, nonatomic) _DASBudgetManager *budgetManager; // @synthesize budgetManager=_budgetManager;
@property(retain, nonatomic) _DASClosureManager *closureManager; // @synthesize closureManager=_closureManager;
@property(retain, nonatomic) _DASSwapPredictionManager *swapManager; // @synthesize swapManager=_swapManager;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *activityLaunchQueue; // @synthesize activityLaunchQueue=_activityLaunchQueue;
@property(retain, nonatomic) _DASBlueListManager *blueListManager; // @synthesize blueListManager=_blueListManager;
@property(retain, nonatomic) _DASBARScheduler *barScheduler; // @synthesize barScheduler=_barScheduler;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *launchQueue; // @synthesize launchQueue=_launchQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *launchTimeResetTimer; // @synthesize launchTimeResetTimer=_launchTimeResetTimer;
@property(retain, nonatomic) NSCountedSet *launchesPerApp; // @synthesize launchesPerApp=_launchesPerApp;
@property(retain, nonatomic) NSMutableDictionary *recentlyLaunchedApps; // @synthesize recentlyLaunchedApps=_recentlyLaunchedApps;
@property(retain, nonatomic) _DASControlEngine *controlEnginge; // @synthesize controlEnginge=_controlEnginge;
@property(retain, nonatomic) _DASFairScheduleManager *fairScheduleManager; // @synthesize fairScheduleManager=_fairScheduleManager;
@property(retain, nonatomic) _DASBatchingQueue *activityCompletedBatchingQueue; // @synthesize activityCompletedBatchingQueue=_activityCompletedBatchingQueue;
@property(retain, nonatomic) _DASBatchingQueue *triggerBatchingQueue; // @synthesize triggerBatchingQueue=_triggerBatchingQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *evaluationQueue; // @synthesize evaluationQueue=_evaluationQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *databaseMaintenanceTimer; // @synthesize databaseMaintenanceTimer=_databaseMaintenanceTimer;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *optimalScoringTimer; // @synthesize optimalScoringTimer=_optimalScoringTimer;
@property(retain, nonatomic) id <_DASDataStore> store; // @synthesize store=_store;
@property(retain, nonatomic) _DASSleepWakeMonitor *sleepWakeMonitor; // @synthesize sleepWakeMonitor=_sleepWakeMonitor;
@property(retain, nonatomic) _DASNetworkEvaluationMonitor *networkEvaluationMonitor; // @synthesize networkEvaluationMonitor=_networkEvaluationMonitor;
@property(retain, nonatomic) NSDate *timerLatestFireDate; // @synthesize timerLatestFireDate=_timerLatestFireDate;
@property(retain, nonatomic) NSDate *timerEarliestFireDate; // @synthesize timerEarliestFireDate=_timerEarliestFireDate;
@property(retain, nonatomic) _DASTimer *schedulingTimer; // @synthesize schedulingTimer=_schedulingTimer;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *timerSchedulingQueue; // @synthesize timerSchedulingQueue=_timerSchedulingQueue;
@property(retain, nonatomic) NSXPCListener *listener; // @synthesize listener=_listener;
@property(retain, nonatomic) id <_CDLocalContext> context; // @synthesize context=_context;
@property(retain, nonatomic) _DASUserRequestedBackupTaskManager *backupTaskManager; // @synthesize backupTaskManager=_backupTaskManager;
@property(retain, nonatomic) NSMutableDictionary *extensionLaunchRequests; // @synthesize extensionLaunchRequests=_extensionLaunchRequests;
@property(retain, nonatomic) NSMutableDictionary *applicationLaunchRequests; // @synthesize applicationLaunchRequests=_applicationLaunchRequests;
@property(nonatomic) struct os_unfair_recursive_lock_s applicationLaunchRequestsLock; // @synthesize applicationLaunchRequestsLock=_applicationLaunchRequestsLock;
@property(retain, nonatomic) NSMutableDictionary *groupToPrerunningTasks; // @synthesize groupToPrerunningTasks=_groupToPrerunningTasks;
@property(retain, nonatomic) NSMutableDictionary *groupToRunningTasks; // @synthesize groupToRunningTasks=_groupToRunningTasks;
@property(retain, nonatomic) NSMutableDictionary *groupToPendingTasks; // @synthesize groupToPendingTasks=_groupToPendingTasks;
@property(retain, nonatomic) NSMutableDictionary *groups; // @synthesize groups=_groups;
@property(nonatomic) struct os_unfair_lock_s groupLock; // @synthesize groupLock=_groupLock;
@property(retain, nonatomic) NSMutableDictionary *activityToIncompatibleActivitiesMap; // @synthesize activityToIncompatibleActivitiesMap=_activityToIncompatibleActivitiesMap;
@property(retain, nonatomic) NSMutableDictionary *triggerToActivitiesMap; // @synthesize triggerToActivitiesMap=_triggerToActivitiesMap;
@property(retain, nonatomic) NSDictionary *triggerToPolicyMap; // @synthesize triggerToPolicyMap=_triggerToPolicyMap;
@property(retain, nonatomic) NSMutableSet *runningTasks; // @synthesize runningTasks=_runningTasks;
@property(retain, nonatomic) NSMutableSet *prerunningTasks; // @synthesize prerunningTasks=_prerunningTasks;
@property(retain, nonatomic) NSMutableSet *pendingTasks; // @synthesize pendingTasks=_pendingTasks;
@property(nonatomic) struct os_unfair_recursive_lock_s activityStateLock; // @synthesize activityStateLock=_activityStateLock;
@property(retain, nonatomic) NSMutableArray *clients; // @synthesize clients=_clients;
- (void)extensionActivity:(id)arg1 finishedWithStatus:(unsigned char)arg2;	// IMP=0x0000000100076338
- (void)activityStoppedWithParameters:(id)arg1;	// IMP=0x0000000100076030
- (void)activityStartedWithParameters:(id)arg1;	// IMP=0x0000000100076020
- (id)tasksNoLongerEligible;	// IMP=0x0000000100075f9c
- (id)tasksNoLongerEligibleFromTasks:(id)arg1;	// IMP=0x0000000100075a9c
- (id)candidateGroupActivityForPreemption:(id)arg1;	// IMP=0x0000000100075804
- (id)candidateLongRunningActivityForPreemption:(id)arg1;	// IMP=0x000000010007554c
- (_Bool)shouldPreemptTask:(id)arg1 withStartDate:(id)arg2 atDate:(id)arg3;	// IMP=0x0000000100075340
- (_Bool)activity:(id)arg1 withStartDate:(id)arg2 runningForTooLongAtDate:(id)arg3;	// IMP=0x0000000100075180
- (void)evaluateScoreAndRunAllActivitiesForReason:(id)arg1;	// IMP=0x0000000100074f98
- (void)unprotectedEvaluateScoreAndRunActivities:(id)arg1;	// IMP=0x0000000100074874
- (void)evaluateScoreAndRunActivities:(id)arg1;	// IMP=0x00000001000747a8
- (void)chooseActivitiesToRunFromCandidateActivities:(id)arg1 toBeRunActivities:(id)arg2 toLaunchApplications:(id)arg3 toLaunchExtension:(id)arg4;	// IMP=0x0000000100073964
- (void)determineNextTimerFireDateAndSchedule;	// IMP=0x00000001000732c0
- (void)schedulingTimerFired;	// IMP=0x00000001000731a4
- (void)periodicCalculationForOptimal;	// IMP=0x0000000100072f90
- (void)removeActivityFromTriggerMap:(id)arg1;	// IMP=0x0000000100072ea8
- (void)associateActivity:(id)arg1 withTriggerKeys:(id)arg2;	// IMP=0x0000000100072c74
- (void)addTriggersToActivity:(id)arg1;	// IMP=0x00000001000727b8
- (void)registerTriggersWithContextStoreForPolicies:(id)arg1;	// IMP=0x0000000100072434
- (void)registerWithContextStoreForId:(id)arg1 contextualPredicate:(id)arg2 dismissalCondition:(id)arg3 deviceSet:(unsigned long long)arg4 mustWake:(_Bool)arg5;	// IMP=0x0000000100071a68
- (void)handleCompletedActivities:(id)arg1;	// IMP=0x00000001000716d4
- (void)handleTriggers:(id)arg1;	// IMP=0x00000001000709d0
- (void)registerForNetworkPathEvaluation;	// IMP=0x0000000100070848
- (void)pauseWithParameters:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000706d8
- (void)enterTestModeWithParameters:(id)arg1;	// IMP=0x00000001000705f0
- (void)blockingPoliciesWithParameters:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100070090
- (void)clasStatusWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010007000c
- (void)policiesWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010006fe48
- (void)setCapacity:(double)arg1 forBudgetWithName:(id)arg2;	// IMP=0x000000010006fe38
- (void)setBalance:(double)arg1 forBudgetWithName:(id)arg2;	// IMP=0x000000010006fe28
- (void)remainingBalanceForBudgetWithName:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000010006fd9c
- (void)allBudgetsWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010006fd2c
- (void)currentPredictionsWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010006fcb8
- (void)forceRunActivities:(id)arg1;	// IMP=0x000000010006fa44
- (id)activityRunStatistics;	// IMP=0x000000010006fa3c
- (void)activityRunStatisticsWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010006fa28
- (void)scoresForActivityWithName:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000010006fa14
- (void)runningGroupActivitiesWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010006f82c
- (void)runningActivitiesWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010006f4d4
- (void)delayedRunningActivitiesWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010006f32c
- (void)profileForActivityWithName:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000010006f298
- (void)submittedActivitiesWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010006f020
- (void)completeTaskRequest:(id)arg1 forApplication:(id)arg2;	// IMP=0x000000010006efe0
- (void)completeTaskRequest:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000010006efdc
- (void)willExpireBGTaskActivities:(id)arg1;	// IMP=0x000000010006efd8
- (void)handleLaunchFromDaemonForActivities:(id)arg1;	// IMP=0x000000010006efd4
- (void)establishConnectionFromClient:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000010006eacc
- (void)establishConnection:(CDUnknownBlockType)arg1;	// IMP=0x000000010006eac8
- (void)scheduleConnectionTimeoutForPid:(int)arg1;	// IMP=0x000000010006e5b0
- (void)getPendingTaskRequestsForApplication:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000010006e38c
- (void)getPendingTaskRequestsWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010006e388
- (void)cancelTaskRequestWithIdentifier:(id)arg1 forApplication:(id)arg2;	// IMP=0x000000010006e16c
- (void)cancelTaskRequestWithIdentifier:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000010006e168
- (void)cancelAllTaskRequestsForApplication:(id)arg1;	// IMP=0x000000010006dfac
- (void)cancelAllTaskRequestsWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010006dfa8
- (_Bool)canSubmitValidatedTaskRequest:(id)arg1 withError:(id *)arg2;	// IMP=0x000000010006d628
- (void)submitTaskRequest:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000010006d624
- (void)setMinimumBackgroundFetchInterval:(double)arg1 forApp:(id)arg2;	// IMP=0x000000010006d614
- (void)submitActivity:(id)arg1 inGroup:(id)arg2;	// IMP=0x000000010006d434
- (void)submitActivity:(id)arg1 inGroupWithName:(id)arg2;	// IMP=0x000000010006d3f4
- (void)createActivityGroup:(id)arg1;	// IMP=0x000000010006d2c8
- (void)addPendingActivitiesToGroups:(id)arg1;	// IMP=0x000000010006d164
- (void)addPendingActivity:(id)arg1 toGroupWithName:(id)arg2;	// IMP=0x000000010006d084
- (void)addRunningActivity:(id)arg1 toGroupWithName:(id)arg2;	// IMP=0x000000010006ce74
- (void)addPrerunningActivity:(id)arg1 toGroupWithName:(id)arg2;	// IMP=0x000000010006ca84
- (void)updateActivity:(id)arg1 withParameters:(id)arg2;	// IMP=0x000000010006c830
- (void)activityCanceled:(id)arg1;	// IMP=0x000000010006c5f8
- (void)activityCompleted:(id)arg1;	// IMP=0x000000010006c3c0
- (void)signpostEndForActivity:(id)arg1 forSignpostType:(unsigned long long)arg2;	// IMP=0x000000010006c1f4
- (void)signpostBeginForActivity:(id)arg1 forSignpostType:(unsigned long long)arg2;	// IMP=0x000000010006bf64
- (id)signpostNameForActivity:(id)arg1;	// IMP=0x000000010006bb58
- (void)activityStarted:(id)arg1;	// IMP=0x000000010006b600
- (void)handleNoLongerRunningActivity:(id)arg1;	// IMP=0x000000010006abe8
- (void)handleRescindedActivity:(id)arg1;	// IMP=0x000000010006aa98
- (void)handleRunningActivities:(id)arg1;	// IMP=0x000000010006a938
- (void)submitActivities:(id)arg1;	// IMP=0x0000000100069cf8
- (void)startedActivities:(id)arg1;	// IMP=0x0000000100069a64
- (void)submitActivity:(id)arg1;	// IMP=0x0000000100068798
- (void)advanceAppLaunchDateIfNecessaryForActivity:(id)arg1;	// IMP=0x0000000100068260
- (_Bool)shouldEvaluateTask:(id)arg1 atDate:(id)arg2;	// IMP=0x00000001000680e8
- (void)handleEligibleActivities:(CDUnknownBlockType)arg1;	// IMP=0x00000001000680e4
- (void)immediatelyBeginWorkForActivity:(id)arg1;	// IMP=0x0000000100068084
- (void)beginWorkForActivity:(id)arg1;	// IMP=0x0000000100067fa8
- (void)moveActivityToRunning:(id)arg1;	// IMP=0x0000000100067e20
- (void)clearActivityFromPrerunning:(id)arg1;	// IMP=0x0000000100067b5c
- (void)moveActivityToPrerunning:(id)arg1;	// IMP=0x0000000100067a20
- (void)prepareActivityForStart:(id)arg1 atTime:(id)arg2;	// IMP=0x00000001000679e0
- (_Bool)shouldRunActivityNow:(id)arg1;	// IMP=0x000000010006794c
- (_Bool)shouldRunActivityNow:(id)arg1 withOtherActivities:(id)arg2;	// IMP=0x0000000100066e84
- (_Bool)testModeConstraintsRequireOverridingDecisionWithScores:(id)arg1 ignoredPolicies:(id)arg2 honoredPolicies:(id)arg3;	// IMP=0x0000000100066b5c
- (_Bool)testModeConstraintsApplyToActivity:(id)arg1;	// IMP=0x0000000100066660
- (_Bool)pausedParametersApplyToActivity:(id)arg1;	// IMP=0x0000000100065ea4
- (void)reportActivity:(id)arg1 isBlockedWithDecision:(long long)arg2;	// IMP=0x0000000100065764
- (void)updateiCPLTasksBlocked:(unsigned long long)arg1;	// IMP=0x000000010006548c
- (void)removeConstraint:(unsigned long long)arg1 forSchedulingPriority:(unsigned long long)arg2;	// IMP=0x00000001000653a8
- (void)addConstraint:(unsigned long long)arg1 forSchedulingPriority:(unsigned long long)arg2;	// IMP=0x00000001000652e4
- (id)getActivityRunningWithName:(id)arg1;	// IMP=0x0000000100065148
- (id)getActivityWithName:(id)arg1;	// IMP=0x00000001000650cc
- (id)getActivityWithUUID:(id)arg1;	// IMP=0x0000000100065050
- (id)activityMatchingPredicate:(id)arg1;	// IMP=0x0000000100064ee4
- (void)delayedStartActivities:(id)arg1;	// IMP=0x0000000100064ee0
- (void)runActivitiesWithDelayedStart:(id)arg1;	// IMP=0x0000000100064edc
- (void)activity:(id)arg1 runWithoutHonoringPolicies:(id)arg2;	// IMP=0x0000000100064dc0
- (void)activity:(id)arg1 blockedOnPolicies:(id)arg2;	// IMP=0x0000000100064ca4
- (void)cancelActivities:(id)arg1;	// IMP=0x0000000100064a84
- (void)suspendActivities:(id)arg1;	// IMP=0x0000000100063ce0
- (void)suspendActivity:(id)arg1;	// IMP=0x0000000100063c8c
- (void)deferActivities:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000639b4
- (void)warnBGTaskClientsForActivitiesAboutToExpire:(id)arg1;	// IMP=0x00000001000637fc
- (void)suspendPlugin:(id)arg1;	// IMP=0x0000000100063538
- (void)runApplicationLaunchActivities:(id)arg1;	// IMP=0x0000000100061eb0
- (void)runExtensionLaunchActivities:(id)arg1;	// IMP=0x00000001000618c0
- (id)assertionForActivity:(id)arg1 pid:(int)arg2;	// IMP=0x0000000100061464
- (void)launchApplication:(id)arg1 applicationURL:(id)arg2 additionalOptions:(id)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x0000000100061010
- (void)runLaunchTasks:(id)arg1 forApplication:(id)arg2 forApplicationURL:(id)arg3 onLaunch:(CDUnknownBlockType)arg4 onCompletion:(CDUnknownBlockType)arg5 onFailure:(CDUnknownBlockType)arg6;	// IMP=0x000000010005ebe0
- (void)clearRecentlyLaunchedApps;	// IMP=0x000000010005e75c
- (void)runActivitiesAndRemoveUnknown:(id)arg1;	// IMP=0x000000010005e1b4
- (void)runActivities:(id)arg1;	// IMP=0x000000010005d9bc
- (void)runLocalActivity:(id)arg1;	// IMP=0x000000010005d850
- (id)clientForActivity:(id)arg1;	// IMP=0x000000010005d634
- (void)allClientsDo:(CDUnknownBlockType)arg1;	// IMP=0x000000010005d4d0
- (void)removeClient:(id)arg1;	// IMP=0x000000010005d334
- (_Bool)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;	// IMP=0x000000010005d104
@property(readonly, copy) NSString *description;
- (id)allTimewiseEligibleNetworkTasksAllowingCell:(_Bool)arg1;	// IMP=0x000000010005ce28
- (id)allPendingSyncOnBackupTasks;	// IMP=0x000000010005ccb0
- (id)allPendingBackgroundTasks;	// IMP=0x000000010005cab0
- (id)allPendingPushLaunchTasks;	// IMP=0x000000010005c874
- (id)allPendingRestartTasks;	// IMP=0x000000010005c7ac
- (id)allPendingTasks;	// IMP=0x000000010005c758
- (unsigned long long)submittedTaskCount;	// IMP=0x000000010005c70c
- (void)start;	// IMP=0x000000010005c6fc
- (unsigned long long)requestCountForApplication:(id)arg1;	// IMP=0x000000010005c66c
- (void)removeLaunchRequest:(id)arg1;	// IMP=0x000000010005c430
- (_Bool)addLaunchRequest:(id)arg1;	// IMP=0x000000010005be60
- (void)delayLaunchesOfType:(id)arg1 forApps:(id)arg2;	// IMP=0x000000010005ba54
- (void)cancelAllBackgroundTasks;	// IMP=0x000000010005b81c
- (void)cancelContactTracingTasksForApps:(id)arg1;	// IMP=0x000000010005b5fc
- (void)cancelBackgroundTasksForApps:(id)arg1;	// IMP=0x000000010005b550
- (void)cancelAppRefreshTasksForApps:(id)arg1;	// IMP=0x000000010005b4bc
- (void)cancelPushLaunchTasksForApps:(id)arg1;	// IMP=0x000000010005b428
- (void)cancelLaunchesOfTypes:(id)arg1 forApps:(id)arg2;	// IMP=0x000000010005b15c
- (long long)additionalCapacityForActivity:(id)arg1 inGroupWithName:(id)arg2 shouldTryToSuspend:(_Bool)arg3;	// IMP=0x000000010005ac38
- (long long)currentLoadFromActivities:(id)arg1 inGroupWithName:(id)arg2;	// IMP=0x000000010005a8a0
- (long long)capacityFromGroupMax:(long long)arg1 forPriority:(unsigned long long)arg2;	// IMP=0x000000010005a868
- (void)loadTestingDefaults;	// IMP=0x000000010005a774
- (void)loadState;	// IMP=0x000000010005a198
- (void)removeDuplicateLaunchTasks:(id)arg1;	// IMP=0x0000000100059ca8
- (void)setupDatabaseMaintenance;	// IMP=0x0000000100059ba0
- (void)scheduleTimerOnBehalfOf:(id)arg1 between:(double)arg2 and:(double)arg3 waking:(_Bool)arg4;	// IMP=0x00000001000597cc
- (void)scheduleTimerForActivity:(id)arg1;	// IMP=0x0000000100059678
- (void)setupTimers;	// IMP=0x0000000100059580
- (void)solicitActivityResubmission;	// IMP=0x00000001000594ec
- (id)initAsAnonymous:(_Bool)arg1 withContext:(id)arg2;	// IMP=0x0000000100058620

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

