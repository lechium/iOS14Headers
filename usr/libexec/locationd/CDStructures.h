//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

@class CLBarometerCalibrationContextManager, CLOSTransaction, CLSilo;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct ALSData;

struct AML {
    basic_string_90719d97 _field1;
    _Bool _field2;
    unsigned int _field3;
    basic_string_90719d97 _field4;
};

struct ARSessionState;

struct Accel;

struct Accel800;

struct AccelBatch;

struct AccelGesture;

struct AccelGps;

struct AccelOscarEmu;

struct AccelerometerPace;

struct AccessPoint {
    struct CLMacAddress _field1;
    basic_string_90719d97 _field2;
    int _field3;
    int _field4;
    int _field5;
    double _field6;
    double _field7;
    _Bool _field8;
};

struct AccessoryAccel;

struct AccessoryAccelConfig;

struct AccessoryConfig;

struct AccessoryDeviceMotion;

struct AccessoryDeviceMotionConfig;

struct AccessoryGyro;

struct AccessoryGyroCachedBias;

struct AccessoryGyroConfig;

struct AccessoryGyroGYTT;

struct AccessoryProx;

struct AccessoryProxSensorDrop;

struct AccessoryProxTempComp;

struct AccessoryProximityConfig;

struct AccessoryWake;

struct AccessoryWakeDebug;

struct AirpodEvent;

struct AltitudeInfo {
    double altitude;
    double verticalAccuracy;
    double undulation;
    int undulationModel;
};

struct AnchorCorrection;

struct AssociatedAp {
    struct optional<CLWifiService_Type::AccessPoint> _field1;
    _Bool _field2;
    _Bool _field3;
};

struct AssociationState {
    struct optional<CLWifiService_Type::AccessPoint> _field1;
};

struct AudioAccessoryDeviceMotion;

struct AugmentedAction {
    struct AML _field1;
    struct S911 _field2;
    struct S911 _field3;
    struct EED2 _field4;
    struct EED2 _field5;
};

struct AuthorizationRequest {
    int _field1;
    CDUnknownBlockType _field2;
};

struct AuxiliaryDeviceMotion;

struct BAA {
    _Bool _field1;
    _Bool _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
};

struct BTConnection;

struct BTDiscoveryAgentImpl;

struct BTLocalDeviceImpl;

struct BTSessionImpl;

struct BarometricAltitudeDriftRateInfo {
    int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
};

struct BasebandSpeed {
    double _field1;
    double _field2;
    unsigned char _field3;
    unsigned char _field4;
    unsigned char _field5;
    unsigned char _field6;
};

struct BasicMutex {
    CDUnknownFunctionPointerType *_vptr$Mutex;
    struct MutexInfo *info;
};

struct Battery {
    double level;
    _Bool charged;
    _Bool connected;
    int chargerType;
    _Bool wasConnected;
    int chargerFamily;
};

struct BinaryData {
    CDUnknownFunctionPointerType *_field1;
    double _field2;
    unsigned short _field3;
};

struct BioMotionPose;

struct BleedToZeroCorrection;

struct BodyMetrics;

struct Bounds {
    float _field1;
    float _field2;
};

struct BoutMetrics {
    double _field1;
    double _field2;
    unsigned int _field3;
    unsigned int _field4;
    float _field5;
    _Bool _field6;
    float _field7;
    _Bool _field8;
    float _field9;
    _Bool _field10;
    float _field11;
    _Bool _field12;
    unsigned int _field13;
    unsigned int _field14;
    double _field15;
    int _field16;
    unsigned char _field17;
    unsigned int _field18;
    unsigned int _field19;
    unsigned int _field20;
    unsigned int _field21;
    unsigned int _field22;
    unsigned int _field23;
};

struct BraveHeartAccel;

struct BraveHeartDeviceMotion;

struct BraveHeartNatalieData;

struct BraveHeartVO2MaxInput;

struct BraveHeartWorkoutEvent;

struct BundleIdFeatures;

struct CDMASettings {
    _Bool _field1;
    int _field2;
};

struct CLATVAirplayDeviceInternal {
    time_point_406bde99 _field1;
    int _field2;
    struct uuid _field3;
    unsigned int _field4;
    int _field5;
};

struct CLAccelerometerPace {
    double calibrated;
    double lowerBound;
    double upperBound;
};

struct CLAccessoryAWD {
    struct CLDistanceCalc _field1;
    struct LocationAccessory _field2;
    struct pair<double, CLNmeaRMC> _field3;
    struct pair<double, CLNmeaGGA> _field4;
    CDStruct_5e97c62c _field5;
    struct CLAccessoryInfo _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    struct vector<DeviceLocationData, std::__1::allocator<DeviceLocationData>> _field14;
    _Bool _field15;
    _Bool _field16;
};

struct CLAccessoryAWDSubmissionTracker {
    struct CLAccessoryInfo _field1;
    double _field2;
};

struct CLAccessoryChinaShiftedDataProcessor {
    struct CLDistanceCalc _field1;
    struct unordered_map<CLLocationType, CLChinaShiftedDataStructure, std::__1::hash<CLLocationType>, std::__1::equal_to<CLLocationType>, std::__1::allocator<std::__1::pair<const CLLocationType, CLChinaShiftedDataStructure>>> _field2;
};

struct CLAccessoryHeadingCorrector {
    int _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct CLAccessoryInfo {
    basic_string_90719d97 _field1;
    basic_string_90719d97 _field2;
    basic_string_90719d97 _field3;
    basic_string_90719d97 _field4;
    basic_string_90719d97 _field5;
    basic_string_90719d97 _field6;
    _Bool _field7;
    _Bool _field8;
};

struct CLAccessoryLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    struct CLDaemonLocation _field14;
    struct CLDaemonLocationPrivate _field15;
    basic_string_90719d97 _field16;
    basic_string_90719d97 _field17;
    basic_string_90719d97 _field18;
    id _field19;
    struct CLAccessoryHeadingCorrector _field20;
    struct CLFileUpdate _field21;
    basic_string_90719d97 _field22;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field23;
    struct unique_ptr<CLTimeManager_Type::Client, std::__1::default_delete<CLTimeManager_Type::Client>> _field24;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field25;
    struct unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client>> _field26;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field27;
    id _field28;
    _Bool _field29;
    _Bool _field30;
    _Bool _field31;
    _Bool _field32;
    struct GgaRmcInfo _field33;
    _Bool _field34;
    id _field35;
    struct unique_ptr<CLGnssOdometer, std::__1::default_delete<CLGnssOdometer>> _field36;
    struct shared_ptr<CLMapGeometry> _field37;
    struct CLAccessoryChinaShiftedDataProcessor _field38;
    _Bool _field39;
    double _field40;
    double _field41;
    double _field42;
    int _field43;
    _Bool _field44;
    _Bool _field45;
    basic_string_90719d97 _field46;
    _Bool _field47;
    _Bool _field48;
    _Bool _field49;
    struct CLNmeaScreener _field50;
    struct CLAccessoryTypeBitSet _field51;
    struct CLAccessoryAWD _field52;
    struct CLAccessoryAWDSubmissionTracker _field53;
    struct CLAccessoryAWDSubmissionTracker _field54;
    struct CLAccessoryInfo _field55;
    int _field56;
    _Bool _field57;
    double _field58;
    int _field59;
    struct map<std::__1::basic_string<char>, double, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, double>>> _field60;
    double _field61;
    _Bool _field62;
    _Bool _field63;
};

struct CLAccessoryObserverListener {
    void *info;
    CDUnknownFunctionPointerType onConnected;
    CDUnknownFunctionPointerType onDisconnected;
    CDUnknownFunctionPointerType onNmeaReceived;
    CDUnknownFunctionPointerType onReferenceTime;
    CDUnknownFunctionPointerType onReferenceLocation;
    CDUnknownFunctionPointerType onEphemerisURL;
};

struct CLAccessoryTypeBitSet {
    struct bitset<6> _field1;
};

struct CLActivityAggregator<CLExerciseMinuteData, CLActivityDB::ClassCDataProtectionPolicy> {
    struct vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>> _field1;
    struct shared_ptr<CLActivityRecorderDb<CLExerciseMinuteData, CLActivityDB::ClassCDataProtectionPolicy>> _field2;
    _Bool _field3;
    _Bool _field4;
};

struct CLActivityAggregator<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>;

struct CLActivityAggregator<CLMobility::WalkingBout, CLActivityDB::ClassCDataProtectionPolicy>;

struct CLActivityAggregator<CLNatalieData, CLActivityDB::ClassCDataProtectionPolicy> {
    struct vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>> _field1;
    struct shared_ptr<CLActivityRecorderDb<CLNatalieData, CLActivityDB::ClassCDataProtectionPolicy>> _field2;
    _Bool _field3;
    _Bool _field4;
};

struct CLActivityAggregator<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>;

struct CLActivityAggregator<CLSedentaryAlarmData, CLActivityDB::ClassCDataProtectionPolicy> {
    struct vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>> _field1;
    struct shared_ptr<CLActivityRecorderDb<CLSedentaryAlarmData, CLActivityDB::ClassCDataProtectionPolicy>> _field2;
    _Bool _field3;
    _Bool _field4;
};

struct CLActivityAggregator<CLSignificantElevation, CLActivityDB::ClassCDataProtectionPolicy>;

struct CLActivityAggregator<CLSpringTrackerEntry, CLActivityDB::ClassCDataProtectionPolicy> {
    struct vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>> _field1;
    struct shared_ptr<CLActivityRecorderDb<CLSpringTrackerEntry, CLActivityDB::ClassCDataProtectionPolicy>> _field2;
    _Bool _field3;
    _Bool _field4;
};

struct CLActivityAggregator<CLStepCountEntry, CLActivityDB::ClassCDataProtectionPolicy> {
    struct vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>> _field1;
    struct shared_ptr<CLActivityRecorderDb<CLStepCountEntry, CLActivityDB::ClassCDataProtectionPolicy>> _field2;
    _Bool _field3;
    _Bool _field4;
};

struct CLActivityAggregator<MaxMets, CLActivityDB::ClassBDataProtectionPolicy> {
    struct vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>> _field1;
    struct shared_ptr<CLActivityRecorderDb<MaxMets, CLActivityDB::ClassBDataProtectionPolicy>> _field2;
    _Bool _field3;
    _Bool _field4;
};

struct CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>;

struct CLActivityAlarmConcentrator {
    struct BasicMutex _field1;
    struct set<CMActivityAlarmLocal *, CLActivityAlarmConcentrator::AlarmCompare, std::__1::allocator<CMActivityAlarmLocal *>> _field2[22];
};

struct CLActivityDbExportAdapter {
    _Bool _field1;
    id _field2;
    basic_string_90719d97 _field3;
    id _field4;
    basic_string_90719d97 _field5;
};

struct CLActivityLogger {
    id _field1;
    id _field2;
    struct unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client>> _field3;
    struct CLActivityLoggerWriter _field4;
    struct CLActivityDbExportAdapter _field5;
};

struct CLActivityLoggerPolicy;

struct CLActivityLoggerWriter {
    id _field1;
    id _field2;
    struct shared_ptr<CLActivityLoggerPolicy> _field3;
    struct BasicMutex _field4;
};

struct CLActivityRecorderDb<CLExerciseMinuteData, CLActivityDB::ClassCDataProtectionPolicy>;

struct CLActivityRecorderDb<CLNatalieData, CLActivityDB::ClassCDataProtectionPolicy>;

struct CLActivityRecorderDb<CLSedentaryAlarmData, CLActivityDB::ClassCDataProtectionPolicy>;

struct CLActivityRecorderDb<CLSpringTrackerEntry, CLActivityDB::ClassCDataProtectionPolicy>;

struct CLActivityRecorderDb<CLStepCountEntry, CLActivityDB::ClassCDataProtectionPolicy>;

struct CLActivityRecorderDb<MaxMets, CLActivityDB::ClassBDataProtectionPolicy>;

struct CLAggregateDictionary;

struct CLAggregationRule;

struct CLAmbientLightDecisionTree {
    int _field1;
    struct function<void (CLAmbientLightDecisionTreeOutput, double)> _field2;
    id _field3;
    id _field4;
    double _field5;
};

struct CLAppMonitor {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    id _field10;
    struct NotificationData {
        int _field1;
        basic_string_90719d97 _field2;
        _Bool _field3;
    } _field11;
    id _field12;
};

struct CLApplicationLifecycleManager {
    id _field1;
    struct unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client>> _field2;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field3;
    struct list<CLApplicationLifecycleManager::PendingLaunch, std::__1::allocator<CLApplicationLifecycleManager::PendingLaunch>> _field4;
    _Bool _field5;
    struct CLCallbackDropManager _field6;
    id _field7;
    id _field8;
};

struct CLAutopauseProvider {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
};

struct CLAvengerScannerAnalytics {
    unsigned int count_submission;
    unsigned int numSwitchToAgressiveScan;
    double lastRequestTime;
};

struct CLBTDialogDeviceInfo {
    basic_string_90719d97 _field1;
    basic_string_90719d97 _field2;
    int _field3;
};

struct CLBTHandsfreeWhitelist {
    CDUnknownFunctionPointerType *_field1;
    struct set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int>> _field2;
    struct set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> _field3;
    struct map<unsigned int, std::__1::map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>>>>> _field4;
    int _field5;
};

struct CLBTLEBeaconProvider {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
};

struct CLBTLEBeaconProviderMock {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    struct list<CLBTLEBeaconProvider_Type::ProximityScanEvent, std::__1::allocator<CLBTLEBeaconProvider_Type::ProximityScanEvent>> _field12;
    struct list<CLBTLEBeaconProvider_Type::ProximityZoneEvent, std::__1::allocator<CLBTLEBeaconProvider_Type::ProximityZoneEvent>> _field13;
    struct list<CLBTLEBeaconProviderMock::ScanRequest, std::__1::allocator<CLBTLEBeaconProviderMock::ScanRequest>> _field14;
    id _field15;
    struct map<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration, std::__1::less<CLBTLEBeaconProvider_Type::ProximityZone>, std::__1::allocator<std::__1::pair<const CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>>> _field16;
    struct __CFRunLoopSource *_field17;
};

struct CLBTLEFenceManager {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> _field6;
    struct map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
};

struct CLBTLERangeManager {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::Notification>>> _field6;
    struct map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
};

struct CLBackgroundWorkoutEscalationManager {
    CDUnknownFunctionPointerType *_field1;
    struct CLMotionDefaultsWrite<unsigned short> _field2;
    struct CLMotionDefaultsWrite<unsigned short> _field3;
    struct CLMotionDefaultsWrite<float> _field4;
    struct CLMotionDefaultsWrite<bool> _field5;
    struct WalkingEscalationRules _field6;
    struct WalkingEscalationRules _field7;
    _Bool _field8;
    struct unique_ptr<CLVO2MaxEstimationDeescalator, std::__1::default_delete<CLVO2MaxEstimationDeescalator>> _field9;
    double _field10;
    unsigned int _field11;
    unsigned int _field12;
    struct shared_ptr<CLNonInterruptingTimer> _field13;
};

struct CLBarometerCalibrationData;

struct CLBarometerCalibrationWiFiActiveScanBuffer {
    struct unordered_map<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>>> buffer;
};

struct CLBarometerCalibrationWifiData;

struct CLBarometricAltimeter;

struct CLBatchedLocations;

struct CLBeaconFenceAuthorizationManager {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> _field6;
    struct map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct unique_ptr<CLBTLEBeaconProvider_Type::Client, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client>> _field10;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field11;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field12;
    struct CLBeaconFenceDatabase _field13;
    int _field14;
    id _field15;
};

struct CLBeaconFenceDatabase {
    struct CLSqliteDatabase _field1;
};

struct CLBluetoothService {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    struct BTSessionImpl *_field11;
    struct BTDiscoveryAgentImpl *_field12;
    struct BTLocalDeviceImpl *_field13;
    struct map<std::__1::basic_string<char>, CLBluetoothService_Type::Device, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLBluetoothService_Type::Device>>> _field14;
    struct map<std::__1::basic_string<char>, CLBluetoothService_Type::Device, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLBluetoothService_Type::Device>>> _field15;
};

struct CLBodyMetrics {
    int gender;
    float heightM;
    float weightKG;
    float vo2max;
    float age;
    float hrmin;
    float hrmax;
    float hronset;
    float pal;
    int condition;
    float runVo2max;
    _Bool betaBlockerUse;
};

struct CLBundleLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    struct __CLClient *_field14;
    struct __CLClient *_field15;
    struct __CLClient *_field16;
    struct __CFString *_field17;
    struct __CFString *_field18;
    id _field19;
    _Bool _field20;
};

struct CLCMNotificationStateRecord {
    id _field1;
};

struct CLCachedLocationController {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    basic_string_90719d97 _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct CLServiceLocationProvider _field11;
    struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> _field12;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field13;
    struct unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client>> _field14;
    id _field15;
    int _field16;
    int _field17;
    double _field18;
    unsigned int _field19;
    struct CLCachedLocationScanMode _field20;
    id _field21;
    struct CLTransitTilePreloaderExternal _field22;
    struct CLTransitTilePreloader _field23;
    id _field24;
};

struct CLCachedLocationScanMode {
    int _field1;
    struct CLOldWifiScanner _field2;
    struct CLTransitWsbClient _field3;
};

struct CLCallbackDropManager {
    CDUnknownFunctionPointerType *_field1;
    struct shared_ptr<int> _field2;
};

struct CLCalorieActivityFilter {
    int _field1;
    struct CLMotionActivity _field2;
    struct list<CLMotionActivity, std::__1::allocator<CLMotionActivity>> _field3;
    unsigned char _field4[16];
};

struct CLCaloriePalEstimator {
    id _field1;
    id _field2;
    id _field3;
    struct CLBodyMetrics _field4;
    _Bool _field5;
    _Bool _field6;
    int _field7;
    id _field8;
    id _field9;
    id _field10;
    int _field11;
    vector_b67dfe3a _field12;
    int _field13;
    vector_b67dfe3a _field14;
    vector_b67dfe3a _field15;
};

struct CLCalorimetryDMFeatureGenerator {
    struct unique_ptr<CLCalorimetryDanceDMFeatureGenerator, std::__1::default_delete<CLCalorimetryDanceDMFeatureGenerator>> _field1;
    struct unique_ptr<CLCalorimetryRowingDMFeatureGenerator, std::__1::default_delete<CLCalorimetryRowingDMFeatureGenerator>> _field2;
    struct unique_ptr<CLCalorimetryFunctionalStrengthDMFeatureGenerator, std::__1::default_delete<CLCalorimetryFunctionalStrengthDMFeatureGenerator>> _field3;
    struct function<void (CLCalorimetryDMFeatureGenerator::Type, CLCalorimetryDMFeatureGenerator::Features)> _field4;
    struct CLGizmoOrientation _field5;
};

struct CLCalorimetryDMFeatureSourceController {
    struct function<void (bool)> _field1;
    struct CLNatalieExternallyActivatedSource<CLCalorimetryDanceDMFeatures> _field2;
    struct CLNatalieExternallyActivatedSource<CLCalorimetryFunctionalStrengthDMFeatures> _field3;
    struct CLNatalieExternallyActivatedSource<CLCalorimetryRowingDMFeatures> _field4;
    struct CLCalorimetryDMFeatureGenerator _field5;
};

struct CLCalorimetryDanceDMFeatureGenerator;

struct CLCalorimetryDanceDMFeatures;

struct CLCalorimetryFunctionalStrengthDMFeatureGenerator;

struct CLCalorimetryFunctionalStrengthDMFeatures;

struct CLCalorimetryRowingDMFeatureGenerator;

struct CLCalorimetryRowingDMFeatures;

struct CLCarrierSettings {
    CDUnknownFunctionPointerType *_field1;
    struct __CFDictionary *_field2;
    _Bool _field3;
    basic_string_90719d97 _field4;
    basic_string_90719d97 _field5;
    struct __CFString *_field6;
    struct __CFString *_field7;
    unsigned int _field8;
    unsigned int _field9;
    _Bool _field10;
    struct OtherPrefs _field11;
    struct OtherPrefs _field12;
    struct OtherPrefs _field13;
    CDUnknownFunctionPointerType *_field14;
    basic_string_90719d97 _field15;
    id _field16;
    id _field17;
    id _field18;
    struct map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLCarrierSettings_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLCarrierSettings_Type::NotificationData, char, char>::Notification>>> _field19;
    struct map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLCarrierSettings_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLCarrierSettings_Type::NotificationData, char, char>::ClientNotifications>>> _field20;
    int _field21;
    _Bool _field22;
    struct unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client>> _field23;
};

struct CLCatherineData {
    int _field1;
    int _field2;
    double _field3;
    double _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    int _field9;
    int _field10;
};

struct CLCatherineHealthKitData {
    double _field1;
    double _field2;
    double _field3;
    int _field4;
};

struct CLCatherineNotifier {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct CLBodyMetrics _field10;
    id _field11;
    _Bool _field12;
    struct unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client>> _field13;
};

struct CLCdmaCellEncryptedLocationDatabase;

struct CLCell {
    _Bool _field1;
    int _field2;
    int _field3;
    struct Cell _field4;
    struct ScdmaCell _field5;
    struct CdmaCell _field6;
    struct LteCell _field7;
};

struct CLCellEncryptedLocationDatabase;

struct CLCellLocationAWD {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    int _field10;
    int _field11;
    int _field12;
    int _field13;
    int _field14;
    int _field15;
    double _field16;
    double _field17;
};

struct CLCellTilesManager {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    CDUnknownFunctionPointerType *_field10;
    struct unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload>> _field11;
    _Bool _field12;
    _Bool _field13;
    double _field14;
    double _field15;
    double _field16;
    _Bool _field17;
    struct CLPersistentTimer *_field18;
    struct CLDaemonLocation _field19;
    double _field20;
    double _field21;
    int _field22;
    _Bool _field23;
    _Bool _field24;
    int _field25;
    int _field26;
    struct unique_ptr<CLICellTilesManagerExternal, std::__1::default_delete<CLICellTilesManagerExternal>> _field27;
    struct unique_ptr<CLTileDownloader, std::__1::default_delete<CLTileDownloader>> _field28;
    struct CLTileDownloaderExternal _field29;
    struct CLTileDownloadPolicy _field30;
    struct CLTilesSetCollection _field31;
    _Bool _field32;
};

struct CLCircularQueue<CLKappaRecordingGpsItem> {
    struct vector<CLKappaRecordingGpsItem, std::__1::allocator<CLKappaRecordingGpsItem>> _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
};

struct CLClientManager {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    CDUnknownFunctionPointerType *_field10;
    id _field11;
    id _field12;
    struct CLPersistentStore _field13;
    struct unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client>> _field14;
    struct unique_ptr<CLCarrierSettings_Type::Client, std::__1::default_delete<CLCarrierSettings_Type::Client>> _field15;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field16;
    struct unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client>> _field17;
    struct unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client>> _field18;
    struct unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client>> _field19;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field20;
    struct unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client>> _field21;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field22;
    _Bool _field23;
    double _field24;
    id _field25;
    struct map<CLDaemonClient *, __CFUserNotification *, std::__1::less<CLDaemonClient *>, std::__1::allocator<std::__1::pair<CLDaemonClient *const, __CFUserNotification *>>> _field26;
    struct unique_ptr<CLClientManager_Type::Name, std::__1::default_delete<CLClientManager_Type::Name>> _field27;
    _Bool _field28;
    struct __CFUserNotification *_field29;
    CDUnknownBlockType _field30;
    id _field31;
    double _field32;
    int _field33;
    id _field34;
    id _field35;
    struct shared_ptr<CLInUseLevelTracker> _field36;
    id _field37;
    struct unordered_map<std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo>>> _field38;
    id _field39;
    _Bool _field40;
    id _field41;
    struct map<std::__1::basic_string<char>, std::__1::unique_ptr<CLInUseLevelTracker::Assertion, std::__1::default_delete<CLInUseLevelTracker::Assertion>>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unique_ptr<CLInUseLevelTracker::Assertion, std::__1::default_delete<CLInUseLevelTracker::Assertion>>>>> _field42;
    id _field43;
    double _field44;
    id _field45;
    id _field46;
    struct multiset<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> _field47;
    struct set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> _field48;
    struct set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> _field49;
    struct set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> _field50;
    _Bool _field51;
    struct CLConnectionServer *_field52;
    struct map<CLConnection *, CLDaemonClient *, std::__1::less<CLConnection *>, std::__1::allocator<std::__1::pair<CLConnection *const, CLDaemonClient *>>> _field53;
    struct map<CLConnection *, CLDaemonGenericClient *, std::__1::less<CLConnection *>, std::__1::allocator<std::__1::pair<CLConnection *const, CLDaemonGenericClient *>>> _field54;
    struct CLConnection *_field55;
    int _field56;
    basic_string_90719d97 _field57;
    struct unordered_map<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>>>> _field58;
    struct shared_ptr<CLClientManager::PersistentSubscriptionPersistenceBackend> _field59;
    struct vector<CLClientManager::ImproveAccuracyNotification, std::__1::allocator<CLClientManager::ImproveAccuracyNotification>> _field60;
    _Bool _field61;
    _Bool _field62;
    _Bool _field63;
    _Bool _field64;
    int _field65;
    int _field66;
    struct unique_ptr<CLClientManager_Type::Name, std::__1::default_delete<CLClientManager_Type::Name>> _field67;
    id _field68;
    id _field69;
    _Bool _field70;
    id _field71;
    id _field72;
    struct CLDaemonLocation _field73;
    double _field74;
    struct unordered_map<std::__1::basic_string<char>, CLClientManager::ClientArrowRecord, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLClientManager::ClientArrowRecord>>> _field75;
    unsigned int _field76[9][3];
    id _field77;
    struct map<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider>>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider>>>>> _field78;
    id _field79;
    id _field80;
    id _field81;
    id _field82;
    id _field83;
};

struct CLClientServiceTypeMaskTuple {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct CLCoarseCellTilesManager {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    CDUnknownFunctionPointerType *_field10;
    struct unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload>> _field11;
    _Bool _field12;
    _Bool _field13;
    double _field14;
    _Bool _field15;
    int _field16;
    _Bool _field17;
    _Bool _field18;
    int _field19;
    int _field20;
    struct unique_ptr<CLICoarseCellTilesManagerExternal, std::__1::default_delete<CLICoarseCellTilesManagerExternal>> _field21;
    struct unique_ptr<CLTileDownloader, std::__1::default_delete<CLTileDownloader>> _field22;
    struct CLTileDownloaderExternal _field23;
    struct CLTileDownloadPolicy _field24;
    struct CLTilesSetCollection _field25;
    _Bool _field26;
    id _field27;
};

struct CLCoarseElevationChangeEntry {
    double _field1;
    unsigned int _field2;
    int _field3;
};

struct CLCoarseSignalEnvironmentDataManager;

struct CLCompanionNotifier {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    double _field13;
    id _field14;
    struct unique_ptr<CLMotionStateObserver_Type::Client, std::__1::default_delete<CLMotionStateObserver_Type::Client>> _field15;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field16;
    struct unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client>> _field17;
    id _field18;
};

struct CLCompanionNotifierCompanion {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    double _field13;
    id _field14;
    struct unique_ptr<CLMotionStateObserver_Type::Client, std::__1::default_delete<CLMotionStateObserver_Type::Client>> _field15;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field16;
    struct unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client>> _field17;
    id _field18;
    struct unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client>> _field19;
    _Bool _field20;
    _Bool _field21;
    long long _field22;
    double _field23;
    double _field24;
    _Bool _field25;
    id _field26;
    id _field27;
    _Bool _field28;
    id _field29;
    double _field30;
    struct CLMotionDefaultsWrite<double> _field31;
};

struct CLCompassDatabase {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct BasicMutex _field10;
    int _field11;
};

struct CLConfigAsset {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    long long _field3;
    long long _field4;
    id _field5;
    id _field6;
    id _field7;
    int _field8;
    basic_string_90719d97 _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    _Bool _field14;
    id _field15;
    id _field16;
    double _field17;
    double _field18;
    _Bool _field19;
    _Bool _field20;
    _Bool _field21;
    long long _field22;
    long long _field23;
    struct function<void (CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData)> _field24;
    id _field25;
    struct unordered_map<CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>, std::__1::hash<CLMobileAssetManager_Type::AssetDescriptor>, std::__1::equal_to<CLMobileAssetManager_Type::AssetDescriptor>, std::__1::allocator<std::__1::pair<const CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>>>> _field26;
};

struct CLConnection;

struct CLConnectionServer;

struct CLCoreTelephonyClient {
    id _field1;
    id _field2;
    id _field3;
    struct unordered_map<std::__1::basic_string<char>, std::__1::function<void ()>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::function<void ()>>>> _field4;
    struct unordered_set<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> _field5;
    id _field6;
    id _field7;
    _Bool _field8;
    struct unordered_map<CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>, std::__1::hash<CLTelephonyService_Type::SimInstance>, std::__1::equal_to<CLTelephonyService_Type::SimInstance>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>>>> _field9;
    struct unordered_map<CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>, std::__1::hash<CLTelephonyService_Type::BundleDescriptor>, std::__1::equal_to<CLTelephonyService_Type::BundleDescriptor>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>>>> _field10;
};

struct CLCorrectiveCompensatedLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    id _field14;
    struct unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client>> _field15;
    struct unique_ptr<CLSimulatedLocationProvider_Type::Client, std::__1::default_delete<CLSimulatedLocationProvider_Type::Client>> _field16;
    id _field17;
    id _field18;
    id _field19;
    double _field20;
    double _field21;
    _Bool _field22;
    id _field23;
    _Bool _field24;
    _Bool _field25;
    _Bool _field26;
    _Bool _field27;
    _Bool _field28;
    struct CLDelegatingCallbackDropManager _field29;
    struct CLDaemonLocation _field30;
};

struct CLDEMAltitudeFilter {
    CDUnknownFunctionPointerType *_field1;
    struct CLDistanceCalc _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    struct stEventHistoryData _field7;
    struct stObservationData _field8;
    struct stObservationData _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    _Bool _field15;
    _Bool _field16;
    double _field17;
    double _field18;
};

struct CLDEMTile {
    int _field1;
    unsigned long long _field2;
    char *_field3;
    char *_field4;
    _Bool _field5;
    basic_string_90719d97 _field6;
    struct CLDEMTileFileHeader _field7;
};

struct CLDEMTileFileHeader {
    unsigned char _field1[14];
    unsigned char _field2;
    unsigned char _field3;
    unsigned char _field4;
    unsigned char _field5;
    unsigned char _field6;
    unsigned char _field7[5];
    unsigned char _field8[2];
    unsigned char _field9;
    unsigned char _field10;
    unsigned int _field11;
    double _field12;
    float _field13;
    unsigned short _field14;
    unsigned short _field15;
    unsigned int _field16;
    unsigned int _field17;
    double _field18;
    double _field19;
    double _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    float _field25;
};

struct CLDaemonClient {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    struct CLClientManager *_field3;
    id _field4;
    id _field5;
    id _field6;
    struct Name _field7;
    _Bool _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    unsigned long long _field12;
    struct AuthorizationRequest _field13;
    _Bool _field14;
    _Bool _field15;
    id _field16;
    _Bool _field17;
    struct list<CLDaemonClient::MessageRef, std::__1::allocator<CLDaemonClient::MessageRef>> _field18;
    id _field19;
    unsigned long long _field20;
    struct map<std::__1::basic_string<char>, bool, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, bool>>> _field21;
    unsigned int _field22;
    _Bool _field23;
    int _field24;
    int _field25;
    _Bool _field26;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field27;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field28;
    struct unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client>> _field29;
    struct unique_ptr<CLPressureBias_Type::Client, std::__1::default_delete<CLPressureBias_Type::Client>> _field30;
    struct unique_ptr<CLPeerRangingNotifier_Type::Client, std::__1::default_delete<CLPeerRangingNotifier_Type::Client>> _field31;
    struct unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client>> _field32;
    id _field33;
    struct CLConnection *_field34;
    int _field35;
    _Bool _field36;
    _Bool _field37;
    struct unordered_map<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>>> _field38;
    struct unordered_map<std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>>>> _field39;
    _Bool _field40;
    _Bool _field41;
    _Bool _field42;
    _Bool _field43;
    void *_field44;
    id _field45;
    id _field46;
    int _field47;
    struct CLCallbackDropManager _field48;
};

struct CLDaemonLocation {
    int suitability;
    CDStruct_2c43369c coordinate;
    double horizontalAccuracy;
    double altitude;
    double verticalAccuracy;
    double speed;
    double speedAccuracy;
    double course;
    double courseAccuracy;
    double timestamp;
    int confidence;
    double lifespan;
    int type;
    CDStruct_2c43369c rawCoordinate;
    double rawCourse;
    int floor;
    unsigned int integrity;
    int referenceFrame;
    int rawReferenceFrame;
    int signalEnvironmentType;
};

struct CLDaemonLocationPrivate {
    double odometer;
    double deltaDistance;
    double deltaDistanceAccuracy;
    double timestampGps;
    double machtime;
    float horzUncSemiMaj;
    float horzUncSemiMin;
    float horzUncSemiMajAz;
    _Bool isFitnessMatch;
    int matchQuality;
    CDStruct_2c43369c matchCoordinate;
    double matchCourse;
    int matchFormOfWay;
    int matchRoadClass;
    _Bool matchShifted;
    struct {
        double rawUnmodifiedCourse;
        double rawUnmodifiedCourseUnc;
        _Bool isStatic;
        _Bool isMounted;
    } mapMatcherData;
    struct {
        double value;
        double std;
    } pressure;
    int undulationModel;
    float undulation;
    CDStruct_2c43369c specialCoordinate;
    double specialHorizontalAccuracy;
    double machContinuousTime;
    int originDevice;
    _Bool isMatcherPropagatedCoordinates;
    double slope;
    double maxAbsSlope;
    double groundAltitude;
    double groundAltitudeUncertainty;
    double smoothedGPSAltitude;
    double smoothedGPSAltitudeUncertainty;
    _Bool isSimulatedOrSpoofed;
    struct SatelliteReport satelliteReport;
    int gnssContent;
    struct AltitudeInfo rawAltitude;
    unsigned char estimatedPositionContextState;
    double estimatedPositionContextStateProbabilityIndoor;
    double estimatedPositionContextStateProbabilityOutdoor;
};

struct CLDaemonStatus {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    id _field10;
    unsigned int _field11;
    unsigned int _field12;
    struct IONotificationPort *_field13;
    struct __CFRunLoopSource *_field14;
    struct IONotificationPort *_field15;
    struct __CFRunLoopSource *_field16;
    struct __SCNetworkReachability *_field17;
    struct __SCDynamicStore *_field18;
    struct __CFRunLoopSource *_field19;
    _Bool _field20;
    struct IONotificationPort *_field21;
    unsigned int _field22;
    id _field23;
    struct set<long, std::__1::less<long>, std::__1::allocator<long>> _field24;
    id _field25;
    _Bool _field26;
    id _field27;
    id _field28;
    long long _field29;
    double _field30;
    int _field31;
    int _field32;
    int _field33;
    struct __SCPreferences *_field34;
    _Bool _field35;
};

struct CLDarwinNotifier {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    int _field10;
    int _field11;
    int _field12;
    int _field13;
    int _field14;
    int _field15;
    int _field16;
    int _field17;
    int _field18;
    int _field19;
    int _field20;
    int _field21;
};

struct CLDataProtectionManager {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    int _field10;
    id _field11;
};

struct CLDelegatingCallbackDropManager {
    CDUnknownFunctionPointerType *_field1;
    struct shared_ptr<int> _field2;
    id _field3;
};

struct CLDemTileAvailability {
    struct list<unsigned int, std::__1::allocator<unsigned int>> _field1;
    struct LastAvlLookup {
        _Bool _field1;
        unsigned int _field2;
        _Bool _field3;
    } _field2;
    basic_string_90719d97 _field3;
    _Bool _field4;
    basic_string_90719d97 _field5;
};

struct CLDigitalElevationModel {
    CDUnknownFunctionPointerType *_field1;
    struct CLDemTileAvailability _field2;
    struct BasicMutex _field3;
    struct CLFileUpdate _field4;
    id _field5;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field6;
    _Bool _field7;
    id _field8;
    struct MotionActivityAndTime _field9;
    basic_string_90719d97 _field10;
    basic_string_90719d97 _field11;
    struct TileNeededInfo _field12;
    _Bool _field13;
    struct TunnelBridgeAssistance _field14;
    int _field15;
    basic_string_90719d97 _field16;
    _Bool _field17;
    _Bool _field18;
    double _field19;
    double _field20;
    int _field21;
    _Bool _field22;
    _Bool _field23;
    struct CLDistanceCalc _field24;
    struct CLDEMAltitudeFilter _field25;
    struct CLDEMTile _field26;
};

struct CLDistanceCalc {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
};

struct CLDualModeKalmanFilter {
    CDUnknownFunctionPointerType *_field1;
    struct CLKalmanFilter _field2;
    struct CLKalmanFilter _field3;
    struct CLDistanceCalc _field4;
};

struct CLElevationChangeEntry {
    double _field1;
    double _field2;
    unsigned int _field3;
    unsigned int _field4;
    int _field5;
    double _field6;
    int _field7;
    int _field8;
    float _field9;
    unsigned char _field10;
    unsigned short _field11;
    float _field12;
};

struct CLElevationGradeEstimator {
    struct CLElevationChangeEntry _field1;
    double _field2;
    float _field3;
    _Bool _field4;
    double _field5;
    struct vector<float, std::__1::allocator<float>> _field6;
    struct deque<float, std::__1::allocator<float>> _field7;
    struct deque<float, std::__1::allocator<float>> _field8;
    struct deque<float, std::__1::allocator<float>> _field9;
};

struct CLElevationRecorderDb;

struct CLEmergencyAWD;

struct CLEmergencyEED2 {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    int _field3;
    id _field4;
    struct unordered_map<CLTelephonyService_Type::SimInstance, CLEmergencyActor::NetworkAndSimInfo, std::__1::hash<CLTelephonyService_Type::SimInstance>, std::__1::equal_to<CLTelephonyService_Type::SimInstance>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::SimInstance, CLEmergencyActor::NetworkAndSimInfo>>> *_field5;
    struct shared_ptr<CLEmergencyAWD> _field6;
    struct function<GNSS::DaemonLocation ()> _field7;
    int _field8;
    int _field9;
    basic_string_90719d97 _field10;
    _Bool _field11;
    double _field12;
    _Bool _field13;
    struct {
        unsigned int _field1;
        double _field2;
        double _field3;
        double _field4;
        double _field5;
        _Bool _field6;
        double _field7;
        double _field8;
        double _field9;
        double _field10;
        unsigned int _field11;
        int _field12;
        int _field13;
        int _field14;
        int _field15;
        int _field16;
        int _field17;
        int _field18;
        int _field19;
        double _field20;
        double _field21;
        int _field22;
        float _field23;
        float _field24;
        int _field25;
        _Bool _field26;
        _Bool _field27;
        int _field28;
        int _field29;
        int _field30;
        _Bool _field31;
        _Bool _field32;
        _Bool _field33;
        unsigned long long _field34;
        _Bool _field35;
        int _field36;
        unsigned int _field37;
        _Bool _field38;
        _Bool _field39;
        int _field40;
        int _field41;
        unsigned int _field42;
        _Bool _field43;
        unsigned int _field44;
        int _field45;
        int _field46;
        int _field47;
        int _field48;
        int _field49;
        int _field50;
        _Bool _field51;
        _Bool _field52;
        double _field53;
        double _field54;
        double _field55;
        double _field56;
        struct HELOAWDData _field57;
        double _field58;
        double _field59;
        double _field60;
        int _field61;
        _Bool _field62;
        int _field63;
        int _field64;
        int _field65;
        int _field66;
        basic_string_90719d97 _field67;
        basic_string_90719d97 _field68;
        unsigned int _field69;
        unsigned int _field70;
        _Bool _field71;
        _Bool _field72;
        _Bool _field73;
        _Bool _field74;
        double _field75;
        double _field76;
        double _field77;
        int _field78;
        int _field79;
        int _field80;
        unsigned int _field81;
        unsigned int _field82;
        _Bool _field83;
        _Bool _field84;
        _Bool _field85;
        _Bool _field86;
        _Bool _field87;
        unsigned int _field88;
    } _field14;
    struct Config {
        int _field1;
        _Bool _field2;
        _Bool _field3;
        _Bool _field4;
        _Bool _field5;
        struct unordered_map<CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig, std::__1::hash<CLTelephonyService_Type::SimInstance>, std::__1::equal_to<CLTelephonyService_Type::SimInstance>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig>>> _field6;
        struct unordered_map<CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig, std::__1::hash<CLTelephonyService_Type::SimInstance>, std::__1::equal_to<CLTelephonyService_Type::SimInstance>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig>>> _field7;
    } _field15;
    struct CLStateMachine<CLEmergencyEED2> _field16;
    id _field17;
    unsigned int _field18;
    _Bool _field19;
    _Bool _field20;
    _Bool _field21;
    struct __SecKey *_field22;
    struct __SecCertificate *_field23;
    struct __SecCertificate *_field24;
    double _field25;
    struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> _field26;
    struct CLServiceLocationProvider _field27;
    id _field28;
    id _field29;
    id _field30;
    id _field31;
    int _field32;
    _Bool _field33;
    int _field34;
    id _field35;
    _Bool _field36;
    id _field37;
    id _field38;
    struct map<std::__1::basic_string<char>, std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>>>> _field39;
    _Bool _field40;
    _Bool _field41;
    basic_string_90719d97 _field42;
    int _field43;
};

struct CLExerciseMinuteData {
    int _field1;
    double _field2;
    struct __CFString *_field3;
};

struct CLExerciseMinuteRecorderDb;

struct CLExtendedStepCountEntry {
    double startTime;
    struct CLStepCountEntry base;
    struct CLStepCountEntryAddition addition;
};

struct CLFallImpactStateTracker;

struct CLFallMetMinuteStats;

struct CLFallNotifier {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    int _field10;
    struct CLFallImpactStateTracker *_field11;
    id _field12;
    id _field13;
    id _field14;
    id _field15;
    id _field16;
    id _field17;
    id _field18;
    id _field19;
    id _field20;
    id _field21;
    id _field22;
    CDUnknownBlockType _field23;
    double _field24;
    id _field25;
    id _field26;
    struct CLPowerAssertion _field27;
    id _field28;
    id _field29;
    id _field30;
    id _field31;
    id _field32;
    id _field33;
    id _field34;
    struct CLBodyMetrics _field35;
    _Bool _field36;
    _Bool _field37;
    _Bool _field38;
    _Bool _field39;
    _Bool _field40;
    _Bool _field41;
    _Bool _field42;
    double _field43;
    double _field44;
    struct ImpactEvent _field45;
    struct ImpactEvent _field46;
    struct ImpactEvent _field47;
    struct FallThresholds {
        struct FallThresholds {
            float _field1;
            float _field2;
            float _field3;
            float _field4;
            float _field5;
            float _field6;
            float _field7;
            float _field8;
            float _field9;
            float _field10;
            int _field11;
            int _field12;
        } _field1;
    } _field48;
    unsigned long long _field49;
    unsigned long long _field50;
    unsigned long long _field51;
    unsigned long long _field52;
    struct CLFallWristState _field53;
    struct WristState {
        double _field1;
        double _field2;
        struct WristState {
            int _field1;
            int _field2;
            int _field3;
            unsigned long long _field4;
            _Bool _field5;
            _Bool _field6;
            _Bool _field7;
        } _field3;
    } _field54;
    struct Config {
        struct FallStatsConfig _field1;
        _Bool _field2;
    } _field55;
    id _field56;
    struct FallModel _field57;
    struct FallModel _field58;
    struct FallModel _field59;
    struct FallThresholds {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
        float _field5;
        float _field6;
        float _field7;
        float _field8;
        float _field9;
        float _field10;
        int _field11;
        int _field12;
    } _field60;
    double _field61;
    _Bool _field62;
    id _field63;
    id _field64;
    long long _field65;
    id _field66;
    struct unique_ptr<CLFallMetMinuteStats, std::__1::default_delete<CLFallMetMinuteStats>> _field67;
    struct CLMotionDefaultsWrite<double> _field68;
    struct CLMotionDefaultsWrite<double> _field69;
    _Bool _field70;
    _Bool _field71;
    _Bool _field72;
    struct unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client>> _field73;
    struct Dispatcher *_field74;
    struct Dispatcher *_field75;
    struct Dispatcher *_field76;
    struct Dispatcher *_field77;
    struct Dispatcher *_field78;
    struct Dispatcher *_field79;
    struct Dispatcher *_field80;
    struct Dispatcher *_field81;
    struct Dispatcher *_field82;
    struct Dispatcher *_field83;
    struct Dispatcher *_field84;
    struct Dispatcher *_field85;
    struct unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client>> _field86;
    struct unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client>> _field87;
    struct unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client>> _field88;
    struct unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client>> _field89;
    struct unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client>> _field90;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field91;
    struct unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client>> _field92;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field93;
};

struct CLFallWristState {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    double _field4;
    double _field5;
    int _field6;
    struct deque<WristStateInterval, std::__1::allocator<WristStateInterval>> _field7;
};

struct CLFenceAnalytics {
    unsigned long long _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    unsigned long long _field6;
    unsigned long long _field7;
    unsigned long long _field8;
    unsigned long long _field9;
    double _field10;
    unsigned long long _field11;
    unsigned long long _field12;
    unsigned long long _field13;
    _Bool _field14;
    _Bool _field15;
    _Bool _field16;
    _Bool _field17;
    _Bool _field18;
    _Bool _field19;
    _Bool _field20;
    _Bool _field21;
    _Bool _field22;
    _Bool _field23;
    unsigned long long _field24;
    unsigned long long _field25;
    unsigned long long _field26;
    unsigned long long _field27;
    unsigned long long _field28;
    unsigned long long _field29;
    unsigned long long _field30;
    unsigned long long _field31;
    unsigned long long _field32;
    unsigned long long _field33;
    unsigned long long _field34;
};

struct CLFenceAuthorizationManager {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct CLFenceDatabase *_field10;
    struct shared_ptr<CLWifiAccessPointLocationService> _field11;
    _Bool _field12;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field13;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field14;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field15;
    _Bool _field16;
    id _field17;
};

struct CLFenceDataDownloadManager {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client>> _field10;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field11;
    struct unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client>> _field12;
    struct shared_ptr<CLWifiAccessPointLocationService> _field13;
    struct CLPersistentTimer *_field14;
    struct list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence>> _field15;
    double _field16;
    _Bool _field17;
    _Bool _field18;
    struct Fence _field19;
    _Bool _field20;
};

struct CLFenceDatabase;

struct CLFenceManager {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> _field6;
    struct map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct CLFenceAuthorizationManager _field10;
    struct CLFenceMonitor _field11;
    struct CLFenceDataDownloadManager _field12;
    struct CLDistanceCalc _field13;
    _Bool _field14;
    struct CLPersistentTimer *_field15;
    double _field16;
    double _field17;
    struct CLMotionActivity _field18;
    struct map<CLFenceManager_Type::Fence, CLFenceManager::PendingFenceTransition, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceManager::PendingFenceTransition>>> _field19;
    struct map<CLFenceManager_Type::Fence, CLFenceManager::PendingFenceState, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceManager::PendingFenceState>>> _field20;
    struct map<std::__1::basic_string<char>, CLTokenBucket, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLTokenBucket>>> _field21;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field22;
    struct unique_ptr<CLFenceMonitor_Type::Client, std::__1::default_delete<CLFenceMonitor_Type::Client>> _field23;
    struct unique_ptr<CLFenceDataDownloadManager_Type::Client, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client>> _field24;
    struct unique_ptr<CLFenceAuthorizationManager_Type::Client, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client>> _field25;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field26;
    struct unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client>> _field27;
    id _field28;
    struct CLDelegatingCallbackDropManager _field29;
};

struct CLFenceMonitor {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> _field6;
    struct map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct vector<CLFenceMonitor::GpsSession, std::__1::allocator<CLFenceMonitor::GpsSession>> _field10;
    struct map<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>>> _field11;
    struct set<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence>> _field12;
    struct CLDaemonLocation _field13;
    struct CLDaemonLocation _field14;
    struct CLFenceMonitorCell _field15;
    struct CLFenceMonitorWifi _field16;
    int _field17;
    _Bool _field18;
    _Bool _field19;
    struct unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client>> _field20;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field21;
    struct unique_ptr<CLFenceMonitorCell_Type::Client, std::__1::default_delete<CLFenceMonitorCell_Type::Client>> _field22;
    struct unique_ptr<CLFenceMonitorWifi_Type::Client, std::__1::default_delete<CLFenceMonitorWifi_Type::Client>> _field23;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field24;
    struct unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client>> _field25;
    id _field26;
    id _field27;
    struct CLWifiServiceClient _field28;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field29;
    _Bool _field30;
    _Bool _field31;
    _Bool _field32;
    _Bool _field33;
    _Bool _field34;
    _Bool _field35;
    _Bool _field36;
    struct CLPersistentTimer *_field37;
    struct CLPersistentTimer *_field38;
    struct CLPersistentTimer *_field39;
    double _field40;
    double _field41;
    struct CLPersistentTimer *_field42;
    struct CLPowerAssertion _field43;
    _Bool _field44;
    _Bool _field45;
    _Bool _field46;
    double _field47;
    struct unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client>> _field48;
    double _field49;
    double _field50;
    double _field51;
    int _field52;
    int _field53;
    int _field54;
    double _field55;
    int _field56;
    int _field57;
    double _field58;
    double _field59;
    _Bool _field60;
    _Bool _field61;
    _Bool _field62;
    double _field63;
    double _field64;
    _Bool _field65;
    _Bool _field66;
    _Bool _field67;
    double _field68;
    double _field69;
    id _field70;
    _Bool _field71;
    double _field72;
    _Bool _field73;
    struct CLPersistentTimer *_field74;
    double _field75;
    double _field76;
    double _field77;
    double _field78;
    double _field79;
    double _field80;
    double _field81;
    double _field82;
    struct CLFenceAnalytics _field83;
    _Bool _field84;
    id _field85;
    struct CLDistanceCalc _field86;
    struct unique_ptr<CLFenceMonitorDatabase, std::__1::default_delete<CLFenceMonitorDatabase>> _field87;
    id _field88;
    id _field89;
};

struct CLFenceMonitorCell {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> _field6;
    struct map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct CLDistanceCalc _field10;
};

struct CLFenceMonitorDatabase;

struct CLFenceMonitorWifi {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> _field6;
    struct map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct map<CLFenceManager_Type::Fence, bool, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, bool>>> _field10;
    struct map<CLFenceManager_Type::Fence, int, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, int>>> _field11;
    int _field12;
    _Bool _field13;
    id _field14;
    struct CLWifiServiceClient _field15;
    id _field16;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field17;
    _Bool _field18;
    _Bool _field19;
    _Bool _field20;
    double _field21;
    struct CLPowerAssertion _field22;
    double _field23;
    unsigned int _field24;
    _Bool _field25;
    _Bool _field26;
    _Bool _field27;
    _Bool _field28;
    _Bool _field29;
    _Bool _field30;
    double _field31;
    double _field32;
    double _field33;
    double _field34;
    double _field35;
    double _field36;
    _Bool _field37;
    struct shared_ptr<CLWifiAccessPointLocationService> _field38;
    struct CLFenceMonitorWifiLogicExternal _field39;
    struct CLWifiScanAggregator _field40;
};

struct CLFenceMonitorWifiLogicExternal {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct CLFileDownload;

struct CLFileUpdate {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    id _field3;
    CDUnknownFunctionPointerType _field4;
    void *_field5;
    struct unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload>> _field6;
    id _field7;
    int _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    _Bool _field15;
    basic_string_90719d97 _field16;
    basic_string_90719d97 _field17;
    basic_string_90719d97 _field18;
    basic_string_90719d97 _field19;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field20;
    struct unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client>> _field21;
    _Bool _field22;
    _Bool _field23;
};

struct CLFilteredLocationController {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownFunctionPointerType *_field14;
    struct CLDistanceCalc _field15;
    struct unique_ptr<CLStreamingAwareLocationProvider_Type::Client, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client>> _field16;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field17;
    struct CLLastConfidentLocation _field18;
    id _field19;
    double _field20;
    double _field21;
    struct map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool>>> _field22;
    struct map<int, CLDaemonLocation, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLDaemonLocation>>> _field23;
    struct {
        double _field1;
        struct __CFDate *_field2;
    } _field24;
};

struct CLFitnessControllerInterface;

struct CLFitnessMachineNotifier {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct _CLFitnessMachineData _field10;
    struct unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client>> _field11;
};

struct CLFitnessTrackingNotifier {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    int _field11;
    _Bool _field12;
};

struct CLFloorTransitionDetector {
    struct deque<RelativeAltitude, std::__1::allocator<RelativeAltitude>> fBuffer;
    _Bool fInTransition;
    _Bool fIsBufferFull;
    double fLastFloorTransitionTime;
};

struct CLGeomagneticModelProvider {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
};

struct CLGizmoOrientation {
    int fWrist;
    int fCrown;
};

struct CLGnssAvailabilityPredictor;

struct CLGnssOdometer;

struct CLGnssUndulation;

struct CLGpsAssistant {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct CLTimeOffsetFilter _field10;
    _Bool _field11;
    struct CLTimeOffsetFilter _field12;
    struct set<CLMapMatchingEngine *, std::__1::less<CLMapMatchingEngine *>, std::__1::allocator<CLMapMatchingEngine *>> _field13;
};

struct CLGyroCalibrationDatabase {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
};

struct CLHRToFHRConverter {
    struct Bounds _field1;
};

struct CLHarvestController;

struct CLHarvestControllerExternal {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    CDUnknownFunctionPointerType *_field3;
    id _field4;
    id _field5;
    struct CLHarvestController *_field6;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field7;
    struct set<CLDataProtectionManager_Type::Notification, std::__1::less<CLDataProtectionManager_Type::Notification>, std::__1::allocator<CLDataProtectionManager_Type::Notification>> _field8;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field9;
    struct set<CLLocationProvider_Type::Notification, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<CLLocationProvider_Type::Notification>> _field10;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field11;
    struct set<CLClientManager_Type::Notification, std::__1::less<CLClientManager_Type::Notification>, std::__1::allocator<CLClientManager_Type::Notification>> _field12;
    struct unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client>> _field13;
    struct unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client>> _field14;
    struct set<CLMotionState_Type::Notification, std::__1::less<CLMotionState_Type::Notification>, std::__1::allocator<CLMotionState_Type::Notification>> _field15;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field16;
    struct set<CLDaemonStatus_Type::Notification, std::__1::less<CLDaemonStatus_Type::Notification>, std::__1::allocator<CLDaemonStatus_Type::Notification>> _field17;
    struct unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client>> _field18;
    set_7b7d70f4 _field19;
    struct CLHarvestPassKitRegistrar _field20;
    struct unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient>> _field21;
    _Bool _field22;
    _Bool _field23;
    id _field24;
    id _field25;
    id _field26;
};

struct CLHarvestPassKitRegistrar {
    struct set<CLHarvestPassKitNotificationRegistrant *, std::__1::less<CLHarvestPassKitNotificationRegistrant *>, std::__1::allocator<CLHarvestPassKitNotificationRegistrant *>> _field1;
    struct set<CLHarvestPassKitNotificationRegistrant *, std::__1::less<CLHarvestPassKitNotificationRegistrant *>, std::__1::allocator<CLHarvestPassKitNotificationRegistrant *>> _field2;
};

struct CLHarvestSettings;

struct CLHealthAssessmentNotifier {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    struct ParkinsonsResult _field11;
    struct shared_ptr<CLParkinsonsResultRecorderDb> _field12;
    struct unique_ptr<CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>, std::__1::default_delete<CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>>> _field13;
    struct deque<CLHealthAssessmentNotifier::MonitoringPeriod, std::__1::allocator<CLHealthAssessmentNotifier::MonitoringPeriod>> _field14;
    struct deque<CLHealthAssessmentNotifier::WristStatus, std::__1::allocator<CLHealthAssessmentNotifier::WristStatus>> _field15;
    struct unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client>> _field16;
};

struct CLHeartRateDriftEstimator {
    double _field1;
    struct CLHRToFHRConverter _field2;
    struct deque<CLHeartRateDriftEstimator::Sample, std::__1::allocator<CLHeartRateDriftEstimator::Sample>> _field3;
    double _field4;
};

struct CLHighResolutionSignalEnvironmentDataManager;

struct CLHomeKitProvider {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    id _field10;
    id _field11;
    struct vector<CLHomeKitProvider_Type::HomeKitDevice, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice>> _field12;
    id _field13;
    id _field14;
};

struct CLHrseTileAvailability {
    struct list<std::__1::pair<unsigned int, bool>, std::__1::allocator<std::__1::pair<unsigned int, bool>>> _field1;
    struct LastAvlLookup {
        unsigned int _field1;
        _Bool _field2;
        _Bool _field3;
    } _field2;
    basic_string_90719d97 _field3;
    basic_string_90719d97 _field4;
    _Bool _field5;
};

struct CLICachedLookupWifiAccessPointLocationService;

struct CLICellTilesManagerExternal;

struct CLICoarseCellTilesManagerExternal;

struct CLINetworkLocationProviderExternal;

struct CLITileDownloadSchedulingClientDelegate {
    CDUnknownFunctionPointerType *_field1;
};

struct CLITileSyncManager;

struct CLITilesManager;

struct CLITilesManagerExternal;

struct CLITransitTilePreloaderExternal;

struct CLIWifiLocationChannelSelectionService;

struct CLIWifiTilesManagerExternal;

struct CLInUseLevelTracker;

struct CLIndoorFitnessModeStateMachine {
    int _field1;
    struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000>>> _field2;
    struct DebounceParameters _field3;
};

struct CLIndoorLogic;

struct CLIndoorPrefetchLocationOfInterest {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    struct optional<std::__1::chrono::time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000>>>> _field5;
    struct optional<std::__1::chrono::time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000>>>> _field6;
    int _field7;
    _Bool _field8;
};

struct CLIntegrityMonitor {
    struct CLDistanceCalc _field1;
    struct MotionInfo _field2;
    struct MotionInfo _field3;
    struct deque<CLIntegrityMonitor::MotionInfo, std::__1::allocator<CLIntegrityMonitor::MotionInfo>> _field4;
    struct deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation>> _field5;
    struct deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation>> _field6;
    struct deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation>> _field7;
    struct IM_AllSources _field8;
};

struct CLK2Detector {
    struct vector<float, std::__1::allocator<float>> fBufPressureRaw;
    struct vector<float, std::__1::allocator<float>> fBufPressureError;
    struct vector<float, std::__1::allocator<float>> fBufTemperatureRaw;
    struct vector<std::__1::vector<float, std::__1::allocator<float>>, std::__1::allocator<std::__1::vector<float, std::__1::allocator<float>>>> fFeatures;
    int fCurrentCount;
    float fMinTemperature;
    float fMaxTemperature;
    float fMinPressure;
    float fMaxPressure;
};

struct CLKalmanFilter {
    CDUnknownFunctionPointerType *_field1;
    struct KalmanParameters _field2;
    int _field3;
    int _field4;
    struct KalmanTuningInfo _field5;
    struct KalmanTuningInfo _field6;
    struct KalmanTuningInfo _field7;
    struct KalmanTuningInfo _field8;
    _Bool _field9;
    _Bool _field10;
    struct CLDistanceCalc _field11;
};

struct CLKappaNotifier {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct Transition *_field10;
    unsigned long long _field11;
    unsigned char _field12;
    unsigned char _field13;
    CDUnknownFunctionPointerType *_field14;
    int _field15;
    id _field16;
    id _field17;
    id _field18;
    struct TriggerConfig _field19;
    _Bool _field20;
    _Bool _field21;
    id _field22;
    _Bool _field23;
    _Bool _field24;
    _Bool _field25;
    unsigned int _field26;
    struct Dispatcher *_field27;
    struct unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client>> _field28;
    _Bool _field29;
    struct CLServiceLocationProvider _field30;
    struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> _field31;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field32;
    id _field33;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field34;
    _Bool _field35;
    _Bool _field36;
    id _field37;
    int _field38;
    struct CLCircularQueue<CLKappaRecordingGpsItem> _field39;
    unsigned int _field40;
    unsigned int _field41;
    _Bool _field42;
    _Bool _field43;
    _Bool _field44;
    struct KappaConfig _field45;
    _Bool _field46;
    id _field47;
    id _field48;
    id _field49;
    id _field50;
    id _field51;
    double _field52;
    double _field53;
    double _field54;
    struct list<NSString *, std::__1::allocator<NSString *>> _field55;
    struct list<NSMutableDictionary *, std::__1::allocator<NSMutableDictionary *>> _field56;
};

struct CLKappaRecordingGpsItem {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
};

struct CLKappaServerClient {
    CDUnknownFunctionPointerType *_field1;
};

struct CLLastConfidentLocation {
    struct unique_ptr<CLCachedLocationController_Type::Client, std::__1::default_delete<CLCachedLocationController_Type::Client>> _field1;
    id _field2;
    struct INotifier *_field3;
    _Bool _field4;
    struct CLDaemonLocation _field5;
    unsigned int _field6;
};

struct CLLastFix {
    struct CLDaemonLocation _field1;
    struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000>>> _field2;
    struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000>>> _field3;
};

struct CLLingerRequest {
    struct Client *_field1;
};

struct CLLocationAwarenessProvider {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    double _field10;
    double _field11;
    struct MonitoringParameters _field12;
    _Bool _field13;
    _Bool _field14;
    double _field15;
    double _field16;
    double _field17;
    double _field18;
    struct CLPersistentTimer _field19;
    _Bool _field20;
    _Bool _field21;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field22;
    struct unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client>> _field23;
    struct unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client>> _field24;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field25;
    _Bool _field26;
    _Bool _field27;
    struct unique_ptr<CLPowerAssertion, std::__1::default_delete<CLPowerAssertion>> _field28;
    id _field29;
    int _field30;
    id _field31;
    id _field32;
};

struct CLLocationController {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    struct CLDistanceCalc _field14;
    char _field15;
    char _field16;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field17;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field18;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field19;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field20;
    struct unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client>> _field21;
    struct unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client>> _field22;
    _Bool _field23;
    double _field24;
    int _field25;
    int _field26;
    struct map<CLLocationController::LocationProvider, CLLocationController::ProviderClient, std::__1::less<CLLocationController::LocationProvider>, std::__1::allocator<std::__1::pair<const CLLocationController::LocationProvider, CLLocationController::ProviderClient>>> _field27;
    struct map<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>>, std::__1::less<CLLocationController::LocationProvider>, std::__1::allocator<std::__1::pair<const CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>>>>> _field28;
    struct CLLocationFilterController _field29;
    int _field30;
    int _field31;
    int _field32;
    int _field33;
    int _field34;
    int _field35;
    int _field36;
    id _field37;
    id _field38;
    id _field39;
    _Bool _field40;
    _Bool _field41;
    _Bool _field42;
    _Bool _field43;
    _Bool _field44;
    _Bool _field45;
    _Bool _field46;
    _Bool _field47;
    _Bool _field48;
    _Bool _field49;
    int _field50;
    double _field51;
    struct __CFRunLoopSource *_field52;
    struct __CFRunLoopSource *_field53;
    _Bool _field54;
    _Bool _field55;
    _Bool _field56;
    struct unique_ptr<CLGnssAvailabilityPredictor, std::__1::default_delete<CLGnssAvailabilityPredictor>> _field57;
    struct optional<CLGnssAvailabilityPredictor::Output> _field58;
    id _field59;
    struct StateTransition _field60[11];
    double _field61;
    struct PropagationDataHistory _field62;
    id _field63;
};

struct CLLocationCoordinate2D {
    double latitude;
    double longitude;
};

struct CLLocationFilterController {
    struct CLIntegrityMonitor _field1;
    id _field2;
    struct CLDualModeKalmanFilter _field3;
    struct CLDaemonLocation _field4;
    struct CLMapMatchingEngine *_field5;
    struct unique_ptr<CLOutdoorMatchingEngine, std::__1::default_delete<CLOutdoorMatchingEngine>> _field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
    _Bool _field10;
    struct CLVehicleSpeedFilter _field11;
    struct CLDaemonLocation _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
    double _field17;
    _Bool _field18;
    _Bool _field19;
    int _field20;
    _Bool _field21;
    id _field22;
    _Bool _field23;
    struct unique_ptr<CLBarometricAltimeter, std::__1::default_delete<CLBarometricAltimeter>> _field24;
    _Bool _field25;
    struct CLMapMatcherNetworkUsage _field26;
    struct unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client>> _field27;
    struct unique_ptr<CLSignalEnvironmentProvider_Type::Client, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client>> _field28;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field29;
    struct unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client>> _field30;
    id _field31;
    struct unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client>> _field32;
    struct unique_ptr<CLVisionController, std::__1::default_delete<CLVisionController>> _field33;
    struct CLMapsRouteHintData _field34;
    _Bool _field35;
};

struct CLLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
};

struct CLLteCellEncryptedLocationDatabase;

struct CLMacAddress {
    unsigned long long _field1;
};

struct CLMapGeometry;

struct CLMapMatcherNetworkUsage {
    int _field1;
    int _field2;
    int _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
    int _field8;
};

struct CLMapMatchingEngine;

struct CLMapsRouteHintData {
    int _field1;
    int _field2;
    struct vector<CLMapsRouteHint, std::__1::allocator<CLMapsRouteHint>> _field3;
    double _field4;
    double _field5;
};

struct CLMarketRegion;

struct CLMaxMetsProcessingRecorderDb;

struct CLMaxMetsRecorderDb;

struct CLMedianFilter<double> {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    struct deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long>>> _field3;
    struct multiset<double, std::__1::less<double>, std::__1::allocator<double>> _field4;
};

struct CLMedianFilter<float> {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    struct deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long>>> _field3;
    struct multiset<float, std::__1::less<float>, std::__1::allocator<float>> _field4;
};

struct CLMicroLocationBackgroundActivities;

struct CLMicroLocationConfigurationTable;

struct CLMicroLocationDatabase {
    basic_string_90719d97 _field1;
    struct SqliteProperties _field2;
    struct CLSqliteDatabase _field3;
    struct unique_ptr<CLMicroLocationConfigurationTable, std::__1::default_delete<CLMicroLocationConfigurationTable>> _field4;
    struct unique_ptr<CLMicroLocationMeasurementTable, std::__1::default_delete<CLMicroLocationMeasurementTable>> _field5;
    struct unique_ptr<CLMicroLocationModelTable, std::__1::default_delete<CLMicroLocationModelTable>> _field6;
    struct unique_ptr<CLMicroLocationRecordingEventsTable, std::__1::default_delete<CLMicroLocationRecordingEventsTable>> _field7;
};

struct CLMicroLocationLocalizer {
    struct ILocalizerDelegate *_field1;
    struct vector<CLMicroLocationLocalizer::ModelAndIds, std::__1::allocator<CLMicroLocationLocalizer::ModelAndIds>> _field2;
    struct unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement>> _field3;
    struct CLMicroLocationDatabase *_field4;
};

struct CLMicroLocationLogic {
    CDUnknownFunctionPointerType *_field1;
    struct State _field2;
    struct CLMicroLocationDatabase *_field3;
    struct CLMicroLocationLocalizer _field4;
    struct CLMicroLocationRecorder _field5;
    struct CLMicroLocationScanBuffer _field6;
    struct ILogicDelegate *_field7;
};

struct CLMicroLocationMeasurementTable;

struct CLMicroLocationModelTable;

struct CLMicroLocationNotifier {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    CDUnknownFunctionPointerType *_field10;
    CDUnknownFunctionPointerType *_field11;
    CDUnknownFunctionPointerType *_field12;
    CDUnknownFunctionPointerType *_field13;
    struct unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client>> _field14;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field15;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field16;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field17;
    struct unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client>> _field18;
    struct unique_ptr<CLHomeKitProvider_Type::Client, std::__1::default_delete<CLHomeKitProvider_Type::Client>> _field19;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field20;
    struct unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client>> _field21;
    id _field22;
    id _field23;
    id _field24;
    id _field25;
    id _field26;
    struct unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient>> _field27;
    id _field28;
    struct CLMicroLocationDatabase _field29;
    struct CLMicroLocationLogic _field30;
    struct unique_ptr<CLMicroLocationBackgroundActivities, std::__1::default_delete<CLMicroLocationBackgroundActivities>> _field31;
    id _field32;
    struct unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner>> _field33;
    struct unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner>> _field34;
    struct CLPowerAssertion _field35;
    int _field36;
    int _field37;
    double _field38;
    double _field39;
    struct set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> _field40;
    struct optional<std::__1::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1>>>> _field41;
    CDUnknownBlockType _field42;
};

struct CLMicroLocationRecorder {
    struct unique_ptr<CLMicroLocationRecorder::RecordingTransaction, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction>> _field1;
    struct CLMicroLocationDatabase *_field2;
};

struct CLMicroLocationRecordingEventsTable;

struct CLMicroLocationScanBuffer {
    vector_94cb9693 _field1;
    time_point_406bde99 _field2;
    struct duration<long double, std::__1::ratio<1, 1>> _field3;
};

struct CLMicroLocationWiFiChannelHistogram;

struct CLMicroLocationWifiScanStrategy;

struct CLMobileAssetManager {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    id _field10;
    struct CLConfigAsset _field11;
};

struct CLMonitorGps;

struct CLMonitorGpsExternal {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client>> _field3;
    struct unique_ptr<CLAccessoryLocationProvider_Type::Client, std::__1::default_delete<CLAccessoryLocationProvider_Type::Client>> _field4;
    id _field5;
    struct CLMonitorGps *_field6;
};

struct CLMotionActivity {
    int type;
    int confidence;
    int mountedState;
    int mountedConfidence;
    _Bool isStanding;
    float tilt;
    double timestamp;
    _Bool isVehicleConnected;
    int exitState;
    double estExitTime;
    double startTime;
    int rawType;
    int rawConfidence;
    struct {
        unsigned int motionHint:1;
        unsigned int gpsHint:1;
        unsigned int basebandHint:1;
        unsigned int wifiHint:1;
        unsigned int btHint:1;
    } vehicularFlags;
    int vehicularConfidence;
    float drivingStowedLikelihoodSum;
    float drivingArmLikelihoodSum;
    float ssLikelihoodSum;
    int workoutDetectionType;
    double workoutDetectionTime;
    unsigned long long workoutEscalationTime;
};

struct CLMotionAlarmDatabase;

struct CLMotionAlarmNotifier {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    struct unique_ptr<CLMotionAlarmDatabase, std::__1::default_delete<CLMotionAlarmDatabase>> _field12;
    id _field13;
    id _field14;
    id _field15;
    id _field16;
    struct map<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer>>, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer>>>>> _field17;
    struct unique_ptr<CLPowerAssertion, std::__1::default_delete<CLPowerAssertion>> _field18;
    struct unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client>> _field19;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field20;
    struct unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client>> _field21;
};

struct CLMotionAlarmSubscription {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    id _field3;
    struct Name _field4;
    struct Delegate *_field5;
    _Bool _field6;
    _Bool _field7;
    id _field8;
    id _field9;
};

struct CLMotionDefaultsWrite<bool> {
    _Bool _field1;
    _Bool _field2;
};

struct CLMotionDefaultsWrite<double> {
    _Bool _field1;
    double _field2;
};

struct CLMotionDefaultsWrite<float> {
    _Bool _field1;
    float _field2;
};

struct CLMotionDefaultsWrite<int> {
    _Bool _field1;
    int _field2;
};

struct CLMotionDefaultsWrite<unsigned int> {
    _Bool _field1;
    unsigned int _field2;
};

struct CLMotionDefaultsWrite<unsigned short> {
    _Bool _field1;
    unsigned short _field2;
};

struct CLMotionHintLogger {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field11;
    struct unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client>> _field12;
    struct unique_ptr<CLMotionNotifier::Dispatcher, std::__1::default_delete<CLMotionNotifier::Dispatcher>> _field13;
    struct unique_ptr<CLMotionNotifier::Dispatcher, std::__1::default_delete<CLMotionNotifier::Dispatcher>> _field14;
    struct unique_ptr<CLMotionNotifier::Dispatcher, std::__1::default_delete<CLMotionNotifier::Dispatcher>> _field15;
    struct shared_ptr<CLIoHidInterface::Device> _field16;
};

struct CLMotionLogger {
    id _field1;
    struct CLPowerAssertion _field2;
    struct Dispatcher *_field3;
    struct Dispatcher *_field4;
    struct Dispatcher *_field5;
    struct Dispatcher *_field6;
    struct Dispatcher *_field7;
    struct Dispatcher *_field8;
    struct Dispatcher *_field9;
    struct Dispatcher *_field10;
    struct Dispatcher *_field11;
    struct Dispatcher *_field12;
    struct Dispatcher *_field13;
    struct Dispatcher *_field14;
    struct Dispatcher *_field15;
    struct Dispatcher *_field16;
    struct Dispatcher *_field17;
    struct Dispatcher *_field18;
    struct Dispatcher *_field19;
    struct unique_ptr<CLMotionNotifier::Dispatcher, std::__1::default_delete<CLMotionNotifier::Dispatcher>> _field20;
    struct Dispatcher *_field21;
    struct Dispatcher *_field22;
    struct unique_ptr<CLMotionNotifier::SiloDispatcher<CLMobility::SPUGaitMetrics>, std::__1::default_delete<CLMotionNotifier::SiloDispatcher<CLMobility::SPUGaitMetrics>>> _field23;
    struct Dispatcher *_field24;
    struct Dispatcher *_field25;
    struct Dispatcher *_field26;
    struct Dispatcher *_field27;
    struct CLBodyMetrics _field28;
    id _field29;
    struct CLGizmoOrientation _field30;
    CDStruct_7660b417 _field31;
    struct unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client>> _field32;
    struct unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client>> _field33;
    struct unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client>> _field34;
    struct unique_ptr<CLVehicleConnectionNotifier_Type::Client, std::__1::default_delete<CLVehicleConnectionNotifier_Type::Client>> _field35;
    struct CLServiceLocationProvider _field36;
    struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> _field37;
    struct unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client>> _field38;
    struct unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client>> _field39;
    struct unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client>> _field40;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field41;
    struct unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client>> _field42;
    struct unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client>> _field43;
    struct unique_ptr<CLSignalEnvironmentProvider_Type::Client, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client>> _field44;
    struct unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient>> _field45;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field46;
    struct unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client>> _field47;
    struct Settings {
        struct CLMotionDefaultsWrite<bool> _field1;
        struct CLMotionDefaultsWrite<bool> _field2;
        struct CLMotionDefaultsWrite<bool> _field3;
        struct CLMotionDefaultsWrite<bool> _field4;
        struct CLMotionDefaultsWrite<double> _field5;
        struct CLMotionDefaultsWrite<double> _field6;
        struct CLMotionDefaultsWrite<double> _field7;
        struct CLMotionDefaultsWrite<double> _field8;
        struct CLMotionDefaultsWrite<double> _field9;
        struct CLMotionDefaultsWrite<double> _field10;
        struct CLMotionDefaultsWrite<unsigned int> _field11;
        struct CLMotionDefaultsWrite<bool> _field12;
        struct CLMotionDefaultsWrite<double> _field13;
        struct CLMotionDefaultsWrite<unsigned int> _field14;
        struct CLMotionDefaultsWrite<double> _field15;
        struct CLMotionDefaultsWrite<unsigned int> _field16;
        struct CLMotionDefaultsWrite<double> _field17;
        struct CLMotionDefaultsWrite<unsigned int> _field18;
        struct CLMotionDefaultsWrite<bool> _field19;
        struct CLMotionDefaultsWrite<int> _field20;
        struct CLMotionDefaultsWrite<bool> _field21;
        struct CLMotionDefaultsWrite<bool> _field22;
        struct CLMotionDefaultsWrite<bool> _field23;
        struct CLMotionDefaultsWrite<bool> _field24;
        struct CLMotionDefaultsWrite<bool> _field25;
        struct CLMotionDefaultsWrite<int> _field26;
        struct CLMotionDefaultsWrite<bool> _field27;
        struct CLMotionDefaultsWrite<bool> _field28;
        struct CLMotionDefaultsWrite<bool> _field29;
        struct CLMotionDefaultsWrite<bool> _field30;
        struct CLMotionDefaultsWrite<bool> _field31;
        struct CLMotionDefaultsWrite<bool> _field32;
        struct CLMotionDefaultsWrite<bool> _field33;
        struct CLMotionDefaultsWrite<bool> _field34;
        struct CLMotionDefaultsWrite<bool> _field35;
        struct CLMotionDefaultsWrite<bool> _field36;
        struct CLMotionDefaultsWrite<bool> _field37;
        struct CLMotionDefaultsWrite<bool> _field38;
        struct CLMotionDefaultsWrite<double> _field39;
        struct CLMotionDefaultsWrite<bool> _field40;
        struct CLMotionDefaultsWrite<bool> _field41;
        struct CLMotionDefaultsWrite<bool> _field42;
        struct CLMotionDefaultsWrite<bool> _field43;
        struct CLMotionDefaultsWrite<bool> _field44;
        struct CLMotionDefaultsWrite<bool> _field45;
        struct CLMotionDefaultsWrite<bool> _field46;
        struct CLMotionDefaultsWrite<bool> _field47;
    } _field48;
    id _field49;
    id _field50;
    id _field51;
    id _field52;
    id _field53;
    struct LiveTimeConverter _field54;
};

struct CLMotionState {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct CLMotionActivity _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    struct CLMotionActivity _field14;
    struct list<CLMotionActivity, std::__1::allocator<CLMotionActivity>> _field15;
    id _field16;
};

struct CLMotionStateMediator {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    struct WorkoutSettings _field11;
    struct CLCalorieActivityFilter _field12;
    id _field13;
    id _field14;
    struct CLBodyMetrics _field15;
    struct CLMotionDefaultsWrite<int> _field16;
    struct CLMotionDefaultsWrite<int> _field17;
    struct CLMotionDefaultsWrite<int> _field18;
    struct CLMotionDefaultsWrite<bool> _field19;
    struct CLMotionDefaultsWrite<bool> _field20;
    struct CLMotionDefaultsWrite<float> _field21;
    _Bool _field22;
    struct Dispatcher *_field23;
    struct Dispatcher *_field24;
    struct Dispatcher *_field25;
    struct Dispatcher *_field26;
    id _field27;
    struct unique_ptr<CLMotionNotifier::SiloDispatcher<CLDeviceMotion::Sample>, std::__1::default_delete<CLMotionNotifier::SiloDispatcher<CLDeviceMotion::Sample>>> _field28;
    struct CLWorkoutPredictorSourcesImpl<CLWorkoutPredictorSourceFromNotifier<CLElevationChangeEntry>, CLWorkoutPredictorSourceFromNotifier<CLCatherineData>, CLWorkoutPredictorSourceFromNotifier<CLOdometerEntry>, CLWorkoutPredictorSourceFromNotifier<CLStepCountEntry>, CLWorkoutPredictorSourceFromNotifier<CLExtendedStepCountEntry>, CLWorkoutPredictorExternallyActivatedSource<CLWorkoutClassifier_Type::CLWorkoutClassifierResult>, CLWorkoutPredictorSourceBuffer<CLWorkoutClassifier_Type::CLWorkoutClassifierResult>, CLWorkoutPredictorExternallyActivatedSource<CLWorkoutPredictorTurnDetector::Turn>, CLWorkoutPredictorSourceFromNotifier<CLSwimEntry>, CLWorkoutPredictorSourceBuffer<CLWorkoutPredictorWatchPressure>, CLWorkoutPredictorSourceBuffer<CLExerciseMinuteData>> _field29;
    struct CLWorkoutPredictor _field30;
    struct CLPowerAssertion _field31;
    struct unique_ptr<CLAggregateDictionary, std::__1::default_delete<CLAggregateDictionary>> _field32;
    struct CLVO2MaxPowerBudgetEstimator _field33;
    _Bool _field34;
    _Bool _field35;
    int _field36;
    struct CLWorkoutAlertStatistics _field37;
    double _field38;
    struct WorkoutEvent _field39;
    struct WorkoutEvent _field40;
    struct WorkoutEvent _field41;
    struct CLDaemonLocation _field42;
    id _field43;
    struct unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client>> _field44;
    struct unique_ptr<CLSkiNotifier_Type::Client, std::__1::default_delete<CLSkiNotifier_Type::Client>> _field45;
    struct unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client>> _field46;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field47;
    struct unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client>> _field48;
    struct unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client>> _field49;
    struct unique_ptr<CLMotionStateObserver_Type::Client, std::__1::default_delete<CLMotionStateObserver_Type::Client>> _field50;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field51;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field52;
    id _field53;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field54;
    struct CLServiceLocationProvider _field55;
    struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> _field56;
};

struct CLMotionStateObserver {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct CLWorkoutUpdate _field10;
    id _field11;
    _Bool _field12;
    _Bool _field13;
    struct CLMotionStateUpdate _field14;
    struct unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client>> _field15;
    struct unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client>> _field16;
    struct unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client>> _field17;
};

struct CLMotionStateUpdate {
    double _field1;
    int _field2;
    int _field3;
};

struct CLMotionSyncStore {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    id _field11;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field12;
};

struct CLNADController;

struct CLNameValuePair {
    CDUnknownFunctionPointerType *_field1;
    struct __CFDictionary *_field2;
};

struct CLNatalieData {
    int _field1;
    struct __CFString *_field2;
    double _field3;
    int _field4;
    _Bool _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    long long _field9;
    long long _field10;
    double _field11;
    unsigned char _field12[16];
};

struct CLNatalieExternallyActivatedSource<CLCalorimetryDanceDMFeatures> {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    double _field3;
    struct deque<CLCalorimetryDanceDMFeatures, std::__1::allocator<CLCalorimetryDanceDMFeatures>> _field4;
    double _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    struct function<bool (bool)> _field13;
};

struct CLNatalieExternallyActivatedSource<CLCalorimetryFunctionalStrengthDMFeatures> {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    double _field3;
    struct deque<CLCalorimetryFunctionalStrengthDMFeatures, std::__1::allocator<CLCalorimetryFunctionalStrengthDMFeatures>> _field4;
    double _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    struct function<bool (bool)> _field13;
};

struct CLNatalieExternallyActivatedSource<CLCalorimetryRowingDMFeatures> {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    double _field3;
    struct deque<CLCalorimetryRowingDMFeatures, std::__1::allocator<CLCalorimetryRowingDMFeatures>> _field4;
    double _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    struct function<bool (bool)> _field13;
};

struct CLNatalieFeatures {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
    float _field7;
    int _field8;
    _Bool _field9;
};

struct CLNatalieInput<CLExtendedStepCountEntry> {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    double _field3;
    struct deque<CLExtendedStepCountEntry, std::__1::allocator<CLExtendedStepCountEntry>> _field4;
    double _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
};

struct CLNatalieInput<CLMotionStateMediator_Type::MediatedMotionActivity> {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    double _field3;
    struct deque<CLMotionStateMediator_Type::MediatedMotionActivity, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity>> _field4;
    double _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
};

struct CLNatalieInput<CLOdometerEntry>;

struct CLNatalieModelInput;

struct CLNatalieSourceFromNotifier<CLCatherineData> {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    double _field3;
    struct deque<CLCatherineData, std::__1::allocator<CLCatherineData>> _field4;
    double _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    id _field13;
    struct unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client>> _field14;
};

struct CLNatalieSourceFromNotifier<CLCoarseElevationChangeEntry> {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    double _field3;
    struct deque<CLCoarseElevationChangeEntry, std::__1::allocator<CLCoarseElevationChangeEntry>> _field4;
    double _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    id _field15;
    struct unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client>> _field16;
};

struct CLNatalieSourceFromNotifier<CLElevationChangeEntry> {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    double _field3;
    struct deque<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry>> _field4;
    double _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    struct CLElevationGradeEstimator _field13;
    id _field14;
    struct unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client>> _field15;
};

struct CLNatalieSourceFromNotifier<CLOdometerEntry> {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    double _field3;
    struct deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry>> _field4;
    double _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    id _field13;
    struct unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client>> _field14;
};

struct CLNatalieSourceFromNotifier<CLStepCountEntry> {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    double _field3;
    struct deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry>> _field4;
    double _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    id _field13;
    struct unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client>> _field14;
};

struct CLNatalieSourceFromNotifier<CLSwimEntry> {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    double _field3;
    struct deque<CLSwimEntry, std::__1::allocator<CLSwimEntry>> _field4;
    double _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    id _field13;
    struct unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client>> _field14;
};

struct CLNatalieSourceFromNotifier<_CLFitnessMachineData> {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    double _field3;
    struct deque<_CLFitnessMachineData, std::__1::allocator<_CLFitnessMachineData>> _field4;
    double _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    id _field13;
    struct unique_ptr<CLFitnessMachineNotifier_Type::Client, std::__1::default_delete<CLFitnessMachineNotifier_Type::Client>> _field14;
};

struct CLNatalimetryNotifier {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    CDUnknownFunctionPointerType *_field10;
    struct shared_ptr<CLNatalimetryRecorderDb> _field11;
    struct CLActivityAggregator<CLNatalieData, CLActivityDB::ClassCDataProtectionPolicy> _field12;
    struct shared_ptr<CLExerciseMinuteRecorderDb> _field13;
    struct CLActivityAggregator<CLExerciseMinuteData, CLActivityDB::ClassCDataProtectionPolicy> _field14;
    struct shared_ptr<CLMaxMetsRecorderDb> _field15;
    struct CLActivityAggregator<MaxMets, CLActivityDB::ClassBDataProtectionPolicy> _field16;
    struct shared_ptr<CLMaxMetsProcessingRecorderDb> _field17;
    struct CLMotionDefaultsWrite<bool> _field18;
    id _field19;
    struct unique_ptr<CLPersistentStore, std::__1::default_delete<CLPersistentStore>> _field20;
    _Bool _field21;
    _Bool _field22;
    id _field23;
    _Bool _field24;
    struct CLMotionDefaultsWrite<bool> _field25;
    int _field26;
    int _field27;
    struct Dispatcher *_field28;
    _Bool _field29;
    struct PostWorkoutSettings _field30;
    struct CLNatalieSourceFromNotifier<CLOdometerEntry> _field31;
    struct CLNatalieSourceFromNotifier<CLElevationChangeEntry> _field32;
    struct CLNatalieSourceFromNotifier<CLCoarseElevationChangeEntry> _field33;
    struct CLNatalieSourceFromNotifier<CLCatherineData> _field34;
    struct CLNatalieSourceFromNotifier<CLStepCountEntry> _field35;
    struct CLNatalieInput<CLMotionStateMediator_Type::MediatedMotionActivity> _field36;
    struct CLNatalieSourceFromNotifier<CLSwimEntry> _field37;
    struct CLNatalieSourceFromNotifier<_CLFitnessMachineData> _field38;
    struct CLCalorimetryDMFeatureSourceController _field39;
    struct shared_ptr<CLNatalieModelInput> _field40;
    struct unique_ptr<CLFitnessControllerInterface, std::__1::default_delete<CLFitnessControllerInterface>> _field41;
    id _field42;
    id _field43;
    id _field44;
    id _field45;
    int _field46;
    double _field47;
    struct CLCatherineData _field48;
    double _field49;
    _Bool _field50;
    struct CLCaloriePalEstimator _field51;
    struct shared_ptr<CLVO2MaxInputCache> _field52;
    struct CLVO2MaxEstimator _field53;
    int _field54;
    struct unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client>> _field55;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field56;
    struct unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client>> _field57;
    struct unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client>> _field58;
    struct unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client>> _field59;
    struct unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client>> _field60;
    _Bool _field61;
    struct CLHeartRateDriftEstimator _field62;
    struct unique_ptr<CLMotionNotifier::SiloDispatcher<CLDeviceMotion::Sample>, std::__1::default_delete<CLMotionNotifier::SiloDispatcher<CLDeviceMotion::Sample>>> _field63;
};

struct CLNatalimetryRecorderDb;

struct CLNavModeClassificationEstimate {
    time_point_406bde99 fTimestamp;
    int fCurrent;
    _Bool fChanged;
};

struct CLNavModeEstimator {
    struct unique_ptr<CLVehicularPedestrianOverallEstimator, std::__1::default_delete<CLVehicularPedestrianOverallEstimator>> fVehicularPedestrianEstimator;
    int fPrevClassification;
};

struct CLNetworkLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct unique_ptr<CLINetworkLocationProviderExternal, std::__1::default_delete<CLINetworkLocationProviderExternal>> _field10;
    _Bool _field11;
    struct unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase>> _field12;
    struct unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase>> _field13;
    struct map<CLTelephonyService_Type::Cell, double, std::__1::less<CLTelephonyService_Type::Cell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::Cell, double>>> _field14;
    struct unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase>> _field15;
    struct unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase>> _field16;
    struct map<CLTelephonyService_Type::ScdmaCell, double, std::__1::less<CLTelephonyService_Type::ScdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::ScdmaCell, double>>> _field17;
    struct unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase>> _field18;
    struct unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase>> _field19;
    struct map<CLTelephonyService_Type::CdmaCell, double, std::__1::less<CLTelephonyService_Type::CdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::CdmaCell, double>>> _field20;
    struct unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase>> _field21;
    struct unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase>> _field22;
    struct map<CLTelephonyService_Type::LteCell, double, std::__1::less<CLTelephonyService_Type::LteCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::LteCell, double>>> _field23;
    int _field24;
    double _field25;
    double _field26;
    double _field27;
    int _field28;
    int _field29;
    struct map<int, std::__1::vector<int, std::__1::allocator<int>>, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, std::__1::vector<int, std::__1::allocator<int>>>>> _field30;
    struct map<CLMacAddress, double, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, double>>> _field31;
    _Bool _field32;
    struct CLNetworkLocationRequester *_field33;
    _Bool _field34;
    _Bool _field35;
    struct CLPowerAssertion _field36;
    id _field37;
    int _field38;
    _Bool _field39;
    struct CLPersistentTimer *_field40;
    double _field41;
    double _field42;
    double _field43;
    int _field44;
    int _field45;
    int _field46;
    int _field47;
    int _field48;
    struct set<CLNetworkLocationServerResponseListener *, std::__1::less<CLNetworkLocationServerResponseListener *>, std::__1::allocator<CLNetworkLocationServerResponseListener *>> _field49;
    int _field50;
    int _field51[2];
    struct CLDistanceCalc _field52;
    _Bool _field53;
    _Bool _field54;
    struct shared_ptr<CLWifiAccessPointLocationService> _field55;
};

struct CLNetworkLocationRequestConfig {
    int _field1;
};

struct CLNetworkLocationRequester;

struct CLNetworkLocationRequesterALS {
    CDUnknownFunctionPointerType *_field1;
    struct vector<CLTelephonyService_Type::Cell, std::__1::allocator<CLTelephonyService_Type::Cell>> _field2;
    struct vector<CLTelephonyService_Type::ScdmaCell, std::__1::allocator<CLTelephonyService_Type::ScdmaCell>> _field3;
    struct vector<CLTelephonyService_Type::CdmaCell, std::__1::allocator<CLTelephonyService_Type::CdmaCell>> _field4;
    struct vector<CLTelephonyService_Type::LteCell, std::__1::allocator<CLTelephonyService_Type::LteCell>> _field5;
    vector_81654e89 _field6;
    struct Listener _field7;
    int _field8;
    int _field9;
    id _field10;
    id _field11;
    int _field12;
    struct __CFString *_field13;
    struct __CFString *_field14;
    int _field15;
    basic_string_90719d97 _field16;
    _Bool _field17;
};

struct CLNetworkLocationServerResponseListener {
    CDUnknownFunctionPointerType *_field1;
};

struct CLNmeaScreener {
    _Bool _field1;
    _Bool _field2;
    basic_string_90719d97 _field3;
    double _field4;
    double _field5;
    struct CLDistanceCalc _field6;
    struct ExternalLocationData _field7;
    struct ExternalLocationData _field8;
    struct ExternalLocationData _field9;
    struct ExternalLocationData _field10;
    struct function<void (bool, CLLocationType)> _field11;
};

struct CLNonInterruptingTimer;

struct CLNotifierBase {
    CDUnknownFunctionPointerType *_field1;
};

struct CLNotifierClientBase {
    CDUnknownFunctionPointerType *_field1;
};

struct CLOdometerEntry {
    double startTime;
    double distance;
    double accuracy;
    double gpsAltitude;
    double speed;
    double rawSpeed;
    double odometer;
    double gpsSpeedAccuracy;
    double timestampGps;
    int quality;
    int originDevice;
    int type;
    double groundAltitude;
    double groundAltitudeUncertainty;
    double smoothedGPSAltitude;
    double smoothedGPSAltitudeUncertainty;
    double gpsCourseRadians;
    double gpsCourseAccuracy;
};

struct CLOdometerNotifier {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct shared_ptr<CLElevationRecorderDb> _field10;
    struct shared_ptr<CLActivityAggregator<CLSignificantElevation, CLActivityDB::ClassCDataProtectionPolicy>> _field11;
    struct CLSignificantElevationEstimator _field12;
    struct CLPowerAssertion _field13;
    id _field14;
    id _field15;
    basic_string_90719d97 _field16;
    struct list<CLOdometerEntry, std::__1::allocator<CLOdometerEntry>> _field17;
};

struct CLOdometerQuality {
    CDUnknownFunctionPointerType *_field1;
    vector_f672cb0f _field2;
    struct deque<std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>>> _field3;
    vector_b67dfe3a _field4;
    int _field5;
};

struct CLOdometerSuitability {
    double _field1;
    _Bool _field2;
    _Bool _field3;
};

struct CLOldWifiScanner {
    id _field1;
    struct unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>> _field2;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field3;
    id _field4;
    _Bool _field5;
    _Bool _field6;
    time_point_406bde99 _field7;
    struct ScanningPolicy _field8;
};

struct CLOnBodyNotifier {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
};

struct CLOutdoorMatchingEngine;

struct CLParkinsonsResultRecorderDb;

struct CLPedometerEvent {
    double _field1;
    int _field2;
};

struct CLPedometerPaceFusion {
    struct CLNatalieInput<CLOdometerEntry> *_field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    struct FirstOrderFilter<double> _field10;
    struct FirstOrderFilter<double> _field11;
    int _field12;
    int _field13;
    _Bool _field14;
};

struct CLPeerRangeRequest {
    basic_string_90719d97 _field1;
    _Bool _field2;
    double _field3;
    vector_a730dc89 _field4;
};

struct CLPeerRangingManager {
    struct CLPeerRangingManagerDelegate *_field1;
    struct CLPeerRangeRequest _field2;
    _Bool _field3;
    _Bool _field4;
    int _field5;
};

struct CLPeerRangingManagerDelegate;

struct CLPeerRangingNotifier {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    CDUnknownFunctionPointerType *_field10;
    CDUnknownFunctionPointerType *_field11;
    struct CLPeerRangingManager _field12;
    struct CLPersistentTimer *_field13;
    struct unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient>> _field14;
};

struct CLPeopleDensityBTLEAdvertisement {
    basic_string_90719d97 _field1;
    unsigned char _field2;
    int _field3;
    double _field4;
};

struct CLPersistentStore {
    CDUnknownFunctionPointerType *_field1;
    struct __CFDictionary *_field2;
    id _field3;
    _Bool _field4;
    int _field5;
    double _field6;
    id _field7;
    basic_string_90719d97 _field8;
    basic_string_90719d97 _field9;
    basic_string_90719d97 _field10;
    int _field11;
};

struct CLPersistentSubscriptionBase;

struct CLPersistentTimer {
    id _field1;
    CDUnknownFunctionPointerType _field2;
    void *_field3;
    id _field4;
    basic_string_90719d97 _field5;
};

struct CLPipelineLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownFunctionPointerType *_field14;
    CDUnknownFunctionPointerType *_field15;
    id _field16;
    struct unique_ptr<CLIndoorLogic, std::__1::default_delete<CLIndoorLogic>> _field17;
    id _field18;
    id _field19;
    struct unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client>> _field20;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field21;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field22;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field23;
    struct CLWifiServiceClient _field24;
    struct unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client>> _field25;
    struct unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client>> _field26;
    struct unique_ptr<CLVehicleConnectionNotifier_Type::Client, std::__1::default_delete<CLVehicleConnectionNotifier_Type::Client>> _field27;
    struct unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>> _field28;
    struct CLFileUpdate _field29;
    struct CLLingerRequest _field30;
    set_7b7d70f4 _field31;
    set_7b7d70f4 _field32;
    id _field33;
    int _field34;
    id _field35;
};

struct CLPolicyProactive;

struct CLPolicyTrip;

struct CLPowerAssertion {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    void *_field3;
    struct __CFString *_field4;
    double _field5;
    double _field6;
    id _field7;
};

struct CLPredictedWalkDistanceBoutDetector;

struct CLPredictedWalkDistanceBoutEntry {
    int _field1;
    double _field2;
    double _field3;
    unsigned int _field4;
    double _field5;
    double _field6;
    unsigned int _field7;
    unsigned int _field8;
    unsigned int _field9;
    double _field10;
    int _field11;
    int _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
    double _field17;
};

struct CLPredictedWalkDistanceBoutRecorderDb;

struct CLPredictedWalkDistanceEstimate {
    double _field1;
    int _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    int _field10;
    int _field11;
    int _field12;
    int _field13;
    double _field14;
    double _field15;
    double _field16;
    int _field17;
    int _field18;
    double _field19;
    double _field20;
    double _field21;
    int _field22;
    double _field23;
    double _field24;
};

struct CLPredictedWalkDistanceEstimateAnalytics {
    double _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    float _field6;
    float _field7;
    float _field8;
    float _field9;
    int _field10;
    int _field11;
    float _field12;
    float _field13;
    float _field14;
    float _field15;
    float _field16;
    int _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
};

struct CLPredictedWalkDistanceEstimator;

struct CLPressureBias {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct unique_ptr<CLPressureCalibrationDatabase_Type::Client, std::__1::default_delete<CLPressureCalibrationDatabase_Type::Client>> _field10;
};

struct CLPressureCalibrationDatabase {
    CDUnknownFunctionPointerType *_field1;
    struct unique_ptr<CLSensorCalibrationController_Type::Client, std::__1::default_delete<CLSensorCalibrationController_Type::Client>> _field2;
    _Bool _field3;
    CDUnknownFunctionPointerType *_field4;
    basic_string_90719d97 _field5;
    id _field6;
    id _field7;
    id _field8;
    struct map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>>> _field9;
    struct map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>>> _field10;
    int _field11;
    _Bool _field12;
    struct MotionBarometerCalibration _field13;
    struct CLSqliteDatabase _field14;
    int _field15;
    struct TemperatureOffsetCoefficientRound _field16;
    struct vector<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound>> _field17;
    _Bool _field18;
    struct {
        float _field1;
        float _field2;
        double _field3;
    } _field19;
    struct Dispatcher *_field20;
    int _field21;
    struct CLRobustSlopeEstimator _field22;
};

struct CLQmiClientAdapter;

struct CLQmiDiag;

struct CLQmiDmsManager {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct shared_ptr<CLQmiClientAdapter> _field3;
    int _field4;
    unsigned int _field5;
    _Bool _field6;
};

struct CLQmiPdsManager {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLQmiClientManager_Type::Notification, CLQmiClientManager_Type::NotificationData, char, CLQmiClientManager_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLQmiClientManager_Type::Notification, CLQmiClientManager_Type::NotificationData, char, CLQmiClientManager_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLQmiClientManager_Type::Notification, CLQmiClientManager_Type::NotificationData, char, CLQmiClientManager_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLQmiClientManager_Type::Notification, CLQmiClientManager_Type::NotificationData, char, CLQmiClientManager_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct shared_ptr<CLQmiClientAdapter> _field10;
    _Bool _field11;
    int _field12;
    int _field13;
    _Bool _field14;
    int _field15;
    int _field16;
    int _field17;
    unsigned char _field18;
    basic_string_90719d97 _field19;
    int _field20;
    _Bool _field21;
    _Bool _field22;
    unsigned char _field23;
    unsigned char _field24;
    _Bool _field25;
    _Bool _field26;
    unsigned int _field27;
    unsigned int _field28;
    unsigned int _field29;
    _Bool _field30;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field31;
    _Bool _field32;
    _Bool _field33;
    _Bool _field34;
    _Bool _field35;
    _Bool _field36;
    _Bool _field37;
    _Bool _field38;
    int _field39;
    int _field40;
    int _field41;
    int _field42;
    _Bool _field43;
    _Bool _field44;
    int _field45;
    unsigned int _field46;
    _Bool _field47;
    struct NavigationConfig _field48;
    int _field49;
    id _field50;
    _Bool _field51;
    _Bool _field52;
    struct __TelephonyBasebandControllerHandle_tag *_field53;
    struct {
        unsigned char _field1;
        double _field2;
        unsigned char _field3;
        double _field4;
        struct {
            unsigned long long _field1;
            unsigned long long _field2;
        } _field5;
        double _field6;
        _Bool _field7;
        _Bool _field8;
        _Bool _field9;
    } _field54;
    struct LocationSettings _field55;
    struct shared_ptr<CLQmiDiag> _field56;
    _Bool _field57;
};

struct CLRangingPeerInternal;

struct CLRavenController {
    id _field1;
    struct unique_ptr<CLMotionNotifier::Dispatcher, void (*)(CLMotionNotifier::Dispatcher *)> _field2;
    struct unique_ptr<CLMotionNotifier::Dispatcher, void (*)(CLMotionNotifier::Dispatcher *)> _field3;
    struct unique_ptr<CLMotionNotifier::Dispatcher, void (*)(CLMotionNotifier::Dispatcher *)> _field4;
    struct unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>> _field5;
    struct unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>> _field6;
    struct unique_ptr<CLMotionNotifier::Dispatcher, void (*)(CLMotionNotifier::Dispatcher *)> _field7;
    struct unique_ptr<CLGpsAssistant_Type::Client, std::__1::default_delete<CLGpsAssistant_Type::Client>> _field8;
    struct unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>> _field9;
    struct unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client>> _field10;
    struct unique_ptr<CLMotionStateObserver_Type::Client, std::__1::default_delete<CLMotionStateObserver_Type::Client>> _field11;
    struct unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client>> _field12;
    struct unique_ptr<CLMotionNotifier::Dispatcher, void (*)(CLMotionNotifier::Dispatcher *)> _field13;
    id _field14;
    struct unique_ptr<CLSignalEnvironmentProvider_Type::Client, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client>> _field15;
    struct unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client>> _field16;
    id _field17;
    struct unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>> _field18;
    id _field19;
    id _field20;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field21;
    struct unique_ptr<raven::RavenSupervisor, std::__1::default_delete<raven::RavenSupervisor>> _field22;
    struct timed_mutex _field23;
    struct RavenSolutionEvent _field24;
    struct NotificationData {
        struct CLDaemonLocation _field1;
        struct CLDaemonLocationPrivate _field2;
        struct shared_ptr<CLBatchedLocations> _field3;
        struct TechnologyStatus _field4;
        _Bool _field5;
        double _field6;
        int _field7;
        CDStruct_d2b197d1 _field8;
        struct {
            double _field1;
            double _field2;
        } _field9;
        struct XtraFileAvailable _field10;
        int _field11;
        struct LocationDerivedSpeed _field12;
        struct {
            double _field1;
            double _field2;
            double _field3;
            int _field4;
        } _field13;
        struct {
            double _field1;
            double _field2;
            double _field3;
            double _field4;
            double _field5;
            double _field6;
            _Bool _field7;
            double _field8[3][3];
            double _field9;
            double _field10;
            double _field11;
            unsigned long long _field12;
            int _field13;
        } _field14;
        struct shared_ptr<const gnss::MeasurementData> _field15;
        int _field16;
        struct {
            int _field1;
            double _field2;
            double _field3;
            double _field4;
            double _field5;
            double _field6;
            double _field7;
            double _field8[5];
            double _field9;
            double _field10;
            double _field11;
            double _field12;
            int _field13;
            int _field14;
        } _field17;
        struct CLStrongPtr<NSData *> _field18;
        struct PredictedGnssAvailability _field19;
    } _field25;
    struct mutex _field26;
    _Bool _field27;
    struct unique_ptr<CLRavenController::RavenThread, std::__1::default_delete<CLRavenController::RavenThread>> _field28;
    struct LiveTimeConverter _field29;
    struct unique_ptr<CLGnssUndulation, std::__1::default_delete<CLGnssUndulation>> _field30;
    struct InterfaceTelemeter _field31;
    _Bool _field32;
    _Bool _field33;
    _Bool _field34;
    _Bool _field35;
    _Bool _field36;
    _Bool _field37;
    _Bool _field38;
    _Bool _field39;
    _Bool _field40;
    _Bool _field41;
    _Bool _field42;
    _Bool _field43;
    _Bool _field44;
    _Bool _field45;
    _Bool _field46;
    _Bool _field47;
    _Bool _field48;
    _Bool _field49;
    _Bool _field50;
    _Bool _field51;
    _Bool _field52;
    _Bool _field53;
    _Bool _field54;
    _Bool _field55;
    _Bool _field56;
    _Bool _field57;
    _Bool _field58;
    struct unique_ptr<CLRavenSerializer, std::__1::default_delete<CLRavenSerializer>> _field59;
    struct RavenControllerDisabledState _field60;
    struct RavenControllerBestEffortState _field61;
    struct RavenControllerState *_field62;
};

struct CLRavenSerializer;

struct CLRobustSlopeEstimator {
    float fLastSampleTime;
    struct deque<float, std::__1::allocator<float>> fRunningTemperatureBuffer;
    struct map<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample>>, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample>>>>> fTemperatureBins;
    struct map<int, int, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, int>>> fTemperatureBinCount;
    int minBin;
    int maxBin;
};

struct CLRunningBufferStats<double> {
    CDUnknownFunctionPointerType *_field1;
    unsigned long long _field2;
    double _field3;
    double _field4;
    struct deque<double, std::__1::allocator<double>> _field5;
};

struct CLRunningStat {
    int _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
};

struct CLSedentaryAlarmData;

struct CLSedentaryAlarmRecorderDb;

struct CLSedentaryTimerNotifier {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    CDUnknownFunctionPointerType *_field10;
    _Bool _field11;
    struct CLMotionStateUpdate _field12;
    struct unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client>> _field13;
    struct unique_ptr<CLMotionStateObserver_Type::Client, std::__1::default_delete<CLMotionStateObserver_Type::Client>> _field14;
    struct unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client>> _field15;
    id _field16;
    _Bool _field17;
    struct shared_ptr<CLSedentaryAlarmRecorderDb> _field18;
    struct CLActivityAggregator<CLSedentaryAlarmData, CLActivityDB::ClassCDataProtectionPolicy> _field19;
    double _field20;
    id _field21;
    struct Preferences _field22;
    struct CLBodyMetrics _field23;
    int _field24;
    struct unique_ptr<CLStandPlusMinuteEstimator, std::__1::default_delete<CLStandPlusMinuteEstimator>> _field25;
    id _field26;
};

struct CLSensorCalibrationController {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct unique_ptr<CLAggregateDictionary, std::__1::default_delete<CLAggregateDictionary>> _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    _Bool _field20;
    struct Dispatcher *_field21;
    _Bool _field22;
    _Bool _field23;
    _Bool _field24;
    _Bool _field25;
    _Bool _field26;
    float _field27;
    _Bool _field28;
    _Bool _field29;
    struct IONotificationPort *_field30;
    unsigned int _field31;
    double _field32;
    _Bool _field33;
    int _field34;
    int _field35;
    double _field36;
    double _field37;
    struct unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector>> _field38;
    double _field39;
    id _field40;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field41;
    int _field42;
    _Bool _field43;
    float _field44;
    double _field45;
    float _field46;
    _Bool _field47;
    struct unique_ptr<CLSensorTemperatureController, std::__1::default_delete<CLSensorTemperatureController>> _field48;
    double _field49;
    id _field50;
    struct Dispatcher *_field51;
    struct CLPowerAssertion _field52;
    struct unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector>> _field53;
};

struct CLSensorCalibrationStaticDetector;

struct CLSensorRecorderDataPacket {
    double _field1;
    unsigned long long _field2;
    unsigned int _field3;
    struct shared_ptr<unsigned char> _field4;
};

struct CLSensorRecorderDb {
    CDUnknownFunctionPointerType *_field1;
    struct unique_ptr<CLSqliteDatabase, std::__1::default_delete<CLSqliteDatabase>> _field2;
    char *_field3;
    struct BasicMutex _field4;
    _Bool _field5;
    struct deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket>> _field6;
    int _field7;
    float _field8;
    int _field9;
    struct CLSensorRecorderDataPacket _field10;
    int _field11;
    id _field12;
    struct ClassCDataProtectionPolicy _field13;
    int _field14;
    struct list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket>> _field15;
    unsigned long long _field16;
    int _field17;
    struct __list_iterator<CLSensorRecorderDataPacket, void *> {
        struct __list_node_base<CLSensorRecorderDataPacket, void *> *_field1;
    } _field18;
    int _field19;
    basic_string_90719d97 _field20;
    basic_string_90719d97 _field21;
};

struct CLSensorRecorderNotifier {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    id _field10;
    id _field11;
    id _field12;
    id _field13;
    id _field14;
    id _field15;
    struct CLSensorRecorderDb _field16;
    struct CLSensorRecorderDb _field17;
    struct CLSensorRecorderDb _field18;
    id _field19;
    id _field20;
    id _field21;
    id _field22;
    struct vector<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>>, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>>>> _field23;
    double _field24;
    double _field25;
    double _field26;
    double _field27;
    double _field28;
    double _field29;
    double _field30;
    int _field31;
    unsigned int _field32;
    int _field33;
    unsigned int _field34;
    int _field35;
    unsigned int _field36;
    _Bool _field37;
    _Bool _field38;
    _Bool _field39;
    _Bool _field40;
    struct unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client>> _field41;
    _Bool _field42;
    struct unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client>> _field43;
};

struct CLSensorTemperatureController;

struct CLServiceLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    struct __CLClient *_field14;
    struct __CLClient *_field15;
    struct __CLClient *_field16;
    struct __CFString *_field17;
    struct __CFString *_field18;
    id _field19;
    _Bool _field20;
};

struct CLSignalEnvironmentProvider {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field10;
    int _field11;
    int _field12;
    struct CLCoarseSignalEnvironmentDataManager *_field13;
    double _field14;
    int _field15;
    _Bool _field16;
    struct CLFileUpdate _field17;
    basic_string_90719d97 _field18;
    basic_string_90719d97 _field19;
    basic_string_90719d97 _field20;
    struct CLHighResolutionSignalEnvironmentDataManager *_field21;
    _Bool _field22;
};

struct CLSignificantChangeManager {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    struct CLDistanceCalc _field14;
    _Bool _field15;
    struct CLPersistentTimer *_field16;
    id _field17;
    double _field18;
    double _field19;
    struct CLDaemonLocation _field20;
    _Bool _field21;
    _Bool _field22;
    struct RegInfo _field23;
    double _field24;
    struct unique_ptr<CLLocationAwarenessProvider_Type::Client, std::__1::default_delete<CLLocationAwarenessProvider_Type::Client>> _field25;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field26;
    _Bool _field27;
    double _field28;
    id _field29;
    _Bool _field30;
    id _field31;
};

struct CLSignificantElevation {
    int _field1;
    unsigned char _field2[16];
    double _field3;
    double _field4;
    unsigned int _field5;
    unsigned int _field6;
};

struct CLSignificantElevationEstimator {
    struct CMFixedSizeQueue<unsigned long long, 5> _field1;
    struct CMFilteredElevationStepHistory _field2;
    struct CLSignificantElevation _field3;
    struct FirstOrderFilter<double> _field4;
    double _field5;
    int _field6;
    double _field7;
    int _field8;
    basic_string_90719d97 _field9;
};

struct CLSimulatedLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
};

struct CLSimulationController {
    id _field1;
    id _field2;
    id _field3;
    id _field4;
    id _field5;
    id _field6;
    struct list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation>> _field7;
    _Bool _field8;
    double _field9;
    struct CLDaemonLocation _field10;
    struct CLDaemonLocation _field11;
    struct CLDaemonLocation _field12;
    id _field13;
    double _field14;
    double _field15;
    double _field16;
    double _field17;
    double _field18;
    unsigned char _field19;
    unsigned char _field20;
    struct __CFURL *_field21;
};

struct CLSkiController;

struct CLSkiDataStore {
    struct shared_ptr<CLSkiRecorderDb> _field1;
    unsigned char _field2[16];
    struct CLSkiEntry _field3;
};

struct CLSkiEntry {
    unsigned long long _field1;
    unsigned char _field2[16];
    unsigned char _field3[16];
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
};

struct CLSkiNotifier {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct unique_ptr<CLSkiController, std::__1::default_delete<CLSkiController>> _field10;
    struct CLSkiDataStore _field11;
    id _field12;
    struct CLMotionDefaultsWrite<bool> _field13;
    struct unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client>> _field14;
    struct unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client>> _field15;
};

struct CLSkiRecorderDb;

struct CLSpringTrackerEntry {
    unsigned long long _field1;
    unsigned char _field2[16];
    unsigned char _field3[16];
    double _field4;
    long long _field5;
};

struct CLSpringTrackerRecorderDb;

struct CLSpringTrackingNotifier {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    id _field10;
    struct shared_ptr<CLSpringTrackerRecorderDb> _field11;
    struct CLActivityAggregator<CLSpringTrackerEntry, CLActivityDB::ClassCDataProtectionPolicy> _field12;
    struct CLMotionDefaultsWrite<double> _field13;
    id _field14;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field15;
};

struct CLSqliteCachedStatement {
    struct CLSqliteDatabase *fDb;
    struct sqlite3_stmt *fStatement;
};

struct CLSqliteDatabase {
    CDUnknownFunctionPointerType *_field1;
    struct sqlite3 *_field2;
    struct Mutex *_field3;
    struct list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *>> _field4;
    struct SqliteProperties _field5;
    basic_string_90719d97 _field6;
    int _field7;
    id _field8;
};

struct CLStandMinuteInputData {
    double _field1;
    unsigned int _field2;
    unsigned int _field3;
    double _field4;
};

struct CLStandPlusMinuteEstimator;

struct CLStateMachine<CLEmergencyEED2> {
    struct is_same<std::__1::basic_string<char>, std::__1::basic_string<char>> _field1;
    struct is_same<std::__1::basic_string<char>, std::__1::basic_string<char>> _field2;
    int _field3;
    struct map<CLEmergencyEED2::State, CLEmergencyEED2::State (CLEmergencyEED2::*)(CLEmergencyEED2::Event), std::__1::less<CLEmergencyEED2::State>, std::__1::allocator<std::__1::pair<const CLEmergencyEED2::State, CLEmergencyEED2::State (CLEmergencyEED2::*)(CLEmergencyEED2::Event)>>> _field4;
    struct shared_ptr<CLEmergencyEED2> _field5;
    _Bool _field6;
    struct map<CLEmergencyEED2::Event, NSObject<OS_dispatch_source>*, std::__1::less<CLEmergencyEED2::Event>, std::__1::allocator<std::__1::pair<const CLEmergencyEED2::Event, NSObject<OS_dispatch_source>*>>> _field7;
    id _field8;
    unsigned int _field9;
    basic_string_90719d97 _field10;
    unsigned char _field11;
};

struct CLStatusBarIconManager {
    struct BasicMutex _field1;
    id _field2;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field3;
    _Bool _field4;
    _Bool _field5[9];
    unsigned int _field6[9];
    unsigned int _field7;
    id _field8[3];
    _Bool _field9[3];
};

struct CLStepCountEntry {
    double timestamp;
    double startTime;
    double firstStepTime;
    unsigned int count;
    double distance;
    double rawDistance;
    unsigned int floorsAscended;
    unsigned int floorsDescended;
    double currentPace;
    double currentCadence;
    double activeTime;
    int recordId;
    struct __CFString *sourceId;
    _Bool isOdometerDistance;
    _Bool isOdometerPace;
    struct CLAccelerometerPace accelerometerPace;
    unsigned int pushCount;
    unsigned int workoutType;
    unsigned char pedometerArmConstrainedState;
    unsigned int elevationAscended;
    unsigned int elevationDescended;
    union FalseStepDetectorStateUnion falseStepDetectorState;
    unsigned char falseStepsSuppressed;
    unsigned char distanceSource;
};

struct CLStepCountEntryAddition {
    double totalCalibratedDistance;
    double rawPace;
    unsigned int incrementalSteps;
    double incrementalActiveTime;
    double firstStepTime;
    double lastStepTime;
    double odometerSpeed;
    _Bool rawPaceDidJump;
    double calibratedDistance;
};

struct CLStepCountNotifier {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    shared_ptr_a3117978 _field10;
    struct CLActivityAggregator<CLStepCountEntry, CLActivityDB::ClassCDataProtectionPolicy> _field11;
    id _field12;
    id _field13;
    struct CLNatalieSourceFromNotifier<CLOdometerEntry> _field14;
    struct CLStepDistanceFusion _field15;
    _Bool _field16;
    id _field17;
    union NotificationData {
        struct CLStepCountEntry _field1;
        struct CLExtendedStepCountEntry _field2;
        struct CLPedometerEvent _field3;
        struct CLOdometerSuitability _field4;
    } _field18;
    long long _field19;
    struct CLBodyMetrics _field20;
    _Bool _field21;
    int _field22;
    struct unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client>> _field23;
    struct unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client>> _field24;
    struct Dispatcher *_field25;
    struct Dispatcher *_field26;
};

struct CLStepCountRecorderDb {
    CDUnknownFunctionPointerType *_field1;
    struct unique_ptr<CLSqliteDatabase, std::__1::default_delete<CLSqliteDatabase>> _field2;
    char *_field3;
    struct BasicMutex _field4;
    _Bool _field5;
    struct deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry>> _field6;
    int _field7;
    float _field8;
    int _field9;
    struct CLStepCountEntry _field10;
    int _field11;
    id _field12;
    struct ClassCDataProtectionPolicy _field13;
    CDUnknownFunctionPointerType *_field14;
    struct CLSqliteCachedStatement _field15;
    struct CLSqliteCachedStatement _field16;
    _Bool _field17;
    _Bool _field18;
    CDUnknownBlockType _field19;
    id _field20;
    unsigned int _field21;
    unsigned int _field22;
    unsigned int _field23;
    double _field24;
    int _field25;
    int _field26;
    int _field27;
    double _field28;
    _Bool _field29;
    unsigned int _field30;
    unsigned int _field31;
    unsigned int _field32;
    int _field33;
    int _field34;
};

struct CLStepCountSubscription {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    id _field3;
    struct Name _field4;
    struct Delegate *_field5;
    _Bool _field6;
    struct unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client>> _field7;
    _Bool _field8;
    _Bool _field9;
    _Bool _field10;
    id _field11;
};

struct CLStepDistance {
    int _field1;
    double _field2;
    double _field3;
    int _field4;
    int _field5;
    double _field6;
    int _field7;
};

struct CLStepDistanceFusion {
    struct CLOdometerQuality _field1;
    struct MotionOverride _field2;
    struct deque<double, std::__1::allocator<double>> _field3;
    struct CLNatalieInput<CLExtendedStepCountEntry> _field4;
    struct CLNatalieInput<CLOdometerEntry> *_field5;
    int _field6;
    struct CLPedometerPaceFusion _field7;
    int _field8;
    unsigned long long _field9;
    double _field10;
    double _field11;
    double _field12;
    int _field13;
    int _field14;
    double _field15;
    double _field16;
    double _field17;
    double _field18;
    _Bool _field19;
};

struct CLStreamedLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    id _field14;
    _Bool _field15;
    int _field16;
    id _field17;
    id _field18;
    int _field19;
    int _field20;
    int _field21;
};

struct CLStreamingAwareLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownFunctionPointerType *_field14;
    struct unique_ptr<CLStreamingAwareLocationProviderStateMachine, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine>> _field15;
    id _field16;
    struct map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool>>> _field17;
    struct map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool>>> _field18;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field19;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field20;
    struct unique_ptr<CLStreamedLocationProvider_Type::Client, std::__1::default_delete<CLStreamedLocationProvider_Type::Client>> _field21;
    struct unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client>> _field22;
    struct unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client>> _field23;
    struct map<id, double, std::__1::less<id>, std::__1::allocator<std::__1::pair<const id, double>>> _field24;
};

struct CLStreamingAwareLocationProviderStateMachine;

struct CLStrideCalibrationSessionMetrics {
    int session;
    double startTime;
    double endTime;
    double sumCalibrationDistanceSuccess;
    double sumCalibrationDistanceFailOther;
    double sumCalibrationDistanceFailGps;
    double sumCalibrationDistanceFailPedometer;
    double sumCalibrationDistanceFailGradient;
    double sumCalibrationDistanceInvalidGain;
    double sumCalibrationDistanceInvalidSpeed;
    double sumCalibrationDistanceInvalidLength;
    double totalDistance;
};

struct CLStrideLengthStepCadencePair {
    float strideLength;
    float stepCadence;
};

struct CLStrongPtr<NSData *> {
    id _field1;
};

struct CLSubHarvesterAltimeterExternal {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    id _field3;
    id _field4;
    struct Receiver *_field5;
};

struct CLSubHarvesterAvengerCrossValidationAnalytics {
    double baDispersion;
    double baEstimatedHorizontalAccuracy;
    unsigned int countBALocations;
    double deltaFindMyDistance;
    _Bool deviceFound;
    unsigned int deviceMotionState;
    double findMyEstimatedHorizontalAccuracy;
    unsigned int sigEnv;
    double timeToFindLatency;
    double truncatedDeviceLocationLatitude;
    double truncatedDeviceLocationLongitude;
    unsigned int timeOfDay;
};

struct CLSubHarvesterAvengerCrossValidationFinalAnalytics {
    double baDispersion;
    double baEstimatedHorizontalAccuracy;
    unsigned int countBALocations;
    double deltaFindMyDistance;
    _Bool deviceFound;
    unsigned int deviceMotionState;
    double findMyEstimatedHorizontalAccuracy;
    unsigned int sigEnv;
    double truncatedDeviceLocationLatitude;
    double truncatedDeviceLocationLongitude;
    unsigned int timeOfDay;
    double distanceAccuracyRatio;
};

struct CLSubHarvesterAvengerExternal {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field3;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field4;
    struct unique_ptr<CLSignalEnvironmentProvider_Type::Client, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client>> _field5;
    struct unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client>> _field6;
    struct unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client>> _field7;
    struct Receiver *_field8;
    id _field9;
    id _field10;
    id _field11;
    int _field12;
};

struct CLSubHarvesterAvengerProactiveLocationRequestMonitor {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    unsigned int _field3;
    unsigned int _field4;
    struct CLPersistentTimer *_field5;
    basic_string_90719d97 _field6;
    double _field7;
    struct optional<double> _field8;
    double _field9;
    double _field10;
    struct CLNameValuePair _field11;
};

struct CLSubHarvesterAvengerSettings {
    CDUnknownFunctionPointerType *_vptr$Settings;
    double fMaximumTimeOffsetThreshold;
    double fMaximumTimeOffsetThresholdNotMoving;
    double fMaximumWaitTimeForActiveBestLocationRequest;
    double fMaximumWaitTimeForActiveFineLocationRequest;
    unsigned int fMaximumNumberOfAdvertisementsInCache;
    unsigned int fMaximumBestRequestsPerDay;
    unsigned int fMaximumFineRequestsPerDay;
    double fAnalyticsHoldoffInterval;
    _Bool fCrossValidationEnabled;
    unsigned int fMaximumCrossvalidationRequests;
    double fCrossValidationRequestLimitShortResetInterval;
    double fCrossValidationRequestLimitLongResetInterval;
    double fCrossValidationDurationInterval;
    double fCrossValidationQueryBAInterval;
    double fCrossValidationFinalQueryInterval;
    _Bool fCrossValidationAllowedToRunWithoutVisit;
    double fCrossValidationRequestInterval;
    double fEnabledAnalyticsHoldoffInterval;
    double fActivityBasedSpeedDriving;
    double fActivityBasedSpeedCycling;
    double fActivityBasedSpeedRunning;
    double fActivityBasedSpeedWalking;
    double fSaveBeaconPayloadCacheInterval;
};

struct CLSwimAlgController;

struct CLSwimDataInterface;

struct CLSwimDataStore {
    CDUnknownFunctionPointerType *_field1;
    struct vector<CLSwimStrokesPerTurnDistribution, std::__1::allocator<CLSwimStrokesPerTurnDistribution>> _field2;
    struct deque<CLSwimDataInterface::StrokeEntry, std::__1::allocator<CLSwimDataInterface::StrokeEntry>> _field3;
    struct deque<CLSwimDetectedTurn, std::__1::allocator<CLSwimDetectedTurn>> _field4;
    struct deque<CLSwimEntry, std::__1::allocator<CLSwimEntry>> _field5;
    struct CLSwimStrokesPerTurnDistribution _field6[6];
    _Bool _field7[6];
    double _field8;
    double _field9;
    float _field10;
    _Bool _field11;
    unsigned char _field12[16];
    unsigned char _field13[16];
    double _field14;
    int _field15;
    float _field16;
    _Bool _field17;
    _Bool _field18;
    _Bool _field19;
    struct CLSwimPersistence _field20;
    struct CLSwimStrokeRateEstimator _field21;
    struct CLSwimDistanceEstimatorLap _field22;
    struct CLSwimDistanceEstimatorOpenWater _field23;
    struct CLSwimDistanceEstimator *_field24;
    long long _field25;
    struct CLSwimStyleAggregator _field26;
    struct Diagnostics _field27;
};

struct CLSwimDetectedTurn;

struct CLSwimDistanceEstimator;

struct CLSwimDistanceEstimatorLap {
    CDUnknownFunctionPointerType *_field1;
    struct CLSwimDataInterface *_field2;
    int _field3;
    int _field4;
    struct Estimates _field5;
};

struct CLSwimDistanceEstimatorOpenWater {
    CDUnknownFunctionPointerType *_field1;
    struct CLSwimDataInterface *_field2;
    struct Estimates _field3;
    int _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
};

struct CLSwimEntry {
    unsigned long long _field1;
    unsigned char _field2[16];
    unsigned char _field3[16];
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    int _field10;
    int _field11;
    int _field12;
    int _field13;
    float _field14;
    float _field15;
    float _field16;
    int _field17;
    int _field18;
};

struct CLSwimFusion;

struct CLSwimNotifier {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client>> _field10;
    _Bool _field11;
    struct unique_ptr<CLServiceLocationProvider, std::__1::default_delete<CLServiceLocationProvider>> _field12;
    struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> _field13;
    id _field14;
    id _field15;
    struct unique_ptr<CLSwimAlgController, std::__1::default_delete<CLSwimAlgController>> _field16;
    struct CLSwimDataStore _field17;
    struct unique_ptr<CLSwimFusion, std::__1::default_delete<CLSwimFusion>> _field18;
    struct Dispatcher *_field19;
    struct Dispatcher *_field20;
    struct Dispatcher *_field21;
    struct CLGizmoOrientation _field22;
    struct unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client>> _field23;
    struct unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client>> _field24;
    struct unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client>> _field25;
    _Bool _field26;
    _Bool _field27;
    _Bool _field28;
    _Bool _field29;
    id _field30;
    id _field31;
};

struct CLSwimPersistence {
    CDUnknownFunctionPointerType *_field1;
    struct unique_ptr<CLSqliteDatabase, std::__1::default_delete<CLSqliteDatabase>> _field2;
    char *_field3;
    struct BasicMutex _field4;
    _Bool _field5;
    struct deque<CLSwimEntry, std::__1::allocator<CLSwimEntry>> _field6;
    int _field7;
    float _field8;
    int _field9;
    struct CLSwimEntry _field10;
    int _field11;
    id _field12;
    struct ClassCDataProtectionPolicy _field13;
    struct CLSqliteCachedStatement _field14;
};

struct CLSwimStrokeRateEstimator {
    struct CLMedianFilter<double> _field1;
    double _field2;
    double _field3;
};

struct CLSwimStrokesPerTurnDistribution {
    unsigned char _field1[16];
    unsigned char _field2[16];
    double _field3;
    int _field4;
    double _field5;
    double _field6;
    int _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
};

struct CLSwimStyleAggregator {
    unsigned int _field1[6];
    unsigned int _field2;
};

struct CLTaMetricState {
    struct set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> uniqueIds;
    struct map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int>>> detectedIds;
    int suspiciousVisits;
    int suspiciousGeneral;
    int suspiciousOther;
    double timeNextSent;
    int sendHour;
    _Bool unitTest;
    double nextWeeklySubmissionTime;
    unsigned int weeklyCountOfSuspiciousDevices;
    double nextMonthlySubmissionTime;
    unsigned int monthlyCountOfSuspiciousDevices;
};

struct CLTelephonyCallObserverHelper;

struct CLTelephonyIratManager;

struct CLTelephonyService {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    id _field10;
    struct __CFRunLoopSource *_field11;
    void *_field12;
    _Bool _field13;
    int _field14;
    struct __CTServerConnection *_field15;
    struct unique_ptr<CLTelephonyIratManager, std::__1::default_delete<CLTelephonyIratManager>> _field16;
    _Bool _field17;
    _Bool _field18;
    float _field19;
    float _field20;
    int _field21;
    struct CLCoreTelephonyClient _field22;
    struct unique_ptr<CLTelephonyCallObserverHelper, std::__1::default_delete<CLTelephonyCallObserverHelper>> _field23;
    id _field24;
};

struct CLTileDownloadPolicy {
    id _field1;
    double _field2;
    unsigned long long _field3;
};

struct CLTileDownloader;

struct CLTileDownloaderExternal {
    CDUnknownFunctionPointerType *_field1;
};

struct CLTileFileDownloadDetails {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    double _field4;
    int _field5;
    double _field6;
    _Bool _field7;
    _Bool _field8;
};

struct CLTileSyncAWD {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    double _field10;
    double _field11;
};

struct CLTileSyncManager {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    id _field3;
    id _field4;
    id _field5;
    id _field6;
    struct CLITilesManager *_field7;
    struct unique_ptr<CLTileSyncManager::IExternal, std::__1::default_delete<CLTileSyncManager::IExternal>> _field8;
    id _field9;
    double _field10;
    _Bool _field11;
    double _field12;
    double _field13;
    id _field14;
    char *_field15;
    _Bool _field16;
    id _field17;
    _Bool _field18;
    struct shared_ptr<CLWifiAccessPointLocationService> _field19;
    char _field20;
    struct vector<TileId, std::__1::allocator<TileId>> _field21;
    char _field22;
    _Bool _field23;
    int _field24;
    _Bool _field25;
    struct CLTileSyncAWD _field26;
};

struct CLTilesManager {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile>>, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile>>>>> _field10;
    struct DownloadState _field11;
    struct DownloadState _field12;
    _Bool _field13;
    _Bool _field14;
    double _field15;
    double _field16;
    double _field17;
    double _field18;
    struct CLPersistentTimer *_field19;
    struct CLDaemonLocation _field20;
    double _field21;
    double _field22;
    int _field23;
    _Bool _field24;
    int _field25;
    int _field26;
    _Bool _field27;
    int _field28;
    _Bool _field29;
    int _field30;
    _Bool _field31;
    struct unique_ptr<CLITilesManagerExternal, std::__1::default_delete<CLITilesManagerExternal>> _field32;
    struct CLTileDownloadPolicy _field33;
    _Bool _field34;
    struct CLTilesSetCollection _field35;
    struct CLDemTileAvailability _field36;
    struct CLHrseTileAvailability _field37;
};

struct CLTilesSearchContext {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    struct map<TileId, CLTileFile *, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, CLTileFile *>>> _field4;
    unsigned long long _field5;
    unsigned long long _field6;
};

struct CLTilesSetCollection {
    struct vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet>>, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet>>>> _field1;
};

struct CLTimeManager {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    int _field11;
    int _field12;
    double _field13;
    struct unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client>> _field14;
    struct unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer>> _field15;
    double _field16;
};

struct CLTimeOffsetFilter {
    _Bool _field1;
    _Bool _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    unsigned long long _field8;
    struct CLRunningBufferStats<double> _field9;
    _Bool _field10;
    struct CLMedianFilter<double> _field11;
    double _field12;
};

struct CLTimeZoneDatabase;

struct CLTimeZoneManager {
    struct CLTimeZoneDatabase *_field1;
    struct unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client>> _field2;
    struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> _field3;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field4;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field5;
    struct unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client>> _field6;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field7;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field8;
    id _field9;
    id _field10;
    double _field11;
    double _field12;
    basic_string_90719d97 _field13;
    basic_string_90719d97 _field14;
    double _field15;
    struct CLDaemonLocation _field16;
    struct CLDaemonLocation _field17;
    struct CLDaemonLocation _field18;
    struct CLServiceLocationProvider _field19;
    int _field20;
    int _field21;
    _Bool _field22;
    _Bool _field23;
    id _field24;
    struct CLPersistentTimer *_field25;
    id _field26;
    int _field27;
    double _field28;
    id _field29;
    double _field30;
    double _field31;
    double _field32;
    double _field33;
    int _field34;
    double _field35;
    double _field36;
    double _field37;
    double _field38;
    double _field39;
    double _field40;
    double _field41;
    double _field42;
    struct CLDistanceCalc _field43;
    _Bool _field44[38];
};

struct CLTrackingAvoidanceMetrics {
    struct CLTaMetricState state;
    int signalEnvironment;
    struct CLDaemonLocation lastLocation;
    struct CLDaemonLocationPrivate lastLocationPrivate;
};

struct CLTrackingAvoidanceOTASubscription;

struct CLTransitTilePreloader {
    struct CLITransitTilePreloaderExternal *_field1;
    struct CLDistanceCalc _field2;
    double _field3;
    double _field4;
    struct CLDaemonLocation _field5;
};

struct CLTransitTilePreloaderExternal {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct CLTransitWsbClient {
    id _field1;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field2;
    _Bool _field3;
    _Bool _field4;
    unsigned int _field5;
};

struct CLTurnState {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct Dispatcher *_field10;
    struct CLTurnStateCalc _field11;
    struct Turn {
        int _field1;
        int _field2;
    } _field12;
};

struct CLTurnStateCalc {
    int _field1;
    int _field2;
    unsigned int _field3;
    unsigned int _field4;
    struct CLMedianFilter<float> _field5;
    struct CLMedianFilter<float> _field6;
    struct CLMedianFilter<float> _field7;
    struct CLRunningBufferStats<double> _field8;
    struct CLRunningBufferStats<double> _field9;
    struct CLRunningBufferStats<double> _field10;
};

struct CLUnifiedCellLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownFunctionPointerType *_field14;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field15;
    struct unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client>> _field16;
    struct unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client>> _field17;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field18;
    struct unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client>> _field19;
    struct unique_ptr<CLCellTilesManager_Type::Client, std::__1::default_delete<CLCellTilesManager_Type::Client>> _field20;
    struct unique_ptr<CLCoarseCellTilesManager_Type::Client, std::__1::default_delete<CLCoarseCellTilesManager_Type::Client>> _field21;
    struct CLCell _field22;
    struct CLDaemonLocation _field23;
    struct vector<CLCell, std::__1::allocator<CLCell>> _field24;
    struct vector<CLCell, std::__1::allocator<CLCell>> _field25[2];
    int _field26;
    _Bool _field27;
    struct CLPersistentTimer *_field28;
    char *_field29;
    int _field30;
    _Bool _field31;
    struct CLCellLocationAWD _field32;
    struct CellMetrics _field33;
};

struct CLVO2MaxEstimationDeescalator;

struct CLVO2MaxEstimator {
    long long _field1;
    long long _field2;
    unsigned char _field3[16];
    unsigned char _field4[16];
    struct CLVO2MaxInputCollector _field5;
    struct CLVO2MaxPreprocessor _field6;
    struct CLVO2MaxInputStore _field7;
    struct CLVO2MaxOutputStore _field8;
    struct shared_ptr<CLMaxMetsRecorderDb> _field9;
    struct vector<VO2MaxModelInput, std::__1::allocator<VO2MaxModelInput>> _field10;
    struct vector<VO2MaxModelInput, std::__1::allocator<VO2MaxModelInput>> _field11;
    struct CLBodyMetrics _field12;
    struct CLVO2MaxStats _field13;
    int _field14;
    _Bool _field15;
    double _field16;
    struct CLWorkoutSessionDetails _field17;
};

struct CLVO2MaxFHREstimator {
    struct CLHRToFHRConverter _field1;
    struct CLBodyMetrics _field2;
    float _field3;
    float _field4;
    int _field5;
    struct CMOnlineMean<float> _field6;
};

struct CLVO2MaxInputCache;

struct CLVO2MaxInputCollector {
    struct deque<CLVO2MaxInputCollector::HRSample, std::__1::allocator<CLVO2MaxInputCollector::HRSample>> _field1;
    _Bool _field2;
    double _field3;
    struct CLStepCountRecorderDb _field4;
    long long _field5;
    unsigned char _field6[16];
    _Bool _field7;
};

struct CLVO2MaxInputStore {
    struct shared_ptr<CLVO2MaxInputCache> _field1;
    _Bool _field2;
    unsigned char _field3[16];
    struct deque<VO2MaxInput, std::__1::allocator<VO2MaxInput>> _field4;
};

struct CLVO2MaxOutputRecorderDb {
    CDUnknownFunctionPointerType *_field1;
    struct unique_ptr<CLSqliteDatabase, std::__1::default_delete<CLSqliteDatabase>> _field2;
    char *_field3;
    struct BasicMutex _field4;
    _Bool _field5;
    struct deque<VO2MaxOutput, std::__1::allocator<VO2MaxOutput>> _field6;
    int _field7;
    float _field8;
    int _field9;
    struct VO2MaxOutput _field10;
    int _field11;
    id _field12;
    struct ClassBDataProtectionPolicy _field13;
};

struct CLVO2MaxOutputStore {
    struct CLVO2MaxOutputRecorderDb _field1;
    struct CLVO2MaxSummaryRecorderDb _field2;
};

struct CLVO2MaxPowerBudgetEstimator {
    struct CLMotionDefaultsWrite<double> _field1;
    struct CLMotionDefaultsWrite<double> _field2;
    struct CLMotionDefaultsWrite<double> _field3;
    struct CLMotionDefaultsWrite<double> _field4;
    basic_string_90719d97 _field5;
    basic_string_90719d97 _field6;
    id _field7;
    id _field8;
    _Bool _field9;
    struct function<void (double)> _field10;
};

struct CLVO2MaxPreprocessor {
    struct CLVO2MaxFHREstimator _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    struct PairStats _field6;
    struct vector<std::__1::pair<double, double>, std::__1::allocator<std::__1::pair<double, double>>> _field7;
    struct vector<std::__1::pair<double, double>, std::__1::allocator<std::__1::pair<double, double>>> _field8;
};

struct CLVO2MaxStats {
    int _field1;
    float _field2;
    _Bool _field3;
    float _field4;
    float _field5;
    float _field6;
    float _field7;
    float _field8;
    float _field9;
    float _field10;
    int _field11;
    float _field12;
    float _field13;
    float _field14;
    float _field15;
    float _field16;
    long long _field17;
    int _field18;
    int _field19;
    int _field20;
    unsigned int _field21;
    unsigned int _field22;
    unsigned int _field23;
    unsigned int _field24;
    int _field25;
    unsigned int _field26;
    float _field27;
    _Bool _field28;
    float _field29;
    float _field30;
};

struct CLVO2MaxSummaryRecorderDb {
    CDUnknownFunctionPointerType *_field1;
    struct unique_ptr<CLSqliteDatabase, std::__1::default_delete<CLSqliteDatabase>> _field2;
    char *_field3;
    struct BasicMutex _field4;
    _Bool _field5;
    struct deque<VO2MaxSummary, std::__1::allocator<VO2MaxSummary>> _field6;
    int _field7;
    float _field8;
    int _field9;
    struct VO2MaxSummary _field10;
    int _field11;
    id _field12;
    struct ClassBDataProtectionPolicy _field13;
};

struct CLVehicleConnection {
    double _field1;
    double _field2;
    char _field3[256];
    double _field4;
};

struct CLVehicleConnectionNotifier {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    id _field10;
    struct map<std::__1::basic_string<char>, CLBTDeviceEntry, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLBTDeviceEntry>>> _field11;
    struct CLBTHandsfreeWhitelist _field12;
    basic_string_90719d97 _field13;
    struct CLFileUpdate _field14;
    double _field15;
    basic_string_90719d97 _field16;
    struct CLFileUpdate _field17;
    double _field18;
    _Bool _field19;
    _Bool _field20;
    id _field21;
    id _field22;
    _Bool _field23;
    struct deque<CLVehicleConnectionNotifier::CLBTDialogDeviceInfo, std::__1::allocator<CLVehicleConnectionNotifier::CLBTDialogDeviceInfo>> _field24;
    struct CLBTDialogDeviceInfo _field25;
    id _field26;
    struct __CFRunLoopSource *_field27;
    _Bool _field28;
    int _field29;
    int _field30;
    int _field31;
    _Bool _field32;
    id _field33;
    struct CLVehicleConnection _field34;
    union NotificationData {
        struct CLVehicleConnection _field1;
    } _field35;
    struct unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client>> _field36;
    struct unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client>> _field37;
};

struct CLVehicleSpeedFilter {
    struct SpeedAndTime _field1;
    struct SpeedAndTime _field2;
    struct SpeedAndTime _field3;
};

struct CLVehicleStateMetrics;

struct CLVehicleStateNotifier {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct unique_ptr<CLVehicleConnectionNotifier_Type::Client, std::__1::default_delete<CLVehicleConnectionNotifier_Type::Client>> _field10;
    struct unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client>> _field11;
    struct unique_ptr<CLCachedLocationController_Type::Client, std::__1::default_delete<CLCachedLocationController_Type::Client>> _field12;
    struct CLVehicleConnection _field13;
    struct CLMotionActivity _field14;
    id _field15;
    id _field16;
    id _field17;
    id _field18;
    _Bool _field19;
    struct unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient>> _field20;
    struct unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client>> _field21;
    id _field22;
    int _field23;
    _Bool _field24;
    unsigned long long _field25;
    unsigned long long _field26;
    _Bool _field27;
    _Bool _field28;
    double _field29;
    struct CLLocationCoordinate2D _field30;
    struct CLLocationCoordinate2D _field31;
    int _field32;
    unsigned long long _field33;
    unsigned long long _field34;
    int _field35;
    _Bool _field36;
    struct CLVehicleStateMetrics *_field37;
};

struct CLVehicularPedestrianOverallEstimator;

struct CLVisionConfig {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    unsigned int _field4;
    double _field5;
    struct CLVisionLocationFuserConfig _field6;
};

struct CLVisionController {
    id _field1;
    id _field2;
    id _field3;
    _Bool _field4;
    _Bool _field5;
    struct unique_ptr<CLMotionNotifier::Dispatcher, std::__1::default_delete<CLMotionNotifier::Dispatcher>> _field6;
    _Bool _field7;
    struct unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client>> _field8;
    CDStruct_7660b417 _field9;
    struct CLVisionConfig _field10;
    struct CLVisionLocationFuser _field11;
};

struct CLVisionLocationFuser {
    _Bool _field1;
    struct SpinLock _field2;
    struct vector<clv::fusion::VioData, std::__1::allocator<clv::fusion::VioData>> _field3;
    struct vector<clv::fusion::LocationFuserMeasurement<clv::fusion::VlfData>, std::__1::allocator<clv::fusion::LocationFuserMeasurement<clv::fusion::VlfData>>> _field4;
    struct vector<clv::fusion::LocationFuserMeasurement<clv::fusion::LocData>, std::__1::allocator<clv::fusion::LocationFuserMeasurement<clv::fusion::LocData>>> _field5;
    struct LocationFuserState _field6;
    struct LocationFuserState _field7;
    struct vector<clv::fusion::LocationFuserState, std::__1::allocator<clv::fusion::LocationFuserState>> _field8;
    struct LocationFuserState _field9;
    struct VioData _field10;
    struct VlfData _field11;
    struct LocData _field12;
    unsigned long long _field13;
};

struct CLVisionLocationFuserConfig;

struct CLVisionTime {
    double _field1;
    double _field2;
    double _field3;
};

struct CLVisitMonitoringSubscription {
    CDUnknownFunctionPointerType *_field1;
    struct weak_ptr<CLPersistentSubscriptionBase> _field2;
    struct shared_ptr<CLPersistentSubscriptionBase::PersistenceBackend> _field3;
    struct Name _field4;
    struct PersistentSubscriptionIdentifier _field5;
    id _field6;
    id _field7;
    struct unordered_set<CLPersistentSubscriptionBase::Connection *, std::__1::hash<CLPersistentSubscriptionBase::Connection *>, std::__1::equal_to<CLPersistentSubscriptionBase::Connection *>, std::__1::allocator<CLPersistentSubscriptionBase::Connection *>> _field8;
    struct unordered_map<std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage>>> _field9;
    id _field10;
    _Bool _field11;
    _Bool _field12;
    id _field13;
    id _field14;
    struct optional<_CLSLVInterestType> _field15;
    id _field16;
    id _field17;
};

struct CLVisualLocalizationPropagation {
    CDUnknownFunctionPointerType *_vptr$CLVisualLocalizationPropagation;
    struct CMFixedSizeQueue<CMVector<float, 3>, 400> fVlfRotationRateHistory;
    struct CMFixedSizeQueue<unsigned long long, 400> fVlfTimestampHistory;
    struct CMFixedSizeQueue<float, 400> fVlfGravityZInvalidHistory;
    struct CMOQuaternion fAttitudePropagated;
    float fAttitudeUncertainty;
    unsigned long long fTimestamp;
};

struct CLWalkingSpeedCalRecorderDb;

struct CLWatchOrientationSettingsNotifier {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct CLGizmoOrientation _field10;
};

struct CLWifi1SettingsOta {
    id _field1;
    struct unique_ptr<CLMobileAssetManager_Type::Client, std::__1::default_delete<CLMobileAssetManager_Type::Client>> _field2;
};

struct CLWifi1SystemLogic {
    struct Logic _field1;
    struct shared_ptr<CLIWifiLocationChannelSelectionService> _field2;
};

struct CLWifiAccessPointLocationService;

struct CLWifiLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    struct shared_ptr<CLWifiLocationProvider::IExternal> _field14;
    id _field15;
    id _field16;
    _Bool _field17;
    struct CLWifi1SystemLogic _field18;
    struct SystemState _field19;
    struct CLWifi1SettingsOta _field20;
};

struct CLWifiLocationUpdateRequest {
    int _field1;
    _Bool _field2;
    basic_string_90719d97 _field3;
    double _field4;
    int _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    int _field9;
    int _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    double _field15;
    int _field16;
    _Bool _field17;
    _Bool _field18;
    int _field19;
    basic_string_90719d97 _field20;
};

struct CLWifiScanAggregator {
    double _field1;
    struct unordered_map<CLMacAddress, CLWifiService_Type::AccessPoint, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLWifiService_Type::AccessPoint>>> _field2;
};

struct CLWifiScanner;

struct CLWifiService {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct __CFNumber *_field10;
    struct __CFNumber *_field11;
    struct __CFDictionary *_field12;
    struct __CFDictionary *_field13;
    struct __CFDictionary *_field14;
    struct __CFDictionary *_field15;
    struct __CFDictionary *_field16;
    struct __CFDictionary *_field17;
    struct __CFDictionary *_field18;
    struct __CFDictionary *_field19;
    struct __CFDictionary *_field20;
    struct __CFDictionary *_field21;
    struct __CFDictionary *_field22;
    struct __CFDictionary *_field23;
    struct __CFDictionary *_field24;
    _Bool _field25;
    char _field26;
    _Bool _field27;
    int _field28;
    int _field29;
    _Bool _field30;
    _Bool _field31;
    _Bool _field32;
    unsigned long long _field33;
    struct array<CLMacAddress, 3> _field34;
    int _field35;
    int _field36;
    double _field37;
    struct __CFRunLoopSource *_field38;
    struct __WiFiManagerClient *_field39;
    struct __WiFiDeviceClient *_field40;
    struct __WiFiNetwork *_field41;
    struct deque<CLWifiService::ScanRequest, std::__1::allocator<CLWifiService::ScanRequest>> _field42;
    _Bool _field43;
    double _field44;
    double _field45;
    double _field46;
    double _field47;
    char _field48;
    double _field49;
    vector_94cb9693 _field50;
    double _field51;
    vector_94cb9693 _field52;
    double _field53;
    vector_94cb9693 _field54;
    struct __CFArray *_field55;
    struct __CFArray *_field56;
    _Bool _field57;
    struct AssociationState _field58;
    id _field59;
    _Bool _field60;
    double _field61;
    double _field62;
    struct map<int, const char *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, const char *>>> _field63;
    int _field64;
    int _field65;
    _Bool _field66;
    int _field67;
    id _field68;
    double _field69;
    int _field70;
    struct ScanStats _field71;
    struct BasicMutex _field72;
    struct unique_ptr<CLWifiService::IExternal, std::__1::default_delete<CLWifiService::IExternal>> _field73;
};

struct CLWifiServiceClient {
    id _field1;
    struct function<void (int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)> _field2;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field3;
    struct AssociationState _field4;
    _Bool _field5;
};

struct CLWifiTilesManager {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    id _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    CDUnknownFunctionPointerType *_field10;
    CDUnknownFunctionPointerType *_field11;
    struct map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile>>, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile>>>>> _field12;
    struct DownloadState _field13;
    struct DownloadState _field14;
    _Bool _field15;
    _Bool _field16;
    double _field17;
    struct CLDaemonLocation _field18;
    double _field19;
    double _field20;
    int _field21;
    _Bool _field22;
    _Bool _field23;
    int _field24;
    _Bool _field25;
    basic_string_90719d97 _field26;
    struct unique_ptr<CLIWifiTilesManagerExternal, std::__1::default_delete<CLIWifiTilesManagerExternal>> _field27;
    struct CLTileDownloadPolicy _field28;
    struct shared_ptr<CLWifiAccessPointLocationService> _field29;
    struct unique_ptr<CLITileSyncManager, std::__1::default_delete<CLITileSyncManager>> _field30;
    _Bool _field31;
    struct CLTilesSetCollection _field32;
};

struct CLWorkoutAlertStatistics {
    _Bool _field1;
    _Bool _field2;
    int _field3;
    int _field4;
    double _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
};

struct CLWorkoutIndoorOutdoorDetector;

struct CLWorkoutLabeler;

struct CLWorkoutPredictor {
    CDUnknownFunctionPointerType *_field1;
    struct Transition *_field2;
    unsigned long long _field3;
    unsigned char _field4;
    unsigned char _field5;
    struct CLWorkoutPredictorInputs _field6;
    struct unique_ptr<CLWorkoutStopDetector, std::__1::default_delete<CLWorkoutStopDetector>> _field7;
    struct unique_ptr<CLWorkoutLabeler, std::__1::default_delete<CLWorkoutLabeler>> _field8;
    struct unique_ptr<CLWorkoutIndoorOutdoorDetector, std::__1::default_delete<CLWorkoutIndoorOutdoorDetector>> _field9;
    struct unique_ptr<CLWorkoutPredictorTurnDetector, std::__1::default_delete<CLWorkoutPredictorTurnDetector>> _field10;
    struct unique_ptr<CLWorkoutPredictorTier2Classifier, std::__1::default_delete<CLWorkoutPredictorTier2Classifier>> _field11;
    double _field12;
    double _field13;
    struct WorkoutPrediction _field14;
    struct WorkoutEvent _field15;
    struct WorkoutPrediction _field16;
    _Bool _field17;
    struct WorkoutStartAwdMetrics _field18;
    _Bool _field19;
    _Bool _field20;
    struct WalkingEscalationRules _field21;
    struct Battery _field22;
    struct CLGizmoOrientation _field23;
    struct CLBackgroundWorkoutEscalationManager _field24;
    struct function<void (CLWorkoutPredictor_Type::Notification, CLWorkoutPredictor_Type::NotificationData)> _field25;
    long long _field26;
    _Bool _field27;
    double _field28;
};

struct CLWorkoutPredictorExternallyActivatedSource<CLWorkoutClassifier_Type::CLWorkoutClassifierResult> {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct deque<CLWorkoutClassifier_Type::CLWorkoutClassifierResult, std::__1::allocator<CLWorkoutClassifier_Type::CLWorkoutClassifierResult>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    CDStruct_0a530110 _field8;
    struct function<bool (bool)> _field9;
};

struct CLWorkoutPredictorExternallyActivatedSource<CLWorkoutPredictorTurnDetector::Turn> {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct deque<CLWorkoutPredictorTurnDetector::Turn, std::__1::allocator<CLWorkoutPredictorTurnDetector::Turn>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    struct Turn {
        double _field1;
        struct Metrics _field2;
        struct Metrics _field3;
        float _field4;
        struct CMVector<float, 3> _field5;
    } _field8;
    struct function<bool (bool)> _field9;
};

struct CLWorkoutPredictorInputs {
    struct CLWorkoutPredictorSources *_field1;
    struct CLWorkoutPredictorSourceBuffer<CLMotionCoprocessorInterface::MotionState> _field2;
    double _field3;
    struct {
        double _field1;
        double _field2;
    } _field4;
    double _field5;
    struct CLBodyMetrics _field6;
};

struct CLWorkoutPredictorSourceBuffer<CLExerciseMinuteData> {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct deque<CLExerciseMinuteData, std::__1::allocator<CLExerciseMinuteData>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    struct CLExerciseMinuteData _field8;
};

struct CLWorkoutPredictorSourceBuffer<CLMotionCoprocessorInterface::MotionState> {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct deque<CLMotionCoprocessorInterface::MotionState, std::__1::allocator<CLMotionCoprocessorInterface::MotionState>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    struct MotionState {
        double _field1;
        double _field2;
        double _field3;
        struct MotionState {
            int _field1;
            int _field2;
            int _field3;
            int _field4;
            int _field5;
            _Bool _field6;
            _Bool _field7;
            _Bool _field8;
            int _field9;
            unsigned long long _field10;
            int _field11;
            _Bool _field12;
            int _field13;
            union VehicularFlagsData _field14;
            int _field15;
            float _field16;
            float _field17;
            float _field18;
            int _field19;
            unsigned long long _field20;
            unsigned long long _field21;
            int _field22;
            int _field23;
        } _field4;
        struct CLNatalieFeatures _field5;
    } _field8;
};

struct CLWorkoutPredictorSourceBuffer<CLWorkoutClassifier_Type::CLWorkoutClassifierResult> {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct deque<CLWorkoutClassifier_Type::CLWorkoutClassifierResult, std::__1::allocator<CLWorkoutClassifier_Type::CLWorkoutClassifierResult>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    CDStruct_0a530110 _field8;
};

struct CLWorkoutPredictorSourceBuffer<CLWorkoutPredictorWatchPressure> {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct deque<CLWorkoutPredictorWatchPressure, std::__1::allocator<CLWorkoutPredictorWatchPressure>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    struct CLWorkoutPredictorWatchPressure _field8;
};

struct CLWorkoutPredictorSourceFromNotifier<CLCatherineData> {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct deque<CLCatherineData, std::__1::allocator<CLCatherineData>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    struct CLCatherineData _field8;
    id _field9;
    struct unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client>> _field10;
};

struct CLWorkoutPredictorSourceFromNotifier<CLElevationChangeEntry> {
    CDUnknownFunctionPointerType *_field1;
    struct CLElevationGradeEstimator _field2;
    _Bool _field3;
    struct deque<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry>> _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    struct CLElevationChangeEntry _field9;
    id _field10;
    struct unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client>> _field11;
};

struct CLWorkoutPredictorSourceFromNotifier<CLExtendedStepCountEntry> {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct deque<CLExtendedStepCountEntry, std::__1::allocator<CLExtendedStepCountEntry>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    struct CLExtendedStepCountEntry _field8;
    id _field9;
    struct unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client>> _field10;
};

struct CLWorkoutPredictorSourceFromNotifier<CLOdometerEntry> {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    struct CLOdometerEntry _field8;
    id _field9;
    struct unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client>> _field10;
};

struct CLWorkoutPredictorSourceFromNotifier<CLStepCountEntry> {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    struct CLStepCountEntry _field8;
    id _field9;
    struct unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client>> _field10;
};

struct CLWorkoutPredictorSourceFromNotifier<CLSwimEntry> {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct deque<CLSwimEntry, std::__1::allocator<CLSwimEntry>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    struct CLSwimEntry _field8;
    id _field9;
    struct unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client>> _field10;
};

struct CLWorkoutPredictorSources;

struct CLWorkoutPredictorSourcesImpl<CLWorkoutPredictorSourceFromNotifier<CLElevationChangeEntry>, CLWorkoutPredictorSourceFromNotifier<CLCatherineData>, CLWorkoutPredictorSourceFromNotifier<CLOdometerEntry>, CLWorkoutPredictorSourceFromNotifier<CLStepCountEntry>, CLWorkoutPredictorSourceFromNotifier<CLExtendedStepCountEntry>, CLWorkoutPredictorExternallyActivatedSource<CLWorkoutClassifier_Type::CLWorkoutClassifierResult>, CLWorkoutPredictorSourceBuffer<CLWorkoutClassifier_Type::CLWorkoutClassifierResult>, CLWorkoutPredictorExternallyActivatedSource<CLWorkoutPredictorTurnDetector::Turn>, CLWorkoutPredictorSourceFromNotifier<CLSwimEntry>, CLWorkoutPredictorSourceBuffer<CLWorkoutPredictorWatchPressure>, CLWorkoutPredictorSourceBuffer<CLExerciseMinuteData>> {
    CDUnknownFunctionPointerType *_field1;
    struct CLWorkoutPredictorSourceFromNotifier<CLElevationChangeEntry> _field2;
    struct CLWorkoutPredictorSourceFromNotifier<CLCatherineData> _field3;
    struct CLWorkoutPredictorSourceFromNotifier<CLOdometerEntry> _field4;
    struct CLWorkoutPredictorSourceFromNotifier<CLStepCountEntry> _field5;
    struct CLWorkoutPredictorSourceFromNotifier<CLExtendedStepCountEntry> _field6;
    struct CLWorkoutPredictorExternallyActivatedSource<CLWorkoutClassifier_Type::CLWorkoutClassifierResult> _field7;
    struct CLWorkoutPredictorSourceBuffer<CLWorkoutClassifier_Type::CLWorkoutClassifierResult> _field8;
    struct CLWorkoutPredictorExternallyActivatedSource<CLWorkoutPredictorTurnDetector::Turn> _field9;
    struct CLWorkoutPredictorSourceFromNotifier<CLSwimEntry> _field10;
    struct CLWorkoutPredictorSourceBuffer<CLWorkoutPredictorWatchPressure> _field11;
    struct CLWorkoutPredictorSourceBuffer<CLExerciseMinuteData> _field12;
};

struct CLWorkoutPredictorTier2Classifier;

struct CLWorkoutPredictorTurnDetector;

struct CLWorkoutPredictorWatchPressure {
    double _field1;
    unsigned short _field2;
    float _field3;
};

struct CLWorkoutSessionDetails {
    int _field1;
    double _field2;
};

struct CLWorkoutStopDetector;

struct CLWorkoutUpdate {
    double _field1;
    int _field2;
    int _field3;
};

struct CMActivePedStateEntry {
    double _field1;
    double _field2;
    unsigned char _field3;
    unsigned char _field4;
};

struct CMFilteredElevationStepHistory {
    struct CMFixedSizeQueue<CMElevationSample, 4> _field1;
    struct CMFixedSizeQueue<CMElevationSample, 5> _field2;
    struct CMFixedSizeQueue<CMStepCountSample, 7> _field3;
    _Bool _field4;
    _Bool _field5;
};

struct CMFixedSizeQueue<CMElevationSample, 4> {
    CDStruct_b91b6b9f _field1;
    unsigned int _field2;
    char _field3[16];
    struct CMQueueStorage<CMElevationSample, 4> _field4;
};

struct CMFixedSizeQueue<CMElevationSample, 5> {
    CDStruct_b91b6b9f _field1;
    unsigned int _field2;
    char _field3[16];
    struct CMQueueStorage<CMElevationSample, 5> _field4;
};

struct CMFixedSizeQueue<CMStepCountSample, 7> {
    CDStruct_b91b6b9f _field1;
    unsigned int _field2;
    char _field3[40];
    struct CMQueueStorage<CMStepCountSample, 7> _field4;
};

struct CMFixedSizeQueue<CMVector<float, 3>, 400> {
    CDStruct_b91b6b9f fHeadAndSize;
    unsigned int fCapacity;
    char fBuffer[12];
    struct CMQueueStorage<CMVector<float, 3>, 400> fStorage;
};

struct CMFixedSizeQueue<double, 2> {
    CDStruct_b91b6b9f fHeadAndSize;
    unsigned int fCapacity;
    char fBuffer[8];
    struct CMQueueStorage<double, 2> fStorage;
};

struct CMFixedSizeQueue<float, 400> {
    CDStruct_b91b6b9f fHeadAndSize;
    unsigned int fCapacity;
    char fBuffer[4];
    struct CMQueueStorage<float, 400> fStorage;
};

struct CMFixedSizeQueue<unsigned long long, 400> {
    CDStruct_b91b6b9f fHeadAndSize;
    unsigned int fCapacity;
    char fBuffer[8];
    struct CMQueueStorage<unsigned long long, 400> fStorage;
};

struct CMFixedSizeQueue<unsigned long long, 5> {
    CDStruct_b91b6b9f _field1;
    unsigned int _field2;
    char _field3[8];
    struct CMQueueStorage<unsigned long long, 5> _field4;
};

struct CMKFFilteredPressureSample {
    float _field1;
    double _field2;
    float _field3;
    float _field4;
    double _field5;
    float _field6;
};

struct CMOQuaternion {
    float elements[4];
};

struct CMOnlineMean<float> {
    float _field1;
    unsigned long long _field2;
};

struct CMQueueStorage<CMElevationSample, 4> {
    char _field1[48];
};

struct CMQueueStorage<CMElevationSample, 5> {
    char _field1[64];
};

struct CMQueueStorage<CMStepCountSample, 7> {
    char _field1[240];
};

struct CMQueueStorage<CMVector<float, 3>, 400> {
    char buffer[4788];
};

struct CMQueueStorage<double, 2> {
    char buffer[8];
};

struct CMQueueStorage<float, 400> {
    char buffer[1596];
};

struct CMQueueStorage<unsigned long long, 400> {
    char buffer[3192];
};

struct CMQueueStorage<unsigned long long, 5> {
    char _field1[32];
};

struct CMStrideCalRecorderDb {
    CDUnknownFunctionPointerType *_vptr$CLActivityRecorderDb;
    struct unique_ptr<CLSqliteDatabase, std::__1::default_delete<CLSqliteDatabase>> fDb;
    char *fName;
    struct BasicMutex fMutex;
    _Bool fFatalError;
    struct deque<CLStrideCalEntry, std::__1::allocator<CLStrideCalEntry>> fBuffer;
    int fInternalRecordCount;
    float fSampleInterval;
    int fPersistence;
    CDStruct_9878d8f4 fPrevEntry;
    int fMaxBufferSize;
    CLOSTransaction *fInMemoryTransaction;
    struct ClassCDataProtectionPolicy fProtectionPolicy;
    struct CLSqliteCachedStatement fSqlGetCount;
    struct CLSqliteCachedStatement fSqlGetAllAsc;
    struct CLSqliteCachedStatement fSqlGetPacebinDesc;
    struct CLSqliteCachedStatement fSqlGetSpeedRangeDesc;
    struct CLSqliteCachedStatement fSqlDeleteBefore;
    struct CLSqliteCachedStatement fSqlDeleteAfter;
    struct CLSqliteCachedStatement fSqlDeleteAll;
    struct CLSqliteCachedStatement fSqlInsert;
    struct CLSqliteCachedStatement fSqlShiftStartTimes;
    struct CLSqliteCachedStatement fSqlMostRecent;
    CLSilo *fFinishedInsertSilo;
    CDUnknownBlockType fFinishedInsertHandler;
};

struct CMVector<float, 2> {
    float _field1[2];
};

struct CMVector<float, 3> {
    float _field1[3];
};

struct CNTime {
    CDUnknownFunctionPointerType *_field1;
    struct CNTimeSpan _field2;
};

struct CNTimeSpan {
    CDUnknownFunctionPointerType *_field1;
    long long _field2;
    double _field3;
};

struct CalorimetryPauseEvent;

struct CatherineHealthKitData;

struct CdmaCell {
    int _field1;
    vector_3203cf93 _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    int _field10;
    int _field11;
    struct CLDaemonLocation _field12;
    int _field13;
    int _field14;
    int _field15;
    basic_string_90719d97 _field16;
    struct CLDaemonLocation _field17;
    int _field18;
    int _field19;
};

struct Cell {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
};

struct CellMetrics {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    _Bool _field5;
    double _field6;
};

struct ChoreaScore {
    double _field1;
    int _field2;
    float _field3;
    float _field4;
    int _field5;
};

struct ClassBDataProtectionPolicy {
    CDUnknownFunctionPointerType *_field1;
    void *_field2;
    struct function<bool (void *, bool)> _field3;
    struct BasicMutex _field4;
};

struct ClassCDataProtectionPolicy {
    CDUnknownFunctionPointerType *_vptr$BasicDataProtectionPolicy;
    void *fClient;
    struct function<bool (void *, bool)> fOnDataProtectionChange;
    struct BasicMutex fMutex;
};

struct ClefCalibration;

struct Client;

struct Clients {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    float _field5;
};

struct CoarseElevationChange;

struct Compass;

struct CompassAlignment;

struct CompassCalibration;

struct CompassCalibrationAttempt;

struct CompassConstraints;

struct CompassCorrection;

struct ComputedLocation {
    struct CLDaemonLocation _field1;
    unsigned int _field2;
};

struct ConstrainedIntegratorPose;

struct CoprocessorReplyGaitMetrics;

struct CourseConstraints;

struct CourseCorrection;

struct DaemonLocation {
    struct CLDaemonLocation _field1;
    struct CLDaemonLocationPrivate _field2;
};

struct DebounceParameters {
    struct duration<long long, std::__1::ratio<1, 1>> _field1;
    struct duration<long long, std::__1::ratio<1, 1>> _field2;
    struct duration<long long, std::__1::ratio<1, 1>> _field3;
    struct duration<long long, std::__1::ratio<1, 1>> _field4;
};

struct Delegate;

struct DenseFeatureDistribution<signed char, 24> {
    unsigned char _field1;
    char _field2[24];
    char _field3;
};

struct DenseFeatureDistribution<signed char, 34> {
    unsigned char _field1;
    char _field2[34];
    char _field3;
};

struct DetailedConnectionInfo {
    _Bool _field1;
    _Bool _field2;
    int _field3;
    int _field4;
    int _field5;
    _Bool _field6;
};

struct Device {
    double _field1;
    basic_string_90719d97 _field2;
    basic_string_90719d97 _field3;
    basic_string_90719d97 _field4;
    unsigned int _field5;
    int _field6;
    unsigned int _field7;
    unsigned int _field8;
    _Bool _field9;
};

struct DeviceLocationData;

struct DeviceMotion;

struct DeviceMotionAlwaysOn;

struct DeviceMotionCovariance;

struct DevicePose {
    _Bool _field1;
    struct QuaternionT<double> _field2;
    struct MatrixMxNT<3, 3, double> _field3;
    struct MatrixMxNT<4, 1, double> _field4;
    struct MatrixMxNT<3, 1, double> _field5;
    struct MatrixMxNT<6, 6, double> _field6;
};

struct DeviceTouchState {
    _Bool _field1;
    double _field2;
};

struct Diagnostics {
    unsigned int _field1;
    double _field2;
};

struct DirectionOfTravelAssistance {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
    double _field16;
    double _field17;
};

struct Dispatcher;

struct DoubleTap;

struct DownloadState {
    char *_field1;
    _Bool _field2;
    double _field3;
    struct unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload>> _field4;
};

struct EED2 {
    _Bool _field1;
    _Bool _field2;
    basic_string_90719d97 _field3;
    basic_string_90719d97 _field4;
    double _field5;
    double _field6;
    double _field7;
    basic_string_90719d97 _field8;
    struct vector<CLEmergencyController::LocationSettings::Emergency::AugmentedAction::EED2::PartnerInfo, std::__1::allocator<CLEmergencyController::LocationSettings::Emergency::AugmentedAction::EED2::PartnerInfo>> _field9;
};

struct Elevation;

struct ElevationChange;

struct ElevationHistory {
    struct deque<CL::Wifi1::Types::Elevation, std::__1::allocator<CL::Wifi1::Types::Elevation>> _field1;
};

struct EmergencyState;

struct EnhancedDeviceMotion;

struct Estimates {
    float _field1;
    float _field2[6];
};

struct Event {
    unsigned long long _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    unsigned int _field9;
    unsigned int _field10;
    float _field11;
    float _field12[3];
    float _field13[3];
    float _field14[4];
    _Bool _field15;
};

struct External;

struct ExternalLocationData {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct FacePose;

struct FairPlayHWInfo_ {
    unsigned int IDLength;
    unsigned char ID[20];
};

struct FallCancelReason {
    double _field1;
    double _field2;
    unsigned long long _field3;
    unsigned int _field4;
    unsigned long long _field5;
};

struct FallDetectionDetector;

struct FallDetectionGyroControllerReplay;

struct FallDetectionReplay;

struct FallDetectionStateMachine;

struct FallFalsePositiveSuppressionFeatures;

struct FallModel {
    float fRatioMaxAbsX[17];
    float fRatioMaxAbsY[17];
    float fRatioMaxAbsZ[17];
    float fRatioMaxJerkVM[67];
    float fRatioMinInertialZ[21];
    float fRatioAccelPathLength[10];
    float fRatioMaxAngleChangePreimpact[16];
    float fRatioMaxAngleChangePostimpact[16];
    struct LikelihoodRatioInfo fLikelihoodRatioInfo[8];
};

struct FallSnippet;

struct FallStats;

struct FallStatsConfig {
    unsigned long long _field1;
    unsigned char _field2;
    unsigned char _field3;
    unsigned char _field4;
    unsigned char _field5;
    unsigned char _field6;
    unsigned char _field7;
};

struct FalseStepDetectorState {
    unsigned int accelPoseXHigh:1;
    unsigned int accelVarXYZLow:1;
    unsigned int gyroNumSamplesSufficient:1;
    unsigned int gyroVarXHigh:1;
    unsigned int consecutiveRequirement:1;
    unsigned int isVehicularLowConfidence:1;
    unsigned int isVehicularHighConfidence:1;
    unsigned int consistentStepsProtection:1;
};

struct FeatureDistribution<CMSPUFall_Types::DenseFeatureDistribution<signed char, 24>> {
    struct DenseFeatureDistribution<signed char, 24> _field1;
    double _field2;
    double _field3;
};

struct FeatureDistribution<CMSPUFall_Types::DenseFeatureDistribution<signed char, 34>> {
    struct DenseFeatureDistribution<signed char, 34> _field1;
    double _field2;
    double _field3;
};

struct FeatureDistribution<CMSPUFall_Types::SparseFeatureDistribution<short, 50, 32768>> {
    struct SparseFeatureDistribution<short, 50, 32768> _field1;
    double _field2;
    double _field3;
};

struct Fence {
    basic_string_90719d97 _field1;
    basic_string_90719d97 _field2;
    basic_string_90719d97 _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    int _field12;
    int _field13;
    int _field14;
    double _field15;
    unsigned long long _field16;
    int _field17;
    int _field18;
    _Bool _field19;
    struct vector<CLClientLocationCoordinate, std::__1::allocator<CLClientLocationCoordinate>> _field20;
};

struct FirstOrderFilter<double> {
    int _field1;
    double _field2;
    double _field3;
};

struct FrequencyResponse;

struct GaitCycleSegment;

struct GaitCycleSegmentationState;

struct GaitMetrics {
    unsigned char _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    float _field4;
    float _field5;
    float _field6;
    float _field7;
    float _field8;
    unsigned char _field9;
    unsigned char _field10;
    unsigned char _field11;
    unsigned char _field12;
    unsigned char _field13;
    unsigned char _field14;
    unsigned char _field15;
};

struct GaitMetricsRecorderDb;

struct GeomagneticData;

struct GgaRmcInfo {
    int _field1;
    _Bool _field2;
};

struct GpsSession;

struct GravityConstraints;

struct GravityCorrection;

struct Gyro;

struct GyroBiasConstraints;

struct GyroBiasCorrection;

struct GyroBiasFit;

struct GyroCalibrationDataFactory;

struct GyroCalibrationDataNonlinearNonFactory;

struct GyroCalibrationSample;

struct GyroCalibrationSampleNonlinear;

struct GyroCompass;

struct GyroDt;

struct GyroFactoryCalibrationData;

struct GyroGps;

struct GyroOscarEmu;

struct GyroTemperature;

struct HELOAWDData {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    unsigned int _field5;
    struct CLDaemonLocation _field6;
    struct CLDaemonLocation _field7;
    struct CLDaemonLocation _field8;
    struct CLDaemonLocation _field9;
};

struct HKWorkoutsDelegate;

struct HRSample;

struct HarvestData {
    double _field1;
    basic_string_90719d97 _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    basic_string_90719d97 _field7;
    basic_string_90719d97 _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    struct CLMotionActivity _field12;
    struct CLMotionActivity _field13;
    struct CLMotionActivity _field14;
};

struct HeartbeatMetrics {
    int _field1;
    struct map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int>>> _field2;
    struct map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int>>> _field3;
    struct map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int>>> _field4;
    struct map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int>>> _field5;
    struct map<std::__1::basic_string<char>, std::__1::vector<int, std::__1::allocator<int>>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::vector<int, std::__1::allocator<int>>>>> _field6;
    struct map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int>>> _field7;
    int _field8;
    int _field9;
    int _field10;
    int _field11;
    int _field12;
    double _field13;
    double _field14;
    double _field15;
};

struct HighFrequencyFeatures {
    struct MagnitudeFeatures fMagnitudeFeatures;
    struct MagnitudeFeatures fExtrapolatedMagnitudeFeatures;
    struct ZeroCrossingFeatures fZeroCrossingFeatures;
    struct JerkFeatures fJerkFeatures;
};

struct HomeKitDevice;

struct HostedNetwork {
    basic_string_90719d97 _field1;
    int _field2;
    unsigned int _field3;
    double _field4;
};

struct IExternal;

struct ILocalizerDelegate;

struct ILogicDelegate;

struct IMPara {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    double _field4;
    double _field5;
};

struct IM_AllSources {
    struct IMPara _field1;
    struct IMPara _field2;
    struct IMPara _field3;
    int _field4;
};

struct INotifier {
    CDUnknownFunctionPointerType *_field1;
};

struct IONotificationPort;

struct Impact {
    unsigned short fSeq;
    unsigned char fTrialCount;
    char fCrown;
    unsigned long long fNow;
    unsigned char fAge;
    unsigned char fState;
    char fFallType;
    _Bool fIsFall;
    _Bool fIsNearFall;
    unsigned char fSimulated;
    unsigned long long fTimestamp;
    struct HighFrequencyFeatures fHighFrequencyFeatures;
    unsigned long long fPeakTimestamp;
    float fAccelPathLength;
    float fMinInertialZ;
    float fMinInertialZHighFreq;
    float fAngleChangePreImpact;
    float fAngleChangePostImpact;
    float fMaxAngleChangePreImpact;
    float fMaxAngleChangePostImpact;
    float fSumDeltaAngles;
    float fPosteriorRatio;
    float fPoseAtImpact;
    float fTiltAngle;
    float fSwingAngle;
    float fAccelPathLengthWithPeak;
    float fPathLengthHarmonicMean;
    float fPathLengthDecorrelation;
    float fPathLengthDelaySpread;
};

struct ImpactData {
    double _field1;
    double _field2;
    unsigned char _field3;
    struct {
        float _field1[4];
        union {
            unsigned long long _field1;
            unsigned long long _field2;
        } _field2;
    } _field4;
};

struct ImpactEvent {
    struct Impact fImpact;
    unsigned char fResponse;
    unsigned char fResolution;
    double fAbsoluteTimestamp;
    double fTimestamp;
};

struct ImpactStreamData {
    struct Impact _field1;
    unsigned char _field2;
    unsigned char _field3;
    double _field4;
    double _field5;
    struct vector<unsigned char, std::__1::allocator<unsigned char>> _field6;
};

struct ImproveAccuracyNotification;

struct InEarAdditionalState;

struct InEarBaseline;

struct InEarBaselining;

struct InEarConstraints;

struct InEarOpenLid;

struct InEarOptical;

struct InEarSession;

struct InEarTransition;

struct InEarTransitionEntry;

struct InterLocationRequestState {
    int _field1;
    char _field2;
    char _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
};

struct InterfaceTelemeter {
    struct array<CLRavenController::InterfaceTelemeter::PerMessageData, 2> _field1;
    double _field2;
};

struct InterpolatedAccessoryAccel;

struct IntersiloNSCodingData;

struct Item {
    CDUnknownFunctionPointerType *_field1;
    struct unique_ptr<CMMsl::Accel, std::__1::default_delete<CMMsl::Accel>> _field2;
    struct unique_ptr<CMMsl::Accel800, std::__1::default_delete<CMMsl::Accel800>> _field3;
    struct unique_ptr<CMMsl::AccelBatch, std::__1::default_delete<CMMsl::AccelBatch>> _field4;
    struct unique_ptr<CMMsl::AccelGesture, std::__1::default_delete<CMMsl::AccelGesture>> _field5;
    struct unique_ptr<CMMsl::AccelGps, std::__1::default_delete<CMMsl::AccelGps>> _field6;
    struct unique_ptr<CMMsl::AccelOscarEmu, std::__1::default_delete<CMMsl::AccelOscarEmu>> _field7;
    struct unique_ptr<CMMsl::AccelerometerPace, std::__1::default_delete<CMMsl::AccelerometerPace>> _field8;
    struct unique_ptr<CMMsl::AccessoryAccel, std::__1::default_delete<CMMsl::AccessoryAccel>> _field9;
    struct unique_ptr<CMMsl::AccessoryAccelConfig, std::__1::default_delete<CMMsl::AccessoryAccelConfig>> _field10;
    struct unique_ptr<CMMsl::AccessoryConfig, std::__1::default_delete<CMMsl::AccessoryConfig>> _field11;
    struct unique_ptr<CMMsl::AccessoryDeviceMotion, std::__1::default_delete<CMMsl::AccessoryDeviceMotion>> _field12;
    struct unique_ptr<CMMsl::AccessoryDeviceMotionConfig, std::__1::default_delete<CMMsl::AccessoryDeviceMotionConfig>> _field13;
    struct unique_ptr<CMMsl::AccessoryGyro, std::__1::default_delete<CMMsl::AccessoryGyro>> _field14;
    struct unique_ptr<CMMsl::AccessoryGyroCachedBias, std::__1::default_delete<CMMsl::AccessoryGyroCachedBias>> _field15;
    struct unique_ptr<CMMsl::AccessoryGyroConfig, std::__1::default_delete<CMMsl::AccessoryGyroConfig>> _field16;
    struct unique_ptr<CMMsl::AccessoryGyroGYTT, std::__1::default_delete<CMMsl::AccessoryGyroGYTT>> _field17;
    struct unique_ptr<CMMsl::AccessoryProx, std::__1::default_delete<CMMsl::AccessoryProx>> _field18;
    struct unique_ptr<CMMsl::AccessoryProxSensorDrop, std::__1::default_delete<CMMsl::AccessoryProxSensorDrop>> _field19;
    struct unique_ptr<CMMsl::AccessoryProxTempComp, std::__1::default_delete<CMMsl::AccessoryProxTempComp>> _field20;
    struct unique_ptr<CMMsl::AccessoryProximityConfig, std::__1::default_delete<CMMsl::AccessoryProximityConfig>> _field21;
    struct unique_ptr<CMMsl::AccessoryWake, std::__1::default_delete<CMMsl::AccessoryWake>> _field22;
    struct unique_ptr<CMMsl::AccessoryWakeDebug, std::__1::default_delete<CMMsl::AccessoryWakeDebug>> _field23;
    struct unique_ptr<CMMsl::AirpodEvent, std::__1::default_delete<CMMsl::AirpodEvent>> _field24;
    struct unique_ptr<CMMsl::ALSData, std::__1::default_delete<CMMsl::ALSData>> _field25;
    struct unique_ptr<CMMsl::AnchorCorrection, std::__1::default_delete<CMMsl::AnchorCorrection>> _field26;
    struct unique_ptr<CMMsl::ARSessionState, std::__1::default_delete<CMMsl::ARSessionState>> _field27;
    struct unique_ptr<CMMsl::AudioAccessoryDeviceMotion, std::__1::default_delete<CMMsl::AudioAccessoryDeviceMotion>> _field28;
    struct unique_ptr<CMMsl::AuxiliaryDeviceMotion, std::__1::default_delete<CMMsl::AuxiliaryDeviceMotion>> _field29;
    struct unique_ptr<CMMsl::BTConnection, std::__1::default_delete<CMMsl::BTConnection>> _field30;
    struct unique_ptr<CMMsl::BasebandSpeed, std::__1::default_delete<CMMsl::BasebandSpeed>> _field31;
    struct unique_ptr<CMMsl::BioMotionPose, std::__1::default_delete<CMMsl::BioMotionPose>> _field32;
    struct unique_ptr<CMMsl::BleedToZeroCorrection, std::__1::default_delete<CMMsl::BleedToZeroCorrection>> _field33;
    struct unique_ptr<CMMsl::BodyMetrics, std::__1::default_delete<CMMsl::BodyMetrics>> _field34;
    struct unique_ptr<CMMsl::BraveHeartAccel, std::__1::default_delete<CMMsl::BraveHeartAccel>> _field35;
    struct unique_ptr<CMMsl::BraveHeartDeviceMotion, std::__1::default_delete<CMMsl::BraveHeartDeviceMotion>> _field36;
    struct unique_ptr<CMMsl::BraveHeartNatalieData, std::__1::default_delete<CMMsl::BraveHeartNatalieData>> _field37;
    struct unique_ptr<CMMsl::BraveHeartVO2MaxInput, std::__1::default_delete<CMMsl::BraveHeartVO2MaxInput>> _field38;
    struct unique_ptr<CMMsl::BraveHeartWorkoutEvent, std::__1::default_delete<CMMsl::BraveHeartWorkoutEvent>> _field39;
    struct unique_ptr<CMMsl::CalorimetryPauseEvent, std::__1::default_delete<CMMsl::CalorimetryPauseEvent>> _field40;
    struct unique_ptr<CMMsl::CatherineHealthKitData, std::__1::default_delete<CMMsl::CatherineHealthKitData>> _field41;
    double _field42;
    struct unique_ptr<CMMsl::ClefCalibration, std::__1::default_delete<CMMsl::ClefCalibration>> _field43;
    struct unique_ptr<CMMsl::CoarseElevationChange, std::__1::default_delete<CMMsl::CoarseElevationChange>> _field44;
    struct unique_ptr<CMMsl::Compass, std::__1::default_delete<CMMsl::Compass>> _field45;
    struct unique_ptr<CMMsl::CompassAlignment, std::__1::default_delete<CMMsl::CompassAlignment>> _field46;
    struct unique_ptr<CMMsl::CompassCalibration, std::__1::default_delete<CMMsl::CompassCalibration>> _field47;
    struct unique_ptr<CMMsl::CompassCalibrationAttempt, std::__1::default_delete<CMMsl::CompassCalibrationAttempt>> _field48;
    struct unique_ptr<CMMsl::CompassConstraints, std::__1::default_delete<CMMsl::CompassConstraints>> _field49;
    struct unique_ptr<CMMsl::CompassCorrection, std::__1::default_delete<CMMsl::CompassCorrection>> _field50;
    struct unique_ptr<CMMsl::ConstrainedIntegratorPose, std::__1::default_delete<CMMsl::ConstrainedIntegratorPose>> _field51;
    struct unique_ptr<CMMsl::CoprocessorReplyGaitMetrics, std::__1::default_delete<CMMsl::CoprocessorReplyGaitMetrics>> _field52;
    struct unique_ptr<CMMsl::CourseConstraints, std::__1::default_delete<CMMsl::CourseConstraints>> _field53;
    struct unique_ptr<CMMsl::CourseCorrection, std::__1::default_delete<CMMsl::CourseCorrection>> _field54;
    struct unique_ptr<CMMsl::DeviceMotion, std::__1::default_delete<CMMsl::DeviceMotion>> _field55;
    struct unique_ptr<CMMsl::DeviceMotionAlwaysOn, std::__1::default_delete<CMMsl::DeviceMotionAlwaysOn>> _field56;
    struct unique_ptr<CMMsl::DeviceMotionCovariance, std::__1::default_delete<CMMsl::DeviceMotionCovariance>> _field57;
    struct unique_ptr<CMMsl::DoubleTap, std::__1::default_delete<CMMsl::DoubleTap>> _field58;
    struct unique_ptr<CMMsl::ElevationChange, std::__1::default_delete<CMMsl::ElevationChange>> _field59;
    struct unique_ptr<CMMsl::EmergencyState, std::__1::default_delete<CMMsl::EmergencyState>> _field60;
    struct unique_ptr<CMMsl::EnhancedDeviceMotion, std::__1::default_delete<CMMsl::EnhancedDeviceMotion>> _field61;
    struct unique_ptr<CMMsl::FacePose, std::__1::default_delete<CMMsl::FacePose>> _field62;
    struct unique_ptr<CMMsl::FallDetectionDetector, std::__1::default_delete<CMMsl::FallDetectionDetector>> _field63;
    struct unique_ptr<CMMsl::FallDetectionGyroControllerReplay, std::__1::default_delete<CMMsl::FallDetectionGyroControllerReplay>> _field64;
    struct unique_ptr<CMMsl::FallDetectionReplay, std::__1::default_delete<CMMsl::FallDetectionReplay>> _field65;
    struct unique_ptr<CMMsl::FallDetectionStateMachine, std::__1::default_delete<CMMsl::FallDetectionStateMachine>> _field66;
    struct unique_ptr<CMMsl::FallFalsePositiveSuppressionFeatures, std::__1::default_delete<CMMsl::FallFalsePositiveSuppressionFeatures>> _field67;
    struct unique_ptr<CMMsl::FallSnippet, std::__1::default_delete<CMMsl::FallSnippet>> _field68;
    struct unique_ptr<CMMsl::FallStats, std::__1::default_delete<CMMsl::FallStats>> _field69;
    struct unique_ptr<CMMsl::FrequencyResponse, std::__1::default_delete<CMMsl::FrequencyResponse>> _field70;
    struct unique_ptr<CMMsl::GaitCycleSegment, std::__1::default_delete<CMMsl::GaitCycleSegment>> _field71;
    struct unique_ptr<CMMsl::GaitCycleSegmentationState, std::__1::default_delete<CMMsl::GaitCycleSegmentationState>> _field72;
    struct unique_ptr<CMMsl::GeomagneticData, std::__1::default_delete<CMMsl::GeomagneticData>> _field73;
    struct unique_ptr<CMMsl::GravityConstraints, std::__1::default_delete<CMMsl::GravityConstraints>> _field74;
    struct unique_ptr<CMMsl::GravityCorrection, std::__1::default_delete<CMMsl::GravityCorrection>> _field75;
    struct unique_ptr<CMMsl::Gyro, std::__1::default_delete<CMMsl::Gyro>> _field76;
    struct unique_ptr<CMMsl::GyroBiasAndVariance, std::__1::default_delete<CMMsl::GyroBiasAndVariance>> _field77;
    struct unique_ptr<CMMsl::GyroBiasConstraints, std::__1::default_delete<CMMsl::GyroBiasConstraints>> _field78;
    struct unique_ptr<CMMsl::GyroBiasCorrection, std::__1::default_delete<CMMsl::GyroBiasCorrection>> _field79;
    struct unique_ptr<CMMsl::GyroBiasFit, std::__1::default_delete<CMMsl::GyroBiasFit>> _field80;
    struct unique_ptr<CMMsl::GyroCalibrationDataFactory, std::__1::default_delete<CMMsl::GyroCalibrationDataFactory>> _field81;
    struct unique_ptr<CMMsl::GyroCalibrationDataNonlinearNonFactory, std::__1::default_delete<CMMsl::GyroCalibrationDataNonlinearNonFactory>> _field82;
    struct unique_ptr<CMMsl::GyroCalibrationSample, std::__1::default_delete<CMMsl::GyroCalibrationSample>> _field83;
    struct unique_ptr<CMMsl::GyroCalibrationSampleNonlinear, std::__1::default_delete<CMMsl::GyroCalibrationSampleNonlinear>> _field84;
    struct unique_ptr<CMMsl::GyroCompass, std::__1::default_delete<CMMsl::GyroCompass>> _field85;
    struct unique_ptr<CMMsl::GyroDt, std::__1::default_delete<CMMsl::GyroDt>> _field86;
    struct unique_ptr<CMMsl::GyroFactoryCalibrationData, std::__1::default_delete<CMMsl::GyroFactoryCalibrationData>> _field87;
    struct unique_ptr<CMMsl::GyroGps, std::__1::default_delete<CMMsl::GyroGps>> _field88;
    struct unique_ptr<CMMsl::GyroOscarEmu, std::__1::default_delete<CMMsl::GyroOscarEmu>> _field89;
    struct unique_ptr<CMMsl::GyroTemperature, std::__1::default_delete<CMMsl::GyroTemperature>> _field90;
    struct unique_ptr<CMMsl::InEarAdditionalState, std::__1::default_delete<CMMsl::InEarAdditionalState>> _field91;
    struct unique_ptr<CMMsl::InEarBaseline, std::__1::default_delete<CMMsl::InEarBaseline>> _field92;
    struct unique_ptr<CMMsl::InEarBaselining, std::__1::default_delete<CMMsl::InEarBaselining>> _field93;
    struct unique_ptr<CMMsl::InEarConstraints, std::__1::default_delete<CMMsl::InEarConstraints>> _field94;
    struct unique_ptr<CMMsl::InEarOpenLid, std::__1::default_delete<CMMsl::InEarOpenLid>> _field95;
    struct unique_ptr<CMMsl::InEarOptical, std::__1::default_delete<CMMsl::InEarOptical>> _field96;
    struct unique_ptr<CMMsl::InEarSession, std::__1::default_delete<CMMsl::InEarSession>> _field97;
    struct unique_ptr<CMMsl::InEarTransition, std::__1::default_delete<CMMsl::InEarTransition>> _field98;
    struct unique_ptr<CMMsl::InEarTransitionEntry, std::__1::default_delete<CMMsl::InEarTransitionEntry>> _field99;
    struct unique_ptr<CMMsl::InterpolatedAccessoryAccel, std::__1::default_delete<CMMsl::InterpolatedAccessoryAccel>> _field100;
    struct unique_ptr<CMMsl::IntersiloNSCodingData, std::__1::default_delete<CMMsl::IntersiloNSCodingData>> _field101;
    struct unique_ptr<CMMsl::JointLinkModelPose, std::__1::default_delete<CMMsl::JointLinkModelPose>> _field102;
    struct unique_ptr<CMMsl::KappaTrigger, std::__1::default_delete<CMMsl::KappaTrigger>> _field103;
    struct unique_ptr<CMMsl::LocationOscarEmu, std::__1::default_delete<CMMsl::LocationOscarEmu>> _field104;
    struct unique_ptr<CMMsl::LSLHeadingEstimation, std::__1::default_delete<CMMsl::LSLHeadingEstimation>> _field105;
    struct unique_ptr<CMMsl::Magnetometer, std::__1::default_delete<CMMsl::Magnetometer>> _field106;
    struct unique_ptr<CMMsl::MetsInfo, std::__1::default_delete<CMMsl::MetsInfo>> _field107;
    struct unique_ptr<CMMsl::MobilityBoutMetrics, std::__1::default_delete<CMMsl::MobilityBoutMetrics>> _field108;
    struct unique_ptr<CMMsl::MotionActivity, std::__1::default_delete<CMMsl::MotionActivity>> _field109;
    struct unique_ptr<CMMsl::MotionGPSLocation, std::__1::default_delete<CMMsl::MotionGPSLocation>> _field110;
    struct unique_ptr<CMMsl::MotionHint, std::__1::default_delete<CMMsl::MotionHint>> _field111;
    struct unique_ptr<CMMsl::MotionLocation, std::__1::default_delete<CMMsl::MotionLocation>> _field112;
    struct unique_ptr<CMMsl::MotionLoiData, std::__1::default_delete<CMMsl::MotionLoiData>> _field113;
    struct unique_ptr<CMMsl::MotionStateUpdate, std::__1::default_delete<CMMsl::MotionStateUpdate>> _field114;
    struct unique_ptr<CMMsl::MotionWifiAssociation, std::__1::default_delete<CMMsl::MotionWifiAssociation>> _field115;
    struct unique_ptr<CMMsl::MotionWifiLocation, std::__1::default_delete<CMMsl::MotionWifiLocation>> _field116;
    struct unique_ptr<CMMsl::MovementStats, std::__1::default_delete<CMMsl::MovementStats>> _field117;
    struct unique_ptr<CMMsl::MovementStatsGravityProjection, std::__1::default_delete<CMMsl::MovementStatsGravityProjection>> _field118;
    struct unique_ptr<CMMsl::MovementStatsSignal, std::__1::default_delete<CMMsl::MovementStatsSignal>> _field119;
    struct unique_ptr<CMMsl::NatalieData, std::__1::default_delete<CMMsl::NatalieData>> _field120;
    struct unique_ptr<CMMsl::NonlinearBiasFit, std::__1::default_delete<CMMsl::NonlinearBiasFit>> _field121;
    struct unique_ptr<CMMsl::Odometer, std::__1::default_delete<CMMsl::Odometer>> _field122;
    struct unique_ptr<CMMsl::OdometerWithAltitude, std::__1::default_delete<CMMsl::OdometerWithAltitude>> _field123;
    struct unique_ptr<CMMsl::OnsetHeartRateData, std::__1::default_delete<CMMsl::OnsetHeartRateData>> _field124;
    struct unique_ptr<CMMsl::PearlAttitude, std::__1::default_delete<CMMsl::PearlAttitude>> _field125;
    struct unique_ptr<CMMsl::PredictedRelativeDeviceMotion, std::__1::default_delete<CMMsl::PredictedRelativeDeviceMotion>> _field126;
    struct unique_ptr<CMMsl::Pressure, std::__1::default_delete<CMMsl::Pressure>> _field127;
    struct unique_ptr<CMMsl::PressureFiltered, std::__1::default_delete<CMMsl::PressureFiltered>> _field128;
    struct unique_ptr<CMMsl::PressureFilteredNoTemperature, std::__1::default_delete<CMMsl::PressureFilteredNoTemperature>> _field129;
    struct unique_ptr<CMMsl::PressureGps, std::__1::default_delete<CMMsl::PressureGps>> _field130;
    struct unique_ptr<CMMsl::PressureOscarEmu, std::__1::default_delete<CMMsl::PressureOscarEmu>> _field131;
    struct unique_ptr<CMMsl::Prox, std::__1::default_delete<CMMsl::Prox>> _field132;
    struct unique_ptr<CMMsl::RelDMInSystemConfig, std::__1::default_delete<CMMsl::RelDMInSystemConfig>> _field133;
    struct unique_ptr<CMMsl::RelativeDeviceMotionComplexTransition, std::__1::default_delete<CMMsl::RelativeDeviceMotionComplexTransition>> _field134;
    struct unique_ptr<CMMsl::RelativeDeviceMotionCorrelatedMotion, std::__1::default_delete<CMMsl::RelativeDeviceMotionCorrelatedMotion>> _field135;
    struct unique_ptr<CMMsl::RelativeDeviceMotionInternal, std::__1::default_delete<CMMsl::RelativeDeviceMotionInternal>> _field136;
    struct unique_ptr<CMMsl::RelativeGravityConstraints, std::__1::default_delete<CMMsl::RelativeGravityConstraints>> _field137;
    struct unique_ptr<CMMsl::RelativeGravityCorrection, std::__1::default_delete<CMMsl::RelativeGravityCorrection>> _field138;
    struct unique_ptr<CMMsl::RotationRate, std::__1::default_delete<CMMsl::RotationRate>> _field139;
    struct unique_ptr<CMMsl::SessionOverride, std::__1::default_delete<CMMsl::SessionOverride>> _field140;
    struct unique_ptr<CMMsl::SignalEnvironment, std::__1::default_delete<CMMsl::SignalEnvironment>> _field141;
    struct unique_ptr<CMMsl::SoundPressureLevel, std::__1::default_delete<CMMsl::SoundPressureLevel>> _field142;
    struct unique_ptr<CMMsl::SPUPlaybackExampleDeviceMotion, std::__1::default_delete<CMMsl::SPUPlaybackExampleDeviceMotion>> _field143;
    struct unique_ptr<CMMsl::SPUPlaybackExampleMotionStateUpdate, std::__1::default_delete<CMMsl::SPUPlaybackExampleMotionStateUpdate>> _field144;
    struct unique_ptr<CMMsl::StepCadenceToStrideLengthBin, std::__1::default_delete<CMMsl::StepCadenceToStrideLengthBin>> _field145;
    struct unique_ptr<CMMsl::StepCountEntry, std::__1::default_delete<CMMsl::StepCountEntry>> _field146;
    struct unique_ptr<CMMsl::StreamingHeartRateData, std::__1::default_delete<CMMsl::StreamingHeartRateData>> _field147;
    struct unique_ptr<CMMsl::StrideCalBin, std::__1::default_delete<CMMsl::StrideCalBin>> _field148;
    struct unique_ptr<CMMsl::TapAccept, std::__1::default_delete<CMMsl::TapAccept>> _field149;
    struct unique_ptr<CMMsl::TapDetect, std::__1::default_delete<CMMsl::TapDetect>> _field150;
    struct unique_ptr<CMMsl::TempestPoCAuxiliaryDeviceMotion, std::__1::default_delete<CMMsl::TempestPoCAuxiliaryDeviceMotion>> _field151;
    struct unique_ptr<CMMsl::TempestPoCListenerOrientation, std::__1::default_delete<CMMsl::TempestPoCListenerOrientation>> _field152;
    struct unique_ptr<CMMsl::TouchOscarEmu, std::__1::default_delete<CMMsl::TouchOscarEmu>> _field153;
    struct unique_ptr<CMMsl::UserStudyEvent, std::__1::default_delete<CMMsl::UserStudyEvent>> _field154;
    struct unique_ptr<CMMsl::VibrationEvent, std::__1::default_delete<CMMsl::VibrationEvent>> _field155;
    struct unique_ptr<CMMsl::VIOEstimation, std::__1::default_delete<CMMsl::VIOEstimation>> _field156;
    struct unique_ptr<CMMsl::VIOPose, std::__1::default_delete<CMMsl::VIOPose>> _field157;
    struct unique_ptr<CMMsl::VIOReplayPose, std::__1::default_delete<CMMsl::VIOReplayPose>> _field158;
    struct unique_ptr<CMMsl::VisionCompassBias, std::__1::default_delete<CMMsl::VisionCompassBias>> _field159;
    struct unique_ptr<CMMsl::VisualLocalization, std::__1::default_delete<CMMsl::VisualLocalization>> _field160;
    struct unique_ptr<CMMsl::VisualLocalizationAttitudeConstraints, std::__1::default_delete<CMMsl::VisualLocalizationAttitudeConstraints>> _field161;
    struct unique_ptr<CMMsl::VisualLocalizationAttitudeCorrection, std::__1::default_delete<CMMsl::VisualLocalizationAttitudeCorrection>> _field162;
    struct unique_ptr<CMMsl::VO2MaxInput, std::__1::default_delete<CMMsl::VO2MaxInput>> _field163;
    struct unique_ptr<CMMsl::WalkingDetectionResult, std::__1::default_delete<CMMsl::WalkingDetectionResult>> _field164;
    struct unique_ptr<CMMsl::WatchOnWristState, std::__1::default_delete<CMMsl::WatchOnWristState>> _field165;
    struct unique_ptr<CMMsl::WatchOrientationSettings, std::__1::default_delete<CMMsl::WatchOrientationSettings>> _field166;
    struct unique_ptr<CMMsl::WifiScanResults, std::__1::default_delete<CMMsl::WifiScanResults>> _field167;
    struct unique_ptr<CMMsl::WorkoutEvent, std::__1::default_delete<CMMsl::WorkoutEvent>> _field168;
    struct unique_ptr<CMMsl::WorkoutRecorderALSData, std::__1::default_delete<CMMsl::WorkoutRecorderALSData>> _field169;
    struct unique_ptr<CMMsl::WorkoutRecorderAccel, std::__1::default_delete<CMMsl::WorkoutRecorderAccel>> _field170;
    struct unique_ptr<CMMsl::WorkoutRecorderAccel800, std::__1::default_delete<CMMsl::WorkoutRecorderAccel800>> _field171;
    struct unique_ptr<CMMsl::WorkoutRecorderBodyMetrics, std::__1::default_delete<CMMsl::WorkoutRecorderBodyMetrics>> _field172;
    struct unique_ptr<CMMsl::WorkoutRecorderElevation, std::__1::default_delete<CMMsl::WorkoutRecorderElevation>> _field173;
    struct unique_ptr<CMMsl::WorkoutRecorderHealthKitInfo, std::__1::default_delete<CMMsl::WorkoutRecorderHealthKitInfo>> _field174;
    struct unique_ptr<CMMsl::WorkoutRecorderHeartRate, std::__1::default_delete<CMMsl::WorkoutRecorderHeartRate>> _field175;
    struct unique_ptr<CMMsl::WorkoutRecorderOdometer, std::__1::default_delete<CMMsl::WorkoutRecorderOdometer>> _field176;
    struct unique_ptr<CMMsl::WorkoutRecorderPressure, std::__1::default_delete<CMMsl::WorkoutRecorderPressure>> _field177;
    struct unique_ptr<CMMsl::WorkoutRecorderRotationRate, std::__1::default_delete<CMMsl::WorkoutRecorderRotationRate>> _field178;
    struct unique_ptr<CMMsl::WorkoutRecorderWatchOrientationSettings, std::__1::default_delete<CMMsl::WorkoutRecorderWatchOrientationSettings>> _field179;
    struct unique_ptr<CMMsl::WorkoutRecorderWifiScanResults, std::__1::default_delete<CMMsl::WorkoutRecorderWifiScanResults>> _field180;
    struct unique_ptr<CMMsl::WorkoutRecorderWorkoutEvent, std::__1::default_delete<CMMsl::WorkoutRecorderWorkoutEvent>> _field181;
    struct unique_ptr<CMMsl::ZeroVelocityCorrection, std::__1::default_delete<CMMsl::ZeroVelocityCorrection>> _field182;
    struct {
        unsigned int :1;
    } _field183;
};

struct JerkFeatures {
    float fJerkVectorMagMax;
    float fXJerkScalarMagMax;
    float fYJerkScalarMagMax;
    float fZJerkScalarMagMax;
};

struct JointLinkModelPose;

struct KalmanParameters {
    CDUnknownFunctionPointerType *_field1;
    struct KalmanTuningInfo _field2;
    vector_b67dfe3a _field3;
    vector_b67dfe3a _field4;
    vector_b67dfe3a _field5;
    vector_b67dfe3a _field6;
    vector_b67dfe3a _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    double _field15;
    _Bool _field16;
    _Bool _field17;
    double _field18;
    struct CLDaemonLocation _field19;
    struct CLDaemonLocation _field20;
    _Bool _field21;
    _Bool _field22;
    int _field23;
    struct altFilterData _field24;
    _Bool _field25;
    struct list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation>> _field26;
};

struct KalmanTuningInfo {
    CDUnknownFunctionPointerType *_field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    _Bool _field6;
    float _field7;
};

struct KappaConfig {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
};

struct KappaSensorDataAccel {
    float _field1;
    float _field2;
    float _field3;
    unsigned long long _field4;
};

struct KappaSensorDataDeviceMotion {
    float _field1[4];
    float _field2[3];
    unsigned long long _field3;
};

struct KappaSensorDataFastAccel {
    float _field1;
    float _field2;
    float _field3;
    unsigned long long _field4;
};

struct KappaSensorDataPressure {
    float _field1;
    float _field2;
    unsigned long long _field3;
};

struct KappaTrigger;

struct LPPRel13MeasSettings {
    unsigned int _field1;
    int _field2;
    unsigned int _field3;
};

struct LSLHeadingEstimation;

struct LikelihoodRatioInfo {
    float firstBinEdge;
    float binSize;
    unsigned char binNum;
};

struct Listener {
    void *_field1;
    id _field2;
    CDUnknownFunctionPointerType _field3;
    CDUnknownFunctionPointerType _field4;
    CDUnknownFunctionPointerType _field5;
    CDUnknownFunctionPointerType _field6;
    CDUnknownFunctionPointerType _field7;
    CDUnknownFunctionPointerType _field8;
    CDUnknownFunctionPointerType _field9;
    CDUnknownFunctionPointerType _field10;
    CDUnknownFunctionPointerType _field11;
    CDUnknownFunctionPointerType _field12;
    CDUnknownFunctionPointerType _field13;
    CDUnknownFunctionPointerType _field14;
    CDUnknownFunctionPointerType _field15;
    CDUnknownFunctionPointerType _field16;
};

struct LiveTimeConverter {
    struct WakeUpTime _field1;
    vector_3203cf93 _field2;
    double _field3;
};

struct LocData {
    int _field1;
    struct CLVisionTime _field2;
    struct MatrixMxNT<3, 1, double> _field3;
    struct MatrixMxNT<3, 1, double> _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    struct MatrixMxNT<3, 1, double> _field12;
    struct MatrixMxNT<3, 1, double> _field13;
    struct MatrixMxNT<3, 3, double> _field14;
    _Bool _field15;
    double _field16;
    double _field17;
};

struct LocationAccessory {
    struct Metric _field1;
    basic_string_90719d97 _field2;
    basic_string_90719d97 _field3;
    basic_string_90719d97 _field4;
    basic_string_90719d97 _field5;
    basic_string_90719d97 _field6;
    unsigned int _field7;
    _Bool _field8;
    unsigned int _field9;
    unsigned int _field10;
    unsigned int _field11;
    unsigned int _field12;
    unsigned int _field13;
    unsigned int _field14;
    unsigned int _field15;
    struct Statistics _field16;
    struct Statistics _field17;
    double _field18;
    double _field19;
    unsigned int _field20;
    struct map<CLBatteryChargerType, unsigned int, std::__1::less<CLBatteryChargerType>, std::__1::allocator<std::__1::pair<const CLBatteryChargerType, unsigned int>>> _field21;
    struct map<CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::PerfRangeType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int>>> _field22;
    struct map<CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::PerfRangeType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int>>> _field23;
    struct map<CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::PerfRangeType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int>>> _field24;
    struct Statistics _field25;
    struct map<CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::PerfRangeType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int>>> _field26;
    struct map<CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::PerfRangeType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int>>> _field27;
    struct map<CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::PerfRangeType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int>>> _field28;
    struct Statistics _field29;
    struct map<CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::PerfRangeType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int>>> _field30;
    struct map<CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::PerfRangeType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int>>> _field31;
    struct map<CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::PerfRangeType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int>>> _field32;
    struct Statistics _field33;
    struct map<CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::PerfRangeType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int>>> _field34;
    struct map<CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::PerfRangeType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int>>> _field35;
    struct map<CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::PerfRangeType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int>>> _field36;
    struct Statistics _field37;
    unsigned int _field38;
    struct map<CLDaemonStats_Type::LocationAccessory::SpeedPerfRangeType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::SpeedPerfRangeType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::SpeedPerfRangeType, unsigned int>>> _field39;
    struct map<CLDaemonStats_Type::LocationAccessory::SpeedPerfRangeType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::SpeedPerfRangeType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::SpeedPerfRangeType, unsigned int>>> _field40;
    struct Statistics _field41;
    unsigned int _field42;
    unsigned int _field43;
    unsigned int _field44;
    unsigned int _field45;
    unsigned int _field46;
    unsigned int _field47;
    struct map<CLDaemonStats_Type::LocationAccessory::LatencyRangeType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::LatencyRangeType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::LatencyRangeType, unsigned int>>> _field48;
    struct Statistics _field49;
    struct Statistics _field50;
    unsigned int _field51;
    unsigned int _field52;
    struct map<CLDaemonStats_Type::LocationAccessory::LatencyRangeType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::LatencyRangeType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::LatencyRangeType, unsigned int>>> _field53;
    struct Statistics _field54;
    struct Statistics _field55;
    unsigned int _field56;
    unsigned int _field57;
    struct map<CLDaemonStats_Type::LocationAccessory::LatencyRangeType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::LatencyRangeType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::LatencyRangeType, unsigned int>>> _field58;
    struct Statistics _field59;
    struct Statistics _field60;
    unsigned int _field61;
    struct map<CLDaemonStats_Type::LocationAccessory::PASCDTransmissionStateType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::PASCDTransmissionStateType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::PASCDTransmissionStateType, unsigned int>>> _field62;
    struct map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int>>> _field63;
    struct map<std::__1::basic_string<char>, unsigned int, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned int>>> _field64;
    unsigned int _field65;
    unsigned int _field66;
    unsigned int _field67;
    struct map<CLClientLocationRouteHintType, unsigned int, std::__1::less<CLClientLocationRouteHintType>, std::__1::allocator<std::__1::pair<const CLClientLocationRouteHintType, unsigned int>>> _field68;
    unsigned int _field69;
    unsigned int _field70;
    unsigned int _field71;
    struct map<CLLocationType, unsigned int, std::__1::less<CLLocationType>, std::__1::allocator<std::__1::pair<const CLLocationType, unsigned int>>> _field72;
    struct map<CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::PerfRangeType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int>>> _field73;
    struct map<CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::PerfRangeType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int>>> _field74;
    unsigned int _field75;
    unsigned int _field76;
    unsigned int _field77;
    unsigned int _field78;
    unsigned int _field79;
    struct map<std::__1::basic_string<char>, unsigned int, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned int>>> _field80;
};

struct LocationConfiguration {
    struct vector<CLLocationType, std::__1::allocator<CLLocationType>> _field1;
    double _field2;
};

struct LocationDerivedSpeed {
    double _field1;
    double _field2;
    double _field3;
};

struct LocationFuserMeasurement<clv::fusion::LocData> {
    struct LocData _field1;
    struct VioData _field2;
};

struct LocationFuserMeasurement<clv::fusion::VlfData>;

struct LocationFuserState {
    _Bool _field1;
    _Bool _field2;
    struct DevicePose _field3;
    struct DevicePose _field4;
    struct MatrixMxNT<3, 1, double> _field5;
    struct MatrixMxNT<3, 1, double> _field6;
    struct LocData _field7;
    int _field8;
    _Bool _field9;
    double _field10;
    double _field11;
    struct LocationFuserMeasurement<clv::fusion::LocData> _field12;
};

struct LocationMapMatching {
    struct Metric _field1;
    int _field2;
    int _field3;
    int _field4;
};

struct LocationNetworkQueries {
    struct Metric _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    int _field10;
    int _field11;
    int _field12;
    int _field13;
    int _field14;
};

struct LocationOscarEmu;

struct LocationSettings {
    int _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    struct Emergency {
        struct Settings {
            unsigned int _field1;
            int _field2;
            int _field3;
            int _field4;
            int _field5;
            int _field6;
            struct LPPRel13MeasSettings _field7;
            unsigned int _field8;
        } _field1;
        struct CDMASettings _field2;
        struct Settings {
            unsigned int _field1;
            int _field2;
            int _field3;
            int _field4;
            int _field5;
            int _field6;
            struct LPPRel13MeasSettings _field7;
            unsigned int _field8;
        } _field3;
        struct AugmentedAction _field4;
    } _field7;
    struct SuplSettings _field8;
    struct BAA _field9;
    basic_string_90719d97 _field10;
    basic_string_90719d97 _field11;
};

struct Logic {
    struct shared_ptr<CLICachedLookupWifiAccessPointLocationService> _field1;
};

struct LteCell {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    double _field8;
    double _field9;
    int _field10;
    int _field11;
    int _field12;
    int _field13;
};

struct Magnetometer;

struct MagnitudeFeatures {
    float fMagMax;
    float fXMin;
    float fXMax;
    float fYMin;
    float fYMax;
    float fZMin;
    float fZMax;
};

struct MapMatchedPositionAssistance {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct MatrixMxNT<3, 1, double> {
    CDUnknownFunctionPointerType *_field1;
    struct array<double, 3> _field2;
    struct bitset<3> _field3;
};

struct MatrixMxNT<3, 3, double> {
    CDUnknownFunctionPointerType *_field1;
    struct array<double, 9> _field2;
    struct bitset<9> _field3;
};

struct MatrixMxNT<4, 1, double> {
    CDUnknownFunctionPointerType *_field1;
    struct array<double, 4> _field2;
    struct bitset<4> _field3;
};

struct MatrixMxNT<6, 6, double> {
    CDUnknownFunctionPointerType *_field1;
    struct array<double, 36> _field2;
    struct bitset<36> _field3;
};

struct MeasurementData;

struct MediatedMotionActivity {
    double _field1;
    struct CLMotionActivity _field2;
    int _field3;
    struct CLNatalieFeatures _field4;
    _Bool _field5;
    _Bool _field6;
    unsigned char _field7[16];
};

struct Metric {
    _Bool _field1;
    double _field2;
    basic_string_90719d97 _field3;
};

struct Metrics {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    struct CMVector<float, 2> _field5;
};

struct MetsInfo;

struct MobilityBoutMetrics;

struct ModelAndIds;

struct MonitoredRegion {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    unsigned short _field3;
    unsigned short _field4;
    int _field5;
    basic_string_90719d97 _field6;
    basic_string_90719d97 _field7;
    basic_string_90719d97 _field8;
    int _field9;
};

struct MonitoringParameters {
    double latencyBudget;
    double retryRate;
    _Bool queryALS;
};

struct MonitoringPeriod;

struct MotionActivity;

struct MotionActivityAndTime {
    double _field1;
    int _field2;
    int _field3;
};

struct MotionBarometerCalibration {
    struct Metric _field1;
    unsigned int _field2;
    float _field3;
    float _field4;
    float _field5;
};

struct MotionFitnessDaily {
    struct Metric _field1;
    basic_string_90719d97 _field2;
    int _field3;
    basic_string_90719d97 _field4;
    _Bool _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    unsigned int _field9;
    unsigned int _field10;
    unsigned int _field11;
    unsigned int _field12;
    unsigned int _field13;
    long long _field14;
    long long _field15;
    unsigned int _field16;
    unsigned int _field17;
    _Bool _field18;
};

struct MotionGPSLocation;

struct MotionHint;

struct MotionInfo {
    double _field1;
    int _field2;
    int _field3;
};

struct MotionLocation;

struct MotionLoiData;

struct MotionOverride {
    int _field1;
    struct CLMotionActivity _field2;
    long long _field3;
    struct WorkoutSettings _field4;
};

struct MotionStateUpdate;

struct MotionWifiAssociation;

struct MotionWifiLocation;

struct MovementStats;

struct MovementStatsGravityProjection;

struct MovementStatsSignal;

struct Mutex;

struct MutexInfo;

struct Name {
    basic_string_90719d97 fExecutable;
    basic_string_90719d97 fBundlePath;
    basic_string_90719d97 fLimitingBundleId;
    _Bool fBundleRequiresProxy;
    _Bool fSystemService;
    _Bool fHarvestableSystemService;
    basic_string_90719d97 fBundleId;
    basic_string_90719d97 fPluginBundleId;
    basic_string_90719d97 fCounterpartBundleId;
    _Bool fValidProxyData;
    _Bool fWatchKitPlugin;
    _Bool fIsAppClip;
};

struct NatalieData;

struct NavigationConfig {
    float _field1;
    float _field2;
    unsigned int _field3;
    char _field4;
    float _field5;
    unsigned int _field6;
    _Bool _field7;
    float _field8;
    float _field9;
    float _field10;
    float _field11;
    unsigned int _field12;
    unsigned int _field13;
    unsigned char _field14;
    unsigned char _field15;
    _Bool _field16;
    unsigned int _field17;
};

struct NonlinearBiasFit;

struct NowPlaying {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 *_field2;
    int _field3;
    unsigned int _field4;
    basic_string_90719d97 *_field5;
    struct RepeatedPtrField<CLMicroLocationProto::NowPlayingOutputDevice> _field6;
    struct BundleIdFeatures *_field7;
    int _field8;
    unsigned int _field9[1];
};

struct Odometer;

struct OdometerWithAltitude;

struct OnsetHeartRateData;

struct OtherPrefs {
    CDUnknownFunctionPointerType *_field1;
    struct __CFDictionary *_field2;
};

struct Output {
    int _field1;
    double _field2;
    double _field3;
    int _field4;
};

struct PairStats {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    int _field10;
    int _field11;
    int _field12;
    int _field13;
    int _field14;
    int _field15;
    int _field16;
    int _field17;
    int _field18;
};

struct ParkinsonsResult {
    double _field1;
    double _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
    float _field7;
    float _field8;
    float _field9;
};

struct PartnerInfo;

struct PearlAttitude;

struct PerMessageData {
    int _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct PersistenceBackend;

struct PersistentSubscriptionIdentifier {
    basic_string_90719d97 _field1;
    basic_string_90719d97 _field2;
    struct type_index _field3;
};

struct PersistentSubscriptionPersistenceBackend;

struct PostWorkoutSettings {
    _Bool _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct PredictedGnssAvailability {
    int _field1;
    int _field2;
    double _field3;
    double _field4;
};

struct PredictedRelativeDeviceMotion;

struct Preferences {
    struct CLMotionDefaultsWrite<int> _field1;
    struct CLMotionDefaultsWrite<int> _field2;
    struct CLMotionDefaultsWrite<int> _field3;
    struct CLMotionDefaultsWrite<int> _field4;
};

struct PressureFiltered;

struct PressureFilteredNoTemperature;

struct PressureGps;

struct PressureOscarEmu;

struct PropagationDataHistory {
    struct NotificationData {
        struct CLDaemonLocation _field1;
        struct CLDaemonLocationPrivate _field2;
        struct shared_ptr<CLBatchedLocations> _field3;
        struct TechnologyStatus _field4;
        _Bool _field5;
        double _field6;
        int _field7;
        CDStruct_d2b197d1 _field8;
        struct {
            double _field1;
            double _field2;
        } _field9;
        struct XtraFileAvailable _field10;
        int _field11;
        struct LocationDerivedSpeed _field12;
        struct {
            double _field1;
            double _field2;
            double _field3;
            int _field4;
        } _field13;
        struct {
            double _field1;
            double _field2;
            double _field3;
            double _field4;
            double _field5;
            double _field6;
            _Bool _field7;
            double _field8[3][3];
            double _field9;
            double _field10;
            double _field11;
            unsigned long long _field12;
            int _field13;
        } _field14;
        struct shared_ptr<const gnss::MeasurementData> _field15;
        int _field16;
        struct {
            int _field1;
            double _field2;
            double _field3;
            double _field4;
            double _field5;
            double _field6;
            double _field7;
            double _field8[5];
            double _field9;
            double _field10;
            double _field11;
            double _field12;
            int _field13;
            int _field14;
        } _field17;
        struct CLStrongPtr<NSData *> _field18;
        struct PredictedGnssAvailability _field19;
    } _field1;
    struct NotificationData {
        struct CLDaemonLocation _field1;
        struct CLDaemonLocationPrivate _field2;
        struct shared_ptr<CLBatchedLocations> _field3;
        struct TechnologyStatus _field4;
        _Bool _field5;
        double _field6;
        int _field7;
        CDStruct_d2b197d1 _field8;
        struct {
            double _field1;
            double _field2;
        } _field9;
        struct XtraFileAvailable _field10;
        int _field11;
        struct LocationDerivedSpeed _field12;
        struct {
            double _field1;
            double _field2;
            double _field3;
            int _field4;
        } _field13;
        struct {
            double _field1;
            double _field2;
            double _field3;
            double _field4;
            double _field5;
            double _field6;
            _Bool _field7;
            double _field8[3][3];
            double _field9;
            double _field10;
            double _field11;
            unsigned long long _field12;
            int _field13;
        } _field14;
        struct shared_ptr<const gnss::MeasurementData> _field15;
        int _field16;
        struct {
            int _field1;
            double _field2;
            double _field3;
            double _field4;
            double _field5;
            double _field6;
            double _field7;
            double _field8[5];
            double _field9;
            double _field10;
            double _field11;
            double _field12;
            int _field13;
            int _field14;
        } _field17;
        struct CLStrongPtr<NSData *> _field18;
        struct PredictedGnssAvailability _field19;
    } _field2;
    double _field3;
    double _field4;
    double _field5;
};

struct Prox;

struct ProximityZone {
    struct Region _field1;
};

struct QmiDirectionOfTravelInfo {
    unsigned long long _field1;
    float _field2;
    float _field3;
    unsigned char _field4;
};

struct QmiMotionDataInfo {
    int _field1;
    int _field2;
    int _field3;
    float _field4;
    unsigned short _field5;
    unsigned short _field6;
};

struct QuaternionT<double> {
    CDUnknownFunctionPointerType *_field1;
    struct array<double, 4> _field2;
    struct bitset<4> _field3;
};

struct RavenActivity {
    CDUnknownFunctionPointerType *_field1;
    struct RavenTime _field2;
    struct RavenActivityState _field3;
    struct RavenFitnessSession _field4;
    struct RavenMovingState _field5;
    struct RavenMountState _field6;
};

struct RavenActivityState {
    CDUnknownFunctionPointerType *_field1;
    unsigned char _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
};

struct RavenControllerBestEffortState {
    CDUnknownFunctionPointerType *_field1;
    struct CLRavenController *_field2;
    double _field3;
    _Bool _field4;
    _Bool _field5;
};

struct RavenControllerDisabledState {
    CDUnknownFunctionPointerType *_field1;
    struct CLRavenController *_field2;
};

struct RavenControllerState;

struct RavenFitnessSession {
    CDUnknownFunctionPointerType *_field1;
    unsigned char _field2;
    struct RavenTime _field3;
};

struct RavenMountState {
    CDUnknownFunctionPointerType *_field1;
    unsigned char _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct RavenMovingState {
    CDUnknownFunctionPointerType *_field1;
    unsigned char _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct RavenSolution {
    CDUnknownFunctionPointerType *_field1;
    struct RavenTime _field2;
    _Bool _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    _Bool _field13;
    _Bool _field14;
    double _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    double _field20;
    double _field21;
    double _field22;
    double _field23;
    double _field24;
    double _field25;
    double _field26;
    double _field27;
    double _field28;
    _Bool _field29;
    double _field30;
    double _field31;
    double _field32;
    double _field33;
    double _field34;
    double _field35;
    double _field36;
    double _field37;
    double _field38;
    _Bool _field39;
    double _field40;
    double _field41;
    double _field42;
    double _field43;
    double _field44;
    double _field45;
    double _field46;
    double _field47;
    double _field48;
    _Bool _field49;
    double _field50;
    double _field51;
    double _field52;
    double _field53;
    double _field54;
    double _field55;
    double _field56;
    double _field57;
    double _field58;
    double _field59;
    double _field60;
    double _field61;
    double _field62;
    double _field63;
    _Bool _field64;
    double _field65;
    double _field66;
    double _field67;
    double _field68;
    double _field69;
    double _field70;
    double _field71;
    double _field72;
    double _field73;
    _Bool _field74;
    double _field75;
    double _field76;
    double _field77;
    double _field78;
    double _field79;
    double _field80;
    double _field81;
    double _field82;
    double _field83;
    _Bool _field84;
    double _field85;
    double _field86;
    double _field87;
    double _field88;
    double _field89;
    double _field90;
    double _field91;
    double _field92;
    double _field93;
    _Bool _field94;
    double _field95;
    double _field96;
    double _field97;
    double _field98;
    double _field99;
};

struct RavenSolutionEvent {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    struct RavenTime _field3;
    struct RavenStatus _field4;
    struct RavenSolution _field5;
    struct RavenActivity _field6;
};

struct RavenStatus {
    CDUnknownFunctionPointerType *_field1;
    struct RavenTime _field2;
    unsigned char _field3;
    unsigned char _field4;
    double _field5;
    struct CNTimeSpan _field6;
    unsigned long long _field7;
    unsigned long long _field8;
    unsigned long long _field9;
    unsigned short _field10;
    struct array<unsigned int, 29> _field11;
    struct array<unsigned int, 29> _field12;
    struct array<unsigned int, 29> _field13;
    struct array<unsigned int, 29> _field14;
    struct array<unsigned int, 29> _field15;
    struct array<unsigned int, 29> _field16;
    double _field17;
    double _field18;
    double _field19;
    double _field20;
    double _field21;
    double _field22;
    double _field23;
    double _field24;
    double _field25;
};

struct RavenSupervisor;

struct RavenThread;

struct RavenTime {
    CDUnknownFunctionPointerType *_field1;
    struct CNTime _field2;
    _Bool _field3;
    struct CNTime _field4;
    _Bool _field5;
    struct CNTime _field6;
    _Bool _field7;
    struct CNTime _field8;
    double _field9;
};

struct ReachabilityState {
    int _field1;
    int _field2;
    _Bool _field3;
    _Bool _field4;
};

struct Receiver;

struct RecordingEvent;

struct RecordingTransaction;

struct RegInfo {
    struct MonitoringParameters settledParameters;
    struct MonitoringParameters unsettledParameters;
};

struct Region {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    unsigned short _field3;
    unsigned short _field4;
    int _field5;
};

struct RelDMInSystemConfig;

struct RelativeAltitude;

struct RelativeDeviceMotionComplexTransition;

struct RelativeDeviceMotionCorrelatedMotion;

struct RelativeDeviceMotionInternal;

struct RelativeGravityConstraints;

struct RelativeGravityCorrection;

struct RepeatedPtrField<CLMicroLocationProto::NowPlayingOutputDevice> {
    void **_field1;
    int _field2;
    int _field3;
    int _field4;
};

struct RollingPowerAssertion;

struct RotationRate;

struct S911 {
    _Bool _field1;
    _Bool _field2;
    basic_string_90719d97 _field3;
    _Bool _field4;
    unsigned int _field5;
    basic_string_90719d97 _field6;
    _Bool _field7;
    basic_string_90719d97 _field8;
    basic_string_90719d97 _field9;
    basic_string_90719d97 _field10;
};

struct SPUGaitMetrics {
    struct GaitMetrics _field1;
    double _field2;
};

struct SPUPlaybackExampleDeviceMotion;

struct SPUPlaybackExampleMotionStateUpdate;

struct SatelliteReport {
    struct vector<CLClientSatelliteInfo, std::__1::allocator<CLClientSatelliteInfo>> satInfoGps;
    struct vector<CLClientSatelliteInfo, std::__1::allocator<CLClientSatelliteInfo>> satInfoGlonass;
    struct vector<CLClientSatelliteInfo, std::__1::allocator<CLClientSatelliteInfo>> satInfoQzss;
    struct vector<CLClientSatelliteInfo, std::__1::allocator<CLClientSatelliteInfo>> satInfoGalileo;
    struct vector<CLClientSatelliteInfo, std::__1::allocator<CLClientSatelliteInfo>> satInfoBeidou;
};

struct ScanRequest;

struct ScanStats {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4[13];
};

struct ScanningPolicy {
    struct WifiConfiguration _field1;
    struct optional<CLOldWifiScanner::LocationConfiguration> _field2;
};

struct ScdmaCell {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
};

struct SessionOverride;

struct SignalEnvironment;

struct SignalEnvironmentInfo {
    int _field1;
    int _field2;
};

struct SiloDispatcher<CLBarometerCalibration_Types::CMKFFilteredPressureSample>;

struct SiloDispatcher<CLDeviceMotion::Sample>;

struct SiloDispatcher<CLMobility::SPUGaitMetrics>;

struct SoundPressureLevel;

struct SparseFeatureDistribution<short, 50, 32768> {
    unsigned char _field1;
    short _field2[50];
    short _field3;
};

struct SpeedAndTime {
    double _field1;
    double _field2;
};

struct SpinLock {
    struct atomic_flag _field1;
};

struct SqliteProperties {
    int _field1;
    int _field2;
    _Bool _field3;
    _Bool _field4;
    basic_string_90719d97 _field5;
};

struct State {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    int _field4;
    _Bool _field5;
    _Bool _field6;
    basic_string_90719d97 _field7;
    struct CLStepCountEntry _field8;
    struct AssociationState _field9;
    struct vector<CLMicroLocationWiFiChannelHistogram, std::__1::allocator<CLMicroLocationWiFiChannelHistogram>> _field10;
    struct shared_ptr<CLMicroLocationWifiScanStrategy> _field11;
    struct shared_ptr<CLMicroLocationWifiScanStrategy> _field12;
    _Bool _field13;
    _Bool _field14;
    struct bitset<1> _field15;
    struct bitset<13> _field16;
    struct optional<std::__1::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1>>>> _field17;
    struct optional<std::__1::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1>>>> _field18;
    struct optional<CLMicroLocationProto::NowPlaying> _field19;
    struct vector<CLMicroLocationProto::RecordingEvent, std::__1::allocator<CLMicroLocationProto::RecordingEvent>> _field20;
    int _field21;
};

struct StateTransition {
    char *_field1;
    _Bool _field2;
    double _field3;
};

struct Statistics {
    double _field1;
    double _field2;
    unsigned int _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct StepCadenceToStrideLengthBin;

struct StepCountEntry;

struct StreamingHeartRateData;

struct StrideCalBin;

struct StrideCalInfo {
    int _field1;
    int _field2;
    int _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct StrokeEntry;

struct SuplEmergencyNotification {
    char _field1;
    char _field2[300];
};

struct SuplInfo {
    union {
        unsigned int _field1;
        struct {
            unsigned int :1;
            unsigned int :1;
            unsigned int :1;
            unsigned int :1;
        } _field2;
    } _field1;
    struct SuplInitInfo _field2;
    struct SuplEmergencyNotification _field3;
    int _field4;
    int _field5;
};

struct SuplInitInfo {
    unsigned int _field1;
    unsigned char _field2;
    unsigned char _field3[8];
    unsigned char _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    unsigned char _field9[16];
    unsigned char _field10;
    char _field11[257];
    unsigned char _field12;
    unsigned char _field13;
    unsigned char _field14;
    char _field15[257];
    unsigned char _field16;
    unsigned char _field17;
    char _field18[257];
    unsigned char _field19;
    unsigned char _field20;
    unsigned char _field21;
    unsigned char _field22;
};

struct SuplNiResponse {
    int _field1;
    struct SuplInfo _field2;
};

struct SuplSettings {
    basic_string_90719d97 _field1;
    basic_string_90719d97 _field2;
    unsigned short _field3;
    unsigned int _field4;
    union {
        unsigned int _field1;
        struct {
            unsigned int :1;
            unsigned int :1;
            unsigned int :1;
            unsigned int :1;
            unsigned int :1;
        } _field2;
    } _field5;
};

struct SwimAttrib {
    long long _field1;
    double _field2;
};

struct SystemState {
    struct WifiScanHistory _field1;
    struct WifiScan _field2;
    struct ElevationHistory _field3;
    struct AssociatedAp _field4;
    struct CLDaemonLocation _field5;
    struct ComputedLocation _field6;
    time_point_406bde99 _field7;
    _Bool _field8;
    struct CLWifiLocationUpdateRequest _field9;
    int _field10;
    time_point_406bde99 _field11;
    time_point_406bde99 _field12;
    time_point_406bde99 _field13;
    time_point_406bde99 _field14;
    int _field15;
    struct duration<long double, std::__1::ratio<1, 1>> _field16;
    struct Emergency {
        int _field1;
        _Bool _field2;
        double _field3;
        double _field4;
        double _field5;
        double _field6;
        double _field7;
        double _field8;
        double _field9;
        double _field10;
        double _field11;
        double _field12;
        double _field13;
        double _field14;
        _Bool _field15;
    } _field17;
    struct Wsb _field18;
    int _field19;
    int _field20;
    _Bool _field21;
    _Bool _field22;
    _Bool _field23;
    _Bool _field24;
    time_point_406bde99 _field25;
    time_point_406bde99 _field26;
    struct Clients _field27;
    _Bool _field28;
    _Bool _field29;
    _Bool _field30;
    struct HeartbeatMetrics _field31;
    struct InterLocationRequestState _field32;
    struct InterLocationRequestState _field33;
};

struct TapAccept;

struct TapDetect;

struct TechnologyStatus {
    int _field1;
    _Bool _field2;
};

struct TemperatureOffsetCoefficientRound {
    float _field1;
    float _field2;
    int _field3;
};

struct TempestPoCAuxiliaryDeviceMotion;

struct TempestPoCListenerOrientation;

struct TileId;

struct TileNeededInfo {
    _Bool _field1;
    double _field2;
    double _field3;
};

struct TouchOscarEmu;

struct Transition;

struct TremorScore {
    double _field1;
    int _field2;
    float _field3;
    float _field4;
};

struct TriggerConfig {
    float _field1;
    float _field2;
    float _field3;
};

struct TunnelBridgeAssistance {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
};

struct TunnelEndPositionAssistance {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    _Bool _field10;
    int _field11;
    _Bool _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
};

struct UserStudyEvent;

struct VIOEstimation;

struct VIOPose;

struct VIOReplayPose;

struct VO2MaxInput {
    unsigned long long _field1;
    unsigned char _field2[16];
    float _field3;
    double _field4;
    float _field5;
    float _field6;
    int _field7;
    double _field8;
    _Bool _field9;
    _Bool _field10;
    int _field11;
    long long _field12;
    double _field13;
    double _field14;
    _Bool _field15;
};

struct VO2MaxModelInput;

struct VO2MaxOutput {
    unsigned long long _field1;
    unsigned char _field2[16];
    double _field3;
    double _field4;
    long long _field5;
    double _field6;
    double _field7;
    double _field8;
    unsigned char _field9[16];
    double _field10;
    double _field11;
    int _field12;
};

struct VO2MaxResult {
    double _field1;
    long long _field2;
    double _field3;
    _Bool _field4;
    _Bool _field5;
};

struct VO2MaxSessionStats {
    double _field1;
    float _field2;
};

struct VO2MaxSummary {
    unsigned long long _field1;
    double _field2;
    long long _field3;
    unsigned char _field4[16];
    double _field5;
    unsigned long long _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    double _field20;
    double _field21;
    int _field22;
    int _field23;
};

struct VehicularFlags {
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
};

struct VibrationEvent;

struct VioData {
    int _field1;
    struct CLVisionTime _field2;
    struct CLVisionTime _field3;
    struct DevicePose _field4;
    struct MatrixMxNT<3, 1, double> _field5;
    struct MatrixMxNT<3, 3, double> _field6;
    _Bool _field7;
    struct MatrixMxNT<3, 1, double> _field8;
    struct MatrixMxNT<3, 3, double> _field9;
    double _field10;
    _Bool _field11;
    double _field12;
    double _field13;
    _Bool _field14;
};

struct VisionCompassBias;

struct VisualLocalization;

struct VisualLocalizationAttitudeConstraints;

struct VisualLocalizationAttitudeCorrection;

struct VlfData {
    struct CLVisionTime _field1;
    struct DevicePose _field2;
    struct MatrixMxNT<3, 1, double> _field3;
    double _field4;
    _Bool _field5;
    struct MatrixMxNT<3, 1, double> _field6;
    struct DevicePose _field7;
};

struct WakeUpTime {
    unsigned long long _field1;
    double _field2;
    double _field3;
    double _field4;
    _Bool _field5;
};

struct WalkingBoutExtractor;

struct WalkingBoutRecorderDb;

struct WalkingDetectionResult;

struct WalkingEscalationRules {
    unsigned short _field1;
    unsigned short _field2;
    float _field3;
};

struct WatchOnWristState;

struct WatchOrientationSettings;

struct WifiConfiguration {
    char _field1;
    _Bool _field2;
    _Bool _field3;
    struct duration<long double, std::__1::ratio<1, 1>> _field4;
    struct vector<CLWifiService_Type::Notification, std::__1::allocator<CLWifiService_Type::Notification>> _field5;
    struct duration<long double, std::__1::ratio<1, 1>> _field6;
    struct duration<long double, std::__1::ratio<1, 1>> _field7;
};

struct WifiScan {
    struct unordered_set<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint>> _field1;
    time_point_406bde99 _field2;
};

struct WifiScanHistory {
    struct unordered_set<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint>> _field1;
};

struct WifiScanResults;

struct WorkoutEvent {
    unsigned char _field1[16];
    long long _field2;
    long long _field3;
    double _field4;
    double _field5;
    long long _field6;
    double _field7;
    struct CLWorkoutSessionDetails _field8;
};

struct WorkoutPrediction {
    unsigned char _field1[16];
    long long _field2;
    long long _field3;
    int _field4;
    long long _field5;
    long long _field6;
    double _field7;
    double _field8;
    unsigned long long _field9;
    double _field10;
    double _field11;
    int _field12;
    int _field13;
    long long _field14;
    double _field15;
    int _field16;
};

struct WorkoutRecorderALSData;

struct WorkoutRecorderAccel;

struct WorkoutRecorderAccel800;

struct WorkoutRecorderBodyMetrics;

struct WorkoutRecorderElevation;

struct WorkoutRecorderHealthKitInfo {
    CDUnknownFunctionPointerType *_vptr$Base;
    double _restingHeartRate;
    double _walkingHeartRateAverage;
    unsigned int _workoutActivityType;
    struct {
        unsigned int restingHeartRate:1;
        unsigned int walkingHeartRateAverage:1;
        unsigned int workoutActivityType:1;
    } _has;
};

struct WorkoutRecorderHeartRate;

struct WorkoutRecorderOdometer;

struct WorkoutRecorderPressure;

struct WorkoutRecorderRotationRate;

struct WorkoutRecorderWatchOrientationSettings;

struct WorkoutRecorderWifiScanResults;

struct WorkoutRecorderWorkoutEvent;

struct WorkoutSettings {
    unsigned char _field1[16];
    long long _field2;
    long long _field3;
    union WorkoutAttrib _field4;
};

struct WorkoutStartAwdMetrics {
    long long _field1;
    long long _field2;
    long long _field3;
};

struct WristStateInterval;

struct WristStatus;

struct Writer {
    struct Delegate *_field1;
    id _field2;
    id _field3;
    id _field4;
    long long _field5;
    int _field6;
    long long _field7;
    char *_field8;
    unsigned long long _field9;
    unsigned long long _field10;
    struct z_stream_s _field11;
};

struct WriterManager<CLLegacyFileManager>;

struct Wsb {
    struct vector<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint>>, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint>>>> _field1;
    struct unordered_set<CLMacAddress, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<CLMacAddress>> _field2;
    int _field3;
    int _field4;
    struct duration<long double, std::__1::ratio<1, 1>> _field5;
    double _field6;
};

struct XtraFileAvailable {
    double _field1;
    basic_string_90719d97 _field2;
};

struct ZeroCrossingFeatures {
    float fXZeroCrossingTime;
    float fYZeroCrossingTime;
    float fZZeroCrossingTime;
};

struct ZeroVelocityCorrection;

struct _CLClientManagerStateTrackerState {
    int locationServicesEnabledStatus;
    _Bool locationRestricted;
};

struct _CLDaemonStatusStateTrackerState {
    struct Battery batteryData;
    int reachability;
    int thermalLevel;
    _Bool airplaneMode;
    _Bool batterySaverModeEnabled;
    _Bool restrictedMode;
};

struct _CLFitnessMachineData {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    long long _field6;
    long long _field7;
    long long _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct __CFArray;

struct __CFDictionary;

struct __CFNumber;

struct __CFRunLoopSource;

struct __CFString;

struct __CLClient;

struct __SecCertificate;

struct __hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<CLPersistentSubscriptionBase::Connection *, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<CLPersistentSubscriptionBase::Connection *, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::ClientArrowRecord>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::ClientArrowRecord>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::function<void ()>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::function<void ()>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<CLPeopleDensityBTLEAdvertisement, std::__1::allocator<CLPeopleDensityBTLEAdvertisement>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<CLPeopleDensityBTLEAdvertisement, std::__1::allocator<CLPeopleDensityBTLEAdvertisement>>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*> *_field1;
};

struct __list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *> {
    struct __list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *> *_field1;
    struct __list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *> *_field2;
};

struct __list_node_base<CLBTLEBeaconProviderMock::ScanRequest, void *> {
    struct __list_node_base<CLBTLEBeaconProviderMock::ScanRequest, void *> *_field1;
    struct __list_node_base<CLBTLEBeaconProviderMock::ScanRequest, void *> *_field2;
};

struct __list_node_base<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *> {
    struct __list_node_base<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *> *_field1;
    struct __list_node_base<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *> *_field2;
};

struct __list_node_base<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *> {
    struct __list_node_base<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *> *_field1;
    struct __list_node_base<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *> *_field2;
};

struct __list_node_base<CLBTLEBeaconRegion_Type::MonitoredRegion, void *> {
    struct __list_node_base<CLBTLEBeaconRegion_Type::MonitoredRegion, void *> *_field1;
    struct __list_node_base<CLBTLEBeaconRegion_Type::MonitoredRegion, void *> *_field2;
};

struct __list_node_base<CLDaemonClient::MessageRef, void *> {
    struct __list_node_base<CLDaemonClient::MessageRef, void *> *_field1;
    struct __list_node_base<CLDaemonClient::MessageRef, void *> *_field2;
};

struct __list_node_base<CLDaemonLocation, void *> {
    struct __list_node_base<CLDaemonLocation, void *> *_field1;
    struct __list_node_base<CLDaemonLocation, void *> *_field2;
};

struct __list_node_base<CLFenceManager_Type::CombinedFence, void *> {
    struct __list_node_base<CLFenceManager_Type::CombinedFence, void *> *_field1;
    struct __list_node_base<CLFenceManager_Type::CombinedFence, void *> *_field2;
};

struct __list_node_base<CLMotionActivity, void *> {
    struct __list_node_base<CLMotionActivity, void *> *_field1;
    struct __list_node_base<CLMotionActivity, void *> *_field2;
};

struct __list_node_base<CLOdometerEntry, void *> {
    struct __list_node_base<CLOdometerEntry, void *> *_field1;
    struct __list_node_base<CLOdometerEntry, void *> *_field2;
};

struct __list_node_base<CLPredictedWalkDistanceBoutEntry, void *> {
    struct __list_node_base<CLPredictedWalkDistanceBoutEntry, void *> *__prev_;
    struct __list_node_base<CLPredictedWalkDistanceBoutEntry, void *> *__next_;
};

struct __list_node_base<CLSensorRecorderDataPacket, void *> {
    struct __list_node_base<CLSensorRecorderDataPacket, void *> *_field1;
    struct __list_node_base<CLSensorRecorderDataPacket, void *> *_field2;
};

struct __list_node_base<CMMsl::Item *, void *> {
    struct __list_node_base<CMMsl::Item *, void *> *__prev_;
    struct __list_node_base<CMMsl::Item *, void *> *__next_;
};

struct __list_node_base<NSMutableDictionary *, void *> {
    struct __list_node_base<NSMutableDictionary *, void *> *_field1;
    struct __list_node_base<NSMutableDictionary *, void *> *_field2;
};

struct __list_node_base<NSString *, void *> {
    struct __list_node_base<NSString *, void *> *_field1;
    struct __list_node_base<NSString *, void *> *_field2;
};

struct __list_node_base<sqlite3_stmt *, void *> {
    struct __list_node_base<sqlite3_stmt *, void *> *_field1;
    struct __list_node_base<sqlite3_stmt *, void *> *_field2;
};

struct __list_node_base<std::__1::pair<unsigned int, bool>, void *> {
    struct __list_node_base<std::__1::pair<unsigned int, bool>, void *> *_field1;
    struct __list_node_base<std::__1::pair<unsigned int, bool>, void *> *_field2;
};

struct __list_node_base<unsigned int, void *> {
    struct __list_node_base<unsigned int, void *> *_field1;
    struct __list_node_base<unsigned int, void *> *_field2;
};

struct __shared_weak_count;

struct __tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> {
    struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
    struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
    } __pair1_;
    struct __compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char>>> {
        unsigned long long __value_;
    } __pair3_;
};

struct __tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long>;

struct __tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long>;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct a8;

struct aligned_storage<CLIndoorError> {
    union dummy_u dummy_;
};

struct aligned_storage<CLLastFix> {
    union dummy_u dummy_;
};

struct aligned_storage<std::__1::chrono::time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000>>>> {
    union dummy_u dummy_;
};

struct aligned_storage<std::__1::chrono::time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000>>>> {
    union dummy_u _field1;
};

struct altFilterData {
    float _field1;
    float _field2;
};

struct array<CLBarometerCalibrationContextManager *, 6> {
    CLBarometerCalibrationContextManager *__elems_[6];
};

struct array<CLMacAddress, 3> {
    struct CLMacAddress _field1[3];
};

struct array<CLRavenController::InterfaceTelemeter::PerMessageData, 2> {
    struct PerMessageData _field1[2];
};

struct array<double, 36> {
    double _field1[36];
};

struct array<double, 3> {
    double _field1[3];
};

struct array<double, 4> {
    double _field1[4];
};

struct array<double, 9> {
    double _field1[9];
};

struct array<std::__1::deque<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>, std::__1::allocator<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>>>, 7> {
    struct deque<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>, std::__1::allocator<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>>> __elems_[7];
};

struct array<unsigned int, 29> {
    unsigned int _field1[29];
};

struct atomic_flag {
    struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool>> {
        _Atomic _Bool _field1;
    } _field1;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *__data_;
                    unsigned long long __size_;
                    unsigned long long __cap_;
                } __l;
                struct __short {
                    char __data_[23];
                    struct {
                        unsigned char __size_;
                    } ;
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __value_;
    } __r_;
};

struct bitset<13> {
    unsigned long long _field1;
};

struct bitset<1> {
    unsigned long long _field1;
};

struct bitset<36> {
    unsigned long long _field1;
};

struct bitset<3> {
    unsigned long long _field1;
};

struct bitset<4> {
    unsigned long long _field1;
};

struct bitset<6> {
    unsigned long long _field1;
};

struct bitset<9> {
    unsigned long long _field1;
};

struct condition_variable {
    struct _opaque_pthread_cond_t {
        long long _field1;
        char _field2[40];
    } _field1;
};

struct deque<CL::Wifi1::Types::Elevation, std::__1::allocator<CL::Wifi1::Types::Elevation>> {
    struct __split_buffer<CL::Wifi1::Types::Elevation *, std::__1::allocator<CL::Wifi1::Types::Elevation *>> {
        struct Elevation **_field1;
        struct Elevation **_field2;
        struct Elevation **_field3;
        struct __compressed_pair<CL::Wifi1::Types::Elevation **, std::__1::allocator<CL::Wifi1::Types::Elevation *>> {
            struct Elevation **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CL::Wifi1::Types::Elevation>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLCalorimetryDanceDMFeatures, std::__1::allocator<CLCalorimetryDanceDMFeatures>> {
    struct __split_buffer<CLCalorimetryDanceDMFeatures *, std::__1::allocator<CLCalorimetryDanceDMFeatures *>> {
        struct CLCalorimetryDanceDMFeatures **_field1;
        struct CLCalorimetryDanceDMFeatures **_field2;
        struct CLCalorimetryDanceDMFeatures **_field3;
        struct __compressed_pair<CLCalorimetryDanceDMFeatures **, std::__1::allocator<CLCalorimetryDanceDMFeatures *>> {
            struct CLCalorimetryDanceDMFeatures **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLCalorimetryDanceDMFeatures>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLCalorimetryFunctionalStrengthDMFeatures, std::__1::allocator<CLCalorimetryFunctionalStrengthDMFeatures>> {
    struct __split_buffer<CLCalorimetryFunctionalStrengthDMFeatures *, std::__1::allocator<CLCalorimetryFunctionalStrengthDMFeatures *>> {
        struct CLCalorimetryFunctionalStrengthDMFeatures **_field1;
        struct CLCalorimetryFunctionalStrengthDMFeatures **_field2;
        struct CLCalorimetryFunctionalStrengthDMFeatures **_field3;
        struct __compressed_pair<CLCalorimetryFunctionalStrengthDMFeatures **, std::__1::allocator<CLCalorimetryFunctionalStrengthDMFeatures *>> {
            struct CLCalorimetryFunctionalStrengthDMFeatures **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLCalorimetryFunctionalStrengthDMFeatures>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLCalorimetryRowingDMFeatures, std::__1::allocator<CLCalorimetryRowingDMFeatures>> {
    struct __split_buffer<CLCalorimetryRowingDMFeatures *, std::__1::allocator<CLCalorimetryRowingDMFeatures *>> {
        struct CLCalorimetryRowingDMFeatures **_field1;
        struct CLCalorimetryRowingDMFeatures **_field2;
        struct CLCalorimetryRowingDMFeatures **_field3;
        struct __compressed_pair<CLCalorimetryRowingDMFeatures **, std::__1::allocator<CLCalorimetryRowingDMFeatures *>> {
            struct CLCalorimetryRowingDMFeatures **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLCalorimetryRowingDMFeatures>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLCatherineData, std::__1::allocator<CLCatherineData>> {
    struct __split_buffer<CLCatherineData *, std::__1::allocator<CLCatherineData *>> {
        struct CLCatherineData **_field1;
        struct CLCatherineData **_field2;
        struct CLCatherineData **_field3;
        struct __compressed_pair<CLCatherineData **, std::__1::allocator<CLCatherineData *>> {
            struct CLCatherineData **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLCatherineData>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLCoarseElevationChangeEntry, std::__1::allocator<CLCoarseElevationChangeEntry>> {
    struct __split_buffer<CLCoarseElevationChangeEntry *, std::__1::allocator<CLCoarseElevationChangeEntry *>> {
        struct CLCoarseElevationChangeEntry **_field1;
        struct CLCoarseElevationChangeEntry **_field2;
        struct CLCoarseElevationChangeEntry **_field3;
        struct __compressed_pair<CLCoarseElevationChangeEntry **, std::__1::allocator<CLCoarseElevationChangeEntry *>> {
            struct CLCoarseElevationChangeEntry **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLCoarseElevationChangeEntry>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation>> {
    struct __split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *>> {
        struct CLDaemonLocation **_field1;
        struct CLDaemonLocation **_field2;
        struct CLDaemonLocation **_field3;
        struct __compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *>> {
            struct CLDaemonLocation **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry>> {
    struct __split_buffer<CLElevationChangeEntry *, std::__1::allocator<CLElevationChangeEntry *>> {
        struct CLElevationChangeEntry **__first_;
        struct CLElevationChangeEntry **__begin_;
        struct CLElevationChangeEntry **__end_;
        struct __compressed_pair<CLElevationChangeEntry **, std::__1::allocator<CLElevationChangeEntry *>> {
            struct CLElevationChangeEntry **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLElevationChangeEntry>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<CLExerciseMinuteData, std::__1::allocator<CLExerciseMinuteData>> {
    struct __split_buffer<CLExerciseMinuteData *, std::__1::allocator<CLExerciseMinuteData *>> {
        struct CLExerciseMinuteData **_field1;
        struct CLExerciseMinuteData **_field2;
        struct CLExerciseMinuteData **_field3;
        struct __compressed_pair<CLExerciseMinuteData **, std::__1::allocator<CLExerciseMinuteData *>> {
            struct CLExerciseMinuteData **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteData>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLExtendedStepCountEntry, std::__1::allocator<CLExtendedStepCountEntry>> {
    struct __split_buffer<CLExtendedStepCountEntry *, std::__1::allocator<CLExtendedStepCountEntry *>> {
        struct CLExtendedStepCountEntry **_field1;
        struct CLExtendedStepCountEntry **_field2;
        struct CLExtendedStepCountEntry **_field3;
        struct __compressed_pair<CLExtendedStepCountEntry **, std::__1::allocator<CLExtendedStepCountEntry *>> {
            struct CLExtendedStepCountEntry **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLExtendedStepCountEntry>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLHealthAssessmentNotifier::MonitoringPeriod, std::__1::allocator<CLHealthAssessmentNotifier::MonitoringPeriod>> {
    struct __split_buffer<CLHealthAssessmentNotifier::MonitoringPeriod *, std::__1::allocator<CLHealthAssessmentNotifier::MonitoringPeriod *>> {
        struct MonitoringPeriod **_field1;
        struct MonitoringPeriod **_field2;
        struct MonitoringPeriod **_field3;
        struct __compressed_pair<CLHealthAssessmentNotifier::MonitoringPeriod **, std::__1::allocator<CLHealthAssessmentNotifier::MonitoringPeriod *>> {
            struct MonitoringPeriod **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLHealthAssessmentNotifier::MonitoringPeriod>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLHealthAssessmentNotifier::WristStatus, std::__1::allocator<CLHealthAssessmentNotifier::WristStatus>> {
    struct __split_buffer<CLHealthAssessmentNotifier::WristStatus *, std::__1::allocator<CLHealthAssessmentNotifier::WristStatus *>> {
        struct WristStatus **_field1;
        struct WristStatus **_field2;
        struct WristStatus **_field3;
        struct __compressed_pair<CLHealthAssessmentNotifier::WristStatus **, std::__1::allocator<CLHealthAssessmentNotifier::WristStatus *>> {
            struct WristStatus **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLHealthAssessmentNotifier::WristStatus>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLHeartRateDriftEstimator::Sample, std::__1::allocator<CLHeartRateDriftEstimator::Sample>> {
    struct __split_buffer<CLHeartRateDriftEstimator::Sample *, std::__1::allocator<CLHeartRateDriftEstimator::Sample *>> {
        struct Sample **_field1;
        struct Sample **_field2;
        struct Sample **_field3;
        struct __compressed_pair<CLHeartRateDriftEstimator::Sample **, std::__1::allocator<CLHeartRateDriftEstimator::Sample *>> {
            struct Sample **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLHeartRateDriftEstimator::Sample>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLIntegrityMonitor::MotionInfo, std::__1::allocator<CLIntegrityMonitor::MotionInfo>> {
    struct __split_buffer<CLIntegrityMonitor::MotionInfo *, std::__1::allocator<CLIntegrityMonitor::MotionInfo *>> {
        struct MotionInfo **_field1;
        struct MotionInfo **_field2;
        struct MotionInfo **_field3;
        struct __compressed_pair<CLIntegrityMonitor::MotionInfo **, std::__1::allocator<CLIntegrityMonitor::MotionInfo *>> {
            struct MotionInfo **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLIntegrityMonitor::MotionInfo>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLMotionCoprocessorInterface::MotionState, std::__1::allocator<CLMotionCoprocessorInterface::MotionState>> {
    struct __split_buffer<CLMotionCoprocessorInterface::MotionState *, std::__1::allocator<CLMotionCoprocessorInterface::MotionState *>> {
        struct MotionState **_field1;
        struct MotionState **_field2;
        struct MotionState **_field3;
        struct __compressed_pair<CLMotionCoprocessorInterface::MotionState **, std::__1::allocator<CLMotionCoprocessorInterface::MotionState *>> {
            struct MotionState **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLMotionCoprocessorInterface::MotionState>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLMotionStateMediator_Type::MediatedMotionActivity, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity>> {
    struct __split_buffer<CLMotionStateMediator_Type::MediatedMotionActivity *, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity *>> {
        struct MediatedMotionActivity **_field1;
        struct MediatedMotionActivity **_field2;
        struct MediatedMotionActivity **_field3;
        struct __compressed_pair<CLMotionStateMediator_Type::MediatedMotionActivity **, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity *>> {
            struct MediatedMotionActivity **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry>> {
    struct __split_buffer<CLOdometerEntry *, std::__1::allocator<CLOdometerEntry *>> {
        struct CLOdometerEntry **_field1;
        struct CLOdometerEntry **_field2;
        struct CLOdometerEntry **_field3;
        struct __compressed_pair<CLOdometerEntry **, std::__1::allocator<CLOdometerEntry *>> {
            struct CLOdometerEntry **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLOdometerEntry>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket>> {
    struct __split_buffer<CLSensorRecorderDataPacket *, std::__1::allocator<CLSensorRecorderDataPacket *>> {
        struct CLSensorRecorderDataPacket **_field1;
        struct CLSensorRecorderDataPacket **_field2;
        struct CLSensorRecorderDataPacket **_field3;
        struct __compressed_pair<CLSensorRecorderDataPacket **, std::__1::allocator<CLSensorRecorderDataPacket *>> {
            struct CLSensorRecorderDataPacket **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLSensorRecorderDataPacket>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry>> {
    struct __split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *>> {
        struct CLStepCountEntry **_field1;
        struct CLStepCountEntry **_field2;
        struct CLStepCountEntry **_field3;
        struct __compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *>> {
            struct CLStepCountEntry **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLStrideCalEntry, std::__1::allocator<CLStrideCalEntry>> {
    struct __split_buffer<CLStrideCalEntry *, std::__1::allocator<CLStrideCalEntry *>> {
        CDStruct_183601bc **__first_;
        CDStruct_183601bc **__begin_;
        CDStruct_183601bc **__end_;
        struct __compressed_pair<CLStrideCalEntry **, std::__1::allocator<CLStrideCalEntry *>> {
            CDStruct_183601bc **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLStrideCalEntry>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<CLSwimDataInterface::StrokeEntry, std::__1::allocator<CLSwimDataInterface::StrokeEntry>> {
    struct __split_buffer<CLSwimDataInterface::StrokeEntry *, std::__1::allocator<CLSwimDataInterface::StrokeEntry *>> {
        struct StrokeEntry **_field1;
        struct StrokeEntry **_field2;
        struct StrokeEntry **_field3;
        struct __compressed_pair<CLSwimDataInterface::StrokeEntry **, std::__1::allocator<CLSwimDataInterface::StrokeEntry *>> {
            struct StrokeEntry **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLSwimDataInterface::StrokeEntry>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLSwimDetectedTurn, std::__1::allocator<CLSwimDetectedTurn>> {
    struct __split_buffer<CLSwimDetectedTurn *, std::__1::allocator<CLSwimDetectedTurn *>> {
        struct CLSwimDetectedTurn **_field1;
        struct CLSwimDetectedTurn **_field2;
        struct CLSwimDetectedTurn **_field3;
        struct __compressed_pair<CLSwimDetectedTurn **, std::__1::allocator<CLSwimDetectedTurn *>> {
            struct CLSwimDetectedTurn **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLSwimDetectedTurn>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLSwimEntry, std::__1::allocator<CLSwimEntry>> {
    struct __split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *>> {
        struct CLSwimEntry **_field1;
        struct CLSwimEntry **_field2;
        struct CLSwimEntry **_field3;
        struct __compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *>> {
            struct CLSwimEntry **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLVO2MaxInputCollector::HRSample, std::__1::allocator<CLVO2MaxInputCollector::HRSample>> {
    struct __split_buffer<CLVO2MaxInputCollector::HRSample *, std::__1::allocator<CLVO2MaxInputCollector::HRSample *>> {
        struct HRSample **_field1;
        struct HRSample **_field2;
        struct HRSample **_field3;
        struct __compressed_pair<CLVO2MaxInputCollector::HRSample **, std::__1::allocator<CLVO2MaxInputCollector::HRSample *>> {
            struct HRSample **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLVO2MaxInputCollector::HRSample>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLVehicleConnectionNotifier::CLBTDialogDeviceInfo, std::__1::allocator<CLVehicleConnectionNotifier::CLBTDialogDeviceInfo>> {
    struct __split_buffer<CLVehicleConnectionNotifier::CLBTDialogDeviceInfo *, std::__1::allocator<CLVehicleConnectionNotifier::CLBTDialogDeviceInfo *>> {
        struct CLBTDialogDeviceInfo **_field1;
        struct CLBTDialogDeviceInfo **_field2;
        struct CLBTDialogDeviceInfo **_field3;
        struct __compressed_pair<CLVehicleConnectionNotifier::CLBTDialogDeviceInfo **, std::__1::allocator<CLVehicleConnectionNotifier::CLBTDialogDeviceInfo *>> {
            struct CLBTDialogDeviceInfo **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLVehicleConnectionNotifier::CLBTDialogDeviceInfo>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLWifiService::ScanRequest, std::__1::allocator<CLWifiService::ScanRequest>> {
    struct __split_buffer<CLWifiService::ScanRequest *, std::__1::allocator<CLWifiService::ScanRequest *>> {
        struct ScanRequest **_field1;
        struct ScanRequest **_field2;
        struct ScanRequest **_field3;
        struct __compressed_pair<CLWifiService::ScanRequest **, std::__1::allocator<CLWifiService::ScanRequest *>> {
            struct ScanRequest **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLWifiService::ScanRequest>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLWorkoutClassifier_Type::CLWorkoutClassifierResult, std::__1::allocator<CLWorkoutClassifier_Type::CLWorkoutClassifierResult>> {
    struct __split_buffer<CLWorkoutClassifier_Type::CLWorkoutClassifierResult *, std::__1::allocator<CLWorkoutClassifier_Type::CLWorkoutClassifierResult *>> {
        CDStruct_183601bc **_field1;
        CDStruct_183601bc **_field2;
        CDStruct_183601bc **_field3;
        struct __compressed_pair<CLWorkoutClassifier_Type::CLWorkoutClassifierResult **, std::__1::allocator<CLWorkoutClassifier_Type::CLWorkoutClassifierResult *>> {
            CDStruct_183601bc **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLWorkoutClassifier_Type::CLWorkoutClassifierResult>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLWorkoutPredictorTurnDetector::Turn, std::__1::allocator<CLWorkoutPredictorTurnDetector::Turn>> {
    struct __split_buffer<CLWorkoutPredictorTurnDetector::Turn *, std::__1::allocator<CLWorkoutPredictorTurnDetector::Turn *>> {
        struct Turn **_field1;
        struct Turn **_field2;
        struct Turn **_field3;
        struct __compressed_pair<CLWorkoutPredictorTurnDetector::Turn **, std::__1::allocator<CLWorkoutPredictorTurnDetector::Turn *>> {
            struct Turn **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLWorkoutPredictorTurnDetector::Turn>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLWorkoutPredictorWatchPressure, std::__1::allocator<CLWorkoutPredictorWatchPressure>> {
    struct __split_buffer<CLWorkoutPredictorWatchPressure *, std::__1::allocator<CLWorkoutPredictorWatchPressure *>> {
        struct CLWorkoutPredictorWatchPressure **_field1;
        struct CLWorkoutPredictorWatchPressure **_field2;
        struct CLWorkoutPredictorWatchPressure **_field3;
        struct __compressed_pair<CLWorkoutPredictorWatchPressure **, std::__1::allocator<CLWorkoutPredictorWatchPressure *>> {
            struct CLWorkoutPredictorWatchPressure **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLWorkoutPredictorWatchPressure>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<RelativeAltitude, std::__1::allocator<RelativeAltitude>> {
    struct __split_buffer<RelativeAltitude *, std::__1::allocator<RelativeAltitude *>> {
        struct RelativeAltitude **__first_;
        struct RelativeAltitude **__begin_;
        struct RelativeAltitude **__end_;
        struct __compressed_pair<RelativeAltitude **, std::__1::allocator<RelativeAltitude *>> {
            struct RelativeAltitude **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<RelativeAltitude>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<VO2MaxInput, std::__1::allocator<VO2MaxInput>> {
    struct __split_buffer<VO2MaxInput *, std::__1::allocator<VO2MaxInput *>> {
        struct VO2MaxInput **_field1;
        struct VO2MaxInput **_field2;
        struct VO2MaxInput **_field3;
        struct __compressed_pair<VO2MaxInput **, std::__1::allocator<VO2MaxInput *>> {
            struct VO2MaxInput **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<VO2MaxInput>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<VO2MaxOutput, std::__1::allocator<VO2MaxOutput>> {
    struct __split_buffer<VO2MaxOutput *, std::__1::allocator<VO2MaxOutput *>> {
        struct VO2MaxOutput **_field1;
        struct VO2MaxOutput **_field2;
        struct VO2MaxOutput **_field3;
        struct __compressed_pair<VO2MaxOutput **, std::__1::allocator<VO2MaxOutput *>> {
            struct VO2MaxOutput **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<VO2MaxOutput>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<VO2MaxSummary, std::__1::allocator<VO2MaxSummary>> {
    struct __split_buffer<VO2MaxSummary *, std::__1::allocator<VO2MaxSummary *>> {
        struct VO2MaxSummary **_field1;
        struct VO2MaxSummary **_field2;
        struct VO2MaxSummary **_field3;
        struct __compressed_pair<VO2MaxSummary **, std::__1::allocator<VO2MaxSummary *>> {
            struct VO2MaxSummary **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<VO2MaxSummary>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<WristStateInterval, std::__1::allocator<WristStateInterval>> {
    struct __split_buffer<WristStateInterval *, std::__1::allocator<WristStateInterval *>> {
        struct WristStateInterval **_field1;
        struct WristStateInterval **_field2;
        struct WristStateInterval **_field3;
        struct __compressed_pair<WristStateInterval **, std::__1::allocator<WristStateInterval *>> {
            struct WristStateInterval **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<WristStateInterval>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<_CLFitnessMachineData, std::__1::allocator<_CLFitnessMachineData>> {
    struct __split_buffer<_CLFitnessMachineData *, std::__1::allocator<_CLFitnessMachineData *>> {
        struct _CLFitnessMachineData **_field1;
        struct _CLFitnessMachineData **_field2;
        struct _CLFitnessMachineData **_field3;
        struct __compressed_pair<_CLFitnessMachineData **, std::__1::allocator<_CLFitnessMachineData *>> {
            struct _CLFitnessMachineData **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<_CLFitnessMachineData>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<double, std::__1::allocator<double>> {
    struct __split_buffer<double *, std::__1::allocator<double *>> {
        double **_field1;
        double **_field2;
        double **_field3;
        struct __compressed_pair<double **, std::__1::allocator<double *>> {
            double **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<double>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<float, std::__1::allocator<float>> {
    struct __split_buffer<float *, std::__1::allocator<float *>> {
        float **__first_;
        float **__begin_;
        float **__end_;
        struct __compressed_pair<float **, std::__1::allocator<float *>> {
            float **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<float>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long>>> {
    struct __split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long>*, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long>*>> {
        struct __tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long> **_field1;
        struct __tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long> **_field2;
        struct __tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long> **_field3;
        struct __compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long>**, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long>*>> {
            struct __tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long> **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long>>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long>>> {
    struct __split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long>*, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long>*>> {
        struct __tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long> **_field1;
        struct __tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long> **_field2;
        struct __tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long> **_field3;
        struct __compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long>**, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long>*>> {
            struct __tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long> **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long>>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<std::__1::pair<double, double>, std::__1::allocator<std::__1::pair<double, double>>> {
    struct __split_buffer<std::__1::pair<double, double>*, std::__1::allocator<std::__1::pair<double, double>*>> {
        struct pair<double, double> **__first_;
        struct pair<double, double> **__begin_;
        struct pair<double, double> **__end_;
        struct __compressed_pair<std::__1::pair<double, double>**, std::__1::allocator<std::__1::pair<double, double>*>> {
            struct pair<double, double> **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, double>>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<std::__1::pair<double, unsigned int>, std::__1::allocator<std::__1::pair<double, unsigned int>>> {
    struct __split_buffer<std::__1::pair<double, unsigned int>*, std::__1::allocator<std::__1::pair<double, unsigned int>*>> {
        struct pair<double, unsigned int> **__first_;
        struct pair<double, unsigned int> **__begin_;
        struct pair<double, unsigned int> **__end_;
        struct __compressed_pair<std::__1::pair<double, unsigned int>**, std::__1::allocator<std::__1::pair<double, unsigned int>*>> {
            struct pair<double, unsigned int> **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, unsigned int>>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>, std::__1::allocator<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>>> {
    struct __split_buffer<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>*, std::__1::allocator<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>*>> {
        shared_ptr_16a5184d **__first_;
        shared_ptr_16a5184d **__begin_;
        shared_ptr_16a5184d **__end_;
        struct __compressed_pair<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>**, std::__1::allocator<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>*>> {
            shared_ptr_16a5184d **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>>> {
    struct __split_buffer<std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>*, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>*>> {
        vector_f672cb0f **_field1;
        vector_f672cb0f **_field2;
        vector_f672cb0f **_field3;
        struct __compressed_pair<std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>**, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>*>> {
            vector_f672cb0f **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>>> {
        unsigned long long _field1;
    } _field3;
};

struct duration<long double, std::__1::ratio<1, 1>> {
    long double __rep_;
};

struct duration<long long, std::__1::ratio<1, 1000000000>> {
    long long _field1;
};

struct duration<long long, std::__1::ratio<1, 1000000>> {
    long long _field1;
};

struct duration<long long, std::__1::ratio<1, 1>> {
    long long _field1;
};

struct function<GNSS::DaemonLocation ()> {
    struct __value_func<GNSS::DaemonLocation ()> {
        struct type _field1;
        struct __base<GNSS::DaemonLocation ()> *_field2;
    } _field1;
};

struct function<bool (bool)> {
    struct __value_func<bool (bool)> {
        struct type _field1;
        struct __base<bool (bool)> *_field2;
    } _field1;
};

struct function<bool (void *, bool)> {
    struct __value_func<bool (void *, bool)> {
        struct type __buf_;
        struct __base<bool (void *, bool)> *__f_;
    } __f_;
};

struct function<void (CLAmbientLightDecisionTreeOutput, double)> {
    struct __value_func<void (CLAmbientLightDecisionTreeOutput, double)> {
        struct type _field1;
        struct __base<void (CLAmbientLightDecisionTreeOutput, double)> *_field2;
    } _field1;
};

struct function<void (CLCalorimetryDMFeatureGenerator::Type, CLCalorimetryDMFeatureGenerator::Features)> {
    struct __value_func<void (CLCalorimetryDMFeatureGenerator::Type, CLCalorimetryDMFeatureGenerator::Features)> {
        struct type _field1;
        struct __base<void (CLCalorimetryDMFeatureGenerator::Type, CLCalorimetryDMFeatureGenerator::Features)> *_field2;
    } _field1;
};

struct function<void (CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData)> {
    struct __value_func<void (CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData)> {
        struct type _field1;
        struct __base<void (CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData)> *_field2;
    } _field1;
};

struct function<void (CLWorkoutPredictor_Type::Notification, CLWorkoutPredictor_Type::NotificationData)> {
    struct __value_func<void (CLWorkoutPredictor_Type::Notification, CLWorkoutPredictor_Type::NotificationData)> {
        struct type _field1;
        struct __base<void (CLWorkoutPredictor_Type::Notification, CLWorkoutPredictor_Type::NotificationData)> *_field2;
    } _field1;
};

struct function<void (CMError)> {
    struct __value_func<void (CMError)> {
        struct type _field1;
        struct __base<void (CMError)> *_field2;
    } _field1;
};

struct function<void (bool)> {
    struct __value_func<void (bool)> {
        struct type _field1;
        struct __base<void (bool)> *_field2;
    } _field1;
};

struct function<void (bool, CLLocationType)> {
    struct __value_func<void (bool, CLLocationType)> {
        struct type _field1;
        struct __base<void (bool, CLLocationType)> *_field2;
    } _field1;
};

struct function<void (double)> {
    struct __value_func<void (double)> {
        struct type _field1;
        struct __base<void (double)> *_field2;
    } _field1;
};

struct function<void (int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)> {
    struct __value_func<void (int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)> {
        struct type _field1;
        struct __base<void (int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)> *_field2;
    } _field1;
};

struct internal_state;

struct is_same<std::__1::basic_string<char>, std::__1::basic_string<char>>;

struct list<CLApplicationLifecycleManager::PendingLaunch, std::__1::allocator<CLApplicationLifecycleManager::PendingLaunch>> {
    struct __list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLApplicationLifecycleManager::PendingLaunch, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<CLBTLEBeaconProviderMock::ScanRequest, std::__1::allocator<CLBTLEBeaconProviderMock::ScanRequest>> {
    struct __list_node_base<CLBTLEBeaconProviderMock::ScanRequest, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconProviderMock::ScanRequest, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<CLBTLEBeaconProvider_Type::ProximityScanEvent, std::__1::allocator<CLBTLEBeaconProvider_Type::ProximityScanEvent>> {
    struct __list_node_base<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<CLBTLEBeaconProvider_Type::ProximityZoneEvent, std::__1::allocator<CLBTLEBeaconProvider_Type::ProximityZoneEvent>> {
    struct __list_node_base<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>> {
    struct __list_node_base<CLBTLEBeaconRegion_Type::MonitoredRegion, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconRegion_Type::MonitoredRegion, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<CLDaemonClient::MessageRef, std::__1::allocator<CLDaemonClient::MessageRef>> {
    struct __list_node_base<CLDaemonClient::MessageRef, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonClient::MessageRef, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation>> {
    struct __list_node_base<CLDaemonLocation, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence>> {
    struct __list_node_base<CLFenceManager_Type::CombinedFence, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<CLMotionActivity, std::__1::allocator<CLMotionActivity>> {
    struct __list_node_base<CLMotionActivity, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<CLOdometerEntry, std::__1::allocator<CLOdometerEntry>> {
    struct __list_node_base<CLOdometerEntry, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLOdometerEntry, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<CLPredictedWalkDistanceBoutEntry, std::__1::allocator<CLPredictedWalkDistanceBoutEntry>> {
    struct __list_node_base<CLPredictedWalkDistanceBoutEntry, void *> __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLPredictedWalkDistanceBoutEntry, void *>>> {
        unsigned long long __value_;
    } __size_alloc_;
};

struct list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket>> {
    struct __list_node_base<CLSensorRecorderDataPacket, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSensorRecorderDataPacket, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<CMMsl::Item *, std::__1::allocator<CMMsl::Item *>> {
    struct __list_node_base<CMMsl::Item *, void *> __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CMMsl::Item *, void *>>> {
        unsigned long long __value_;
    } __size_alloc_;
};

struct list<NSMutableDictionary *, std::__1::allocator<NSMutableDictionary *>> {
    struct __list_node_base<NSMutableDictionary *, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<NSMutableDictionary *, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<NSString *, std::__1::allocator<NSString *>> {
    struct __list_node_base<NSString *, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<NSString *, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *>> {
    struct __list_node_base<sqlite3_stmt *, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<std::__1::pair<unsigned int, bool>, std::__1::allocator<std::__1::pair<unsigned int, bool>>> {
    struct __list_node_base<std::__1::pair<unsigned int, bool>, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::pair<unsigned int, bool>, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<unsigned int, std::__1::allocator<unsigned int>> {
    struct __list_node_base<unsigned int, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<unsigned int, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct map<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration, std::__1::less<CLBTLEBeaconProvider_Type::ProximityZone>, std::__1::allocator<std::__1::pair<const CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>>> {
    struct __tree<std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, std::__1::__map_value_compare<CLBTLEBeaconProvider_Type::ProximityZone, std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, std::__1::less<CLBTLEBeaconProvider_Type::ProximityZone>, true>, std::__1::allocator<std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLBTLEBeaconProvider_Type::ProximityZone, std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, std::__1::less<CLBTLEBeaconProvider_Type::ProximityZone>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLBarometerCalibration_Types::Source, double, std::__1::less<CLBarometerCalibration_Types::Source>, std::__1::allocator<std::__1::pair<const CLBarometerCalibration_Types::Source, double>>> {
    struct __tree<std::__1::__value_type<CLBarometerCalibration_Types::Source, double>, std::__1::__map_value_compare<CLBarometerCalibration_Types::Source, std::__1::__value_type<CLBarometerCalibration_Types::Source, double>, std::__1::less<CLBarometerCalibration_Types::Source>, true>, std::__1::allocator<std::__1::__value_type<CLBarometerCalibration_Types::Source, double>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLBarometerCalibration_Types::Source, double>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLBarometerCalibration_Types::Source, std::__1::__value_type<CLBarometerCalibration_Types::Source, double>, std::__1::less<CLBarometerCalibration_Types::Source>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<CLBatteryChargerType, unsigned int, std::__1::less<CLBatteryChargerType>, std::__1::allocator<std::__1::pair<const CLBatteryChargerType, unsigned int>>> {
    struct __tree<std::__1::__value_type<CLBatteryChargerType, unsigned int>, std::__1::__map_value_compare<CLBatteryChargerType, std::__1::__value_type<CLBatteryChargerType, unsigned int>, std::__1::less<CLBatteryChargerType>, true>, std::__1::allocator<std::__1::__value_type<CLBatteryChargerType, unsigned int>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLBatteryChargerType, unsigned int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLBatteryChargerType, std::__1::__value_type<CLBatteryChargerType, unsigned int>, std::__1::less<CLBatteryChargerType>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLClientLocationRouteHintType, unsigned int, std::__1::less<CLClientLocationRouteHintType>, std::__1::allocator<std::__1::pair<const CLClientLocationRouteHintType, unsigned int>>> {
    struct __tree<std::__1::__value_type<CLClientLocationRouteHintType, unsigned int>, std::__1::__map_value_compare<CLClientLocationRouteHintType, std::__1::__value_type<CLClientLocationRouteHintType, unsigned int>, std::__1::less<CLClientLocationRouteHintType>, true>, std::__1::allocator<std::__1::__value_type<CLClientLocationRouteHintType, unsigned int>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLClientLocationRouteHintType, unsigned int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLClientLocationRouteHintType, std::__1::__value_type<CLClientLocationRouteHintType, unsigned int>, std::__1::less<CLClientLocationRouteHintType>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLConnection *, CLDaemonClient *, std::__1::less<CLConnection *>, std::__1::allocator<std::__1::pair<CLConnection *const, CLDaemonClient *>>> {
    struct __tree<std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true>, std::__1::allocator<std::__1::__value_type<CLConnection *, CLDaemonClient *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLConnection *, CLDaemonClient *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLConnection *, CLDaemonGenericClient *, std::__1::less<CLConnection *>, std::__1::allocator<std::__1::pair<CLConnection *const, CLDaemonGenericClient *>>> {
    struct __tree<std::__1::__value_type<CLConnection *, CLDaemonGenericClient *>, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonGenericClient *>, std::__1::less<CLConnection *>, true>, std::__1::allocator<std::__1::__value_type<CLConnection *, CLDaemonGenericClient *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLConnection *, CLDaemonGenericClient *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonGenericClient *>, std::__1::less<CLConnection *>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLDaemonClient *, __CFUserNotification *, std::__1::less<CLDaemonClient *>, std::__1::allocator<std::__1::pair<CLDaemonClient *const, __CFUserNotification *>>> {
    struct __tree<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true>, std::__1::allocator<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLDaemonStats_Type::LocationAccessory::LatencyRangeType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::LatencyRangeType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::LatencyRangeType, unsigned int>>> {
    struct __tree<std::__1::__value_type<CLDaemonStats_Type::LocationAccessory::LatencyRangeType, unsigned int>, std::__1::__map_value_compare<CLDaemonStats_Type::LocationAccessory::LatencyRangeType, std::__1::__value_type<CLDaemonStats_Type::LocationAccessory::LatencyRangeType, unsigned int>, std::__1::less<CLDaemonStats_Type::LocationAccessory::LatencyRangeType>, true>, std::__1::allocator<std::__1::__value_type<CLDaemonStats_Type::LocationAccessory::LatencyRangeType, unsigned int>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLDaemonStats_Type::LocationAccessory::LatencyRangeType, unsigned int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLDaemonStats_Type::LocationAccessory::LatencyRangeType, std::__1::__value_type<CLDaemonStats_Type::LocationAccessory::LatencyRangeType, unsigned int>, std::__1::less<CLDaemonStats_Type::LocationAccessory::LatencyRangeType>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLDaemonStats_Type::LocationAccessory::PASCDTransmissionStateType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::PASCDTransmissionStateType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::PASCDTransmissionStateType, unsigned int>>> {
    struct __tree<std::__1::__value_type<CLDaemonStats_Type::LocationAccessory::PASCDTransmissionStateType, unsigned int>, std::__1::__map_value_compare<CLDaemonStats_Type::LocationAccessory::PASCDTransmissionStateType, std::__1::__value_type<CLDaemonStats_Type::LocationAccessory::PASCDTransmissionStateType, unsigned int>, std::__1::less<CLDaemonStats_Type::LocationAccessory::PASCDTransmissionStateType>, true>, std::__1::allocator<std::__1::__value_type<CLDaemonStats_Type::LocationAccessory::PASCDTransmissionStateType, unsigned int>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLDaemonStats_Type::LocationAccessory::PASCDTransmissionStateType, unsigned int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLDaemonStats_Type::LocationAccessory::PASCDTransmissionStateType, std::__1::__value_type<CLDaemonStats_Type::LocationAccessory::PASCDTransmissionStateType, unsigned int>, std::__1::less<CLDaemonStats_Type::LocationAccessory::PASCDTransmissionStateType>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::PerfRangeType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int>>> {
    struct __tree<std::__1::__value_type<CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int>, std::__1::__map_value_compare<CLDaemonStats_Type::LocationAccessory::PerfRangeType, std::__1::__value_type<CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int>, std::__1::less<CLDaemonStats_Type::LocationAccessory::PerfRangeType>, true>, std::__1::allocator<std::__1::__value_type<CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLDaemonStats_Type::LocationAccessory::PerfRangeType, std::__1::__value_type<CLDaemonStats_Type::LocationAccessory::PerfRangeType, unsigned int>, std::__1::less<CLDaemonStats_Type::LocationAccessory::PerfRangeType>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLDaemonStats_Type::LocationAccessory::SpeedPerfRangeType, unsigned int, std::__1::less<CLDaemonStats_Type::LocationAccessory::SpeedPerfRangeType>, std::__1::allocator<std::__1::pair<const CLDaemonStats_Type::LocationAccessory::SpeedPerfRangeType, unsigned int>>> {
    struct __tree<std::__1::__value_type<CLDaemonStats_Type::LocationAccessory::SpeedPerfRangeType, unsigned int>, std::__1::__map_value_compare<CLDaemonStats_Type::LocationAccessory::SpeedPerfRangeType, std::__1::__value_type<CLDaemonStats_Type::LocationAccessory::SpeedPerfRangeType, unsigned int>, std::__1::less<CLDaemonStats_Type::LocationAccessory::SpeedPerfRangeType>, true>, std::__1::allocator<std::__1::__value_type<CLDaemonStats_Type::LocationAccessory::SpeedPerfRangeType, unsigned int>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLDaemonStats_Type::LocationAccessory::SpeedPerfRangeType, unsigned int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLDaemonStats_Type::LocationAccessory::SpeedPerfRangeType, std::__1::__value_type<CLDaemonStats_Type::LocationAccessory::SpeedPerfRangeType, unsigned int>, std::__1::less<CLDaemonStats_Type::LocationAccessory::SpeedPerfRangeType>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLEmergencyEED2::Event, NSObject<OS_dispatch_source>*, std::__1::less<CLEmergencyEED2::Event>, std::__1::allocator<std::__1::pair<const CLEmergencyEED2::Event, NSObject<OS_dispatch_source>*>>> {
    struct __tree<std::__1::__value_type<CLEmergencyEED2::Event, NSObject<OS_dispatch_source>*>, std::__1::__map_value_compare<CLEmergencyEED2::Event, std::__1::__value_type<CLEmergencyEED2::Event, NSObject<OS_dispatch_source>*>, std::__1::less<CLEmergencyEED2::Event>, true>, std::__1::allocator<std::__1::__value_type<CLEmergencyEED2::Event, NSObject<OS_dispatch_source>*>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLEmergencyEED2::Event, NSObject<OS_dispatch_source>*>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLEmergencyEED2::Event, std::__1::__value_type<CLEmergencyEED2::Event, NSObject<OS_dispatch_source>*>, std::__1::less<CLEmergencyEED2::Event>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLEmergencyEED2::State, CLEmergencyEED2::State (CLEmergencyEED2::*)(CLEmergencyEED2::Event), std::__1::less<CLEmergencyEED2::State>, std::__1::allocator<std::__1::pair<const CLEmergencyEED2::State, CLEmergencyEED2::State (CLEmergencyEED2::*)(CLEmergencyEED2::Event)>>> {
    struct __tree<std::__1::__value_type<CLEmergencyEED2::State, CLEmergencyEED2::State (CLEmergencyEED2::*)(CLEmergencyEED2::Event)>, std::__1::__map_value_compare<CLEmergencyEED2::State, std::__1::__value_type<CLEmergencyEED2::State, CLEmergencyEED2::State (CLEmergencyEED2::*)(CLEmergencyEED2::Event)>, std::__1::less<CLEmergencyEED2::State>, true>, std::__1::allocator<std::__1::__value_type<CLEmergencyEED2::State, CLEmergencyEED2::State (CLEmergencyEED2::*)(CLEmergencyEED2::Event)>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLEmergencyEED2::State, CLEmergencyEED2::State (CLEmergencyEED2::*)(CLEmergencyEED2::Event)>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLEmergencyEED2::State, std::__1::__value_type<CLEmergencyEED2::State, CLEmergencyEED2::State (CLEmergencyEED2::*)(CLEmergencyEED2::Event)>, std::__1::less<CLEmergencyEED2::State>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLFenceManager_Type::Fence, CLFenceManager::PendingFenceState, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceManager::PendingFenceState>>> {
    struct __tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFenceState>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFenceState>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFenceState>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFenceState>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFenceState>, std::__1::less<CLFenceManager_Type::Fence>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLFenceManager_Type::Fence, CLFenceManager::PendingFenceTransition, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceManager::PendingFenceTransition>>> {
    struct __tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFenceTransition>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFenceTransition>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFenceTransition>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFenceTransition>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFenceTransition>, std::__1::less<CLFenceManager_Type::Fence>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>>> {
    struct __tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLFenceManager_Type::Fence, bool, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, bool>>> {
    struct __tree<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, bool>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLFenceManager_Type::Fence, int, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, int>>> {
    struct __tree<std::__1::__value_type<CLFenceManager_Type::Fence, int>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, int>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, int>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, int>, std::__1::less<CLFenceManager_Type::Fence>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLLocationController::LocationProvider, CLLocationController::ProviderClient, std::__1::less<CLLocationController::LocationProvider>, std::__1::allocator<std::__1::pair<const CLLocationController::LocationProvider, CLLocationController::ProviderClient>>> {
    struct __tree<std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, std::__1::less<CLLocationController::LocationProvider>, true>, std::__1::allocator<std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, std::__1::less<CLLocationController::LocationProvider>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>>, std::__1::less<CLLocationController::LocationProvider>, std::__1::allocator<std::__1::pair<const CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>>>>> {
    struct __tree<std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>>>, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>>>, std::__1::less<CLLocationController::LocationProvider>, true>, std::__1::allocator<std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>>>, std::__1::less<CLLocationController::LocationProvider>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool>>> {
    struct __tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLLocationType, unsigned int, std::__1::less<CLLocationType>, std::__1::allocator<std::__1::pair<const CLLocationType, unsigned int>>> {
    struct __tree<std::__1::__value_type<CLLocationType, unsigned int>, std::__1::__map_value_compare<CLLocationType, std::__1::__value_type<CLLocationType, unsigned int>, std::__1::less<CLLocationType>, true>, std::__1::allocator<std::__1::__value_type<CLLocationType, unsigned int>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationType, unsigned int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationType, std::__1::__value_type<CLLocationType, unsigned int>, std::__1::less<CLLocationType>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLMacAddress, double, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, double>>> {
    struct __tree<std::__1::__value_type<CLMacAddress, double>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, double>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, double>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, double>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, double>, std::__1::less<CLMacAddress>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLTelephonyService_Type::CdmaCell, double, std::__1::less<CLTelephonyService_Type::CdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::CdmaCell, double>>> {
    struct __tree<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::CdmaCell, std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::less<CLTelephonyService_Type::CdmaCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::CdmaCell, std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::less<CLTelephonyService_Type::CdmaCell>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLTelephonyService_Type::Cell, double, std::__1::less<CLTelephonyService_Type::Cell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::Cell, double>>> {
    struct __tree<std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::Cell, std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::less<CLTelephonyService_Type::Cell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::Cell, double>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::Cell, double>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::Cell, std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::less<CLTelephonyService_Type::Cell>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLTelephonyService_Type::LteCell, double, std::__1::less<CLTelephonyService_Type::LteCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::LteCell, double>>> {
    struct __tree<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::LteCell, std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::less<CLTelephonyService_Type::LteCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::LteCell, std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::less<CLTelephonyService_Type::LteCell>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLTelephonyService_Type::ScdmaCell, double, std::__1::less<CLTelephonyService_Type::ScdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::ScdmaCell, double>>> {
    struct __tree<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::ScdmaCell, std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::less<CLTelephonyService_Type::ScdmaCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::ScdmaCell, std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::less<CLTelephonyService_Type::ScdmaCell>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<TileId, CLTileFile *, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, CLTileFile *>>> {
    struct __tree<std::__1::__value_type<TileId, CLTileFile *>, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, CLTileFile *>, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, CLTileFile *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, CLTileFile *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, CLTileFile *>, std::__1::less<TileId>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile>>, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile>>>>> {
    struct __tree<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile>>>, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile>>>, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile>>>, std::__1::less<TileId>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<id, double, std::__1::less<id>, std::__1::allocator<std::__1::pair<const id, double>>> {
    struct __tree<std::__1::__value_type<id, double>, std::__1::__map_value_compare<id, std::__1::__value_type<id, double>, std::__1::less<id>, true>, std::__1::allocator<std::__1::__value_type<id, double>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id, double>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<id, std::__1::__value_type<id, double>, std::__1::less<id>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<id<CLSignificantVisitManagerClientProtocol>, NSString *, std::__1::less<id<CLSignificantVisitManagerClientProtocol>>, std::__1::allocator<std::__1::pair<const id<CLSignificantVisitManagerClientProtocol>, NSString *>>> {
    struct __tree<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::less<id<CLSignificantVisitManagerClientProtocol>>, true>, std::__1::allocator<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::less<id<CLSignificantVisitManagerClientProtocol>>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<int, CLDaemonLocation, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLDaemonLocation>>> {
    struct __tree<std::__1::__value_type<int, CLDaemonLocation>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLDaemonLocation>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLDaemonLocation>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLDaemonLocation>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLDaemonLocation>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLCarrierSettings_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLCarrierSettings_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLCarrierSettings_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLCarrierSettings_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLCarrierSettings_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLCarrierSettings_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLCarrierSettings_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLCarrierSettings_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLCarrierSettings_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLCarrierSettings_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLCarrierSettings_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLCarrierSettings_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLCarrierSettings_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLCarrierSettings_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLQmiClientManager_Type::Notification, CLQmiClientManager_Type::NotificationData, char, CLQmiClientManager_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLQmiClientManager_Type::Notification, CLQmiClientManager_Type::NotificationData, char, CLQmiClientManager_Type::RegInfo>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLQmiClientManager_Type::Notification, CLQmiClientManager_Type::NotificationData, char, CLQmiClientManager_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLQmiClientManager_Type::Notification, CLQmiClientManager_Type::NotificationData, char, CLQmiClientManager_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLQmiClientManager_Type::Notification, CLQmiClientManager_Type::NotificationData, char, CLQmiClientManager_Type::RegInfo>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLQmiClientManager_Type::Notification, CLQmiClientManager_Type::NotificationData, char, CLQmiClientManager_Type::RegInfo>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLQmiClientManager_Type::Notification, CLQmiClientManager_Type::NotificationData, char, CLQmiClientManager_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLQmiClientManager_Type::Notification, CLQmiClientManager_Type::NotificationData, char, CLQmiClientManager_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLQmiClientManager_Type::Notification, CLQmiClientManager_Type::NotificationData, char, CLQmiClientManager_Type::RegInfo>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLQmiClientManager_Type::Notification, CLQmiClientManager_Type::NotificationData, char, CLQmiClientManager_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLQmiClientManager_Type::Notification, CLQmiClientManager_Type::NotificationData, char, CLQmiClientManager_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLQmiClientManager_Type::Notification, CLQmiClientManager_Type::NotificationData, char, CLQmiClientManager_Type::RegInfo>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLQmiClientManager_Type::Notification, CLQmiClientManager_Type::NotificationData, char, CLQmiClientManager_Type::RegInfo>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLQmiClientManager_Type::Notification, CLQmiClientManager_Type::NotificationData, char, CLQmiClientManager_Type::RegInfo>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, const char *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, const char *>>> {
    struct __tree<std::__1::__value_type<int, const char *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, const char *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, const char *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, const char *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, const char *>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, int, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, int>>> {
    struct __tree<std::__1::__value_type<int, int>, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, int>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample>>, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample>>>>> {
    struct __tree<std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample>>>, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample>>>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample>>>, std::__1::less<int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<int, std::__1::vector<int, std::__1::allocator<int>>, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, std::__1::vector<int, std::__1::allocator<int>>>>> {
    struct __tree<std::__1::__value_type<int, std::__1::vector<int, std::__1::allocator<int>>>, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::vector<int, std::__1::allocator<int>>>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, std::__1::vector<int, std::__1::allocator<int>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, std::__1::vector<int, std::__1::allocator<int>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::vector<int, std::__1::allocator<int>>>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, CLBTDeviceEntry, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLBTDeviceEntry>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, CLBTDeviceEntry>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBTDeviceEntry>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, CLBTDeviceEntry>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, CLBTDeviceEntry>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBTDeviceEntry>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, CLBluetoothService_Type::Device, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLBluetoothService_Type::Device>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, CLTokenBucket, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLTokenBucket>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, CLTokenBucket>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLTokenBucket>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, CLTokenBucket>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, CLTokenBucket>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLTokenBucket>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, bool, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, bool>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, bool>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, bool>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, double, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, double>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, double>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, double>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, double>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, double>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, double>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, int>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider>>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider>>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider>>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider>>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider>>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, std::__1::unique_ptr<CLInUseLevelTracker::Assertion, std::__1::default_delete<CLInUseLevelTracker::Assertion>>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unique_ptr<CLInUseLevelTracker::Assertion, std::__1::default_delete<CLInUseLevelTracker::Assertion>>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLInUseLevelTracker::Assertion, std::__1::default_delete<CLInUseLevelTracker::Assertion>>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLInUseLevelTracker::Assertion, std::__1::default_delete<CLInUseLevelTracker::Assertion>>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLInUseLevelTracker::Assertion, std::__1::default_delete<CLInUseLevelTracker::Assertion>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLInUseLevelTracker::Assertion, std::__1::default_delete<CLInUseLevelTracker::Assertion>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLInUseLevelTracker::Assertion, std::__1::default_delete<CLInUseLevelTracker::Assertion>>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, std::__1::vector<int, std::__1::allocator<int>>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::vector<int, std::__1::allocator<int>>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<int, std::__1::allocator<int>>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<int, std::__1::allocator<int>>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<int, std::__1::allocator<int>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<int, std::__1::allocator<int>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<int, std::__1::allocator<int>>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, unsigned int, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned int>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned int>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned int>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned int>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned int, CLBarometerCalibrationSource *, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, CLBarometerCalibrationSource *>>> {
    struct __tree<std::__1::__value_type<unsigned int, CLBarometerCalibrationSource *>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, CLBarometerCalibrationSource *>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, CLBarometerCalibrationSource *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, CLBarometerCalibrationSource *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, CLBarometerCalibrationSource *>, std::__1::less<unsigned int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned int, std::__1::map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>>>>> {
    struct __tree<std::__1::__value_type<unsigned int, std::__1::map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>>>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>>>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>>>, std::__1::less<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int>>> {
    struct __tree<std::__1::__value_type<unsigned int, unsigned int>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, unsigned int>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer>>, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer>>>>> {
    struct __tree<std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer>>>, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer>>>, std::__1::less<unsigned long long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer>>>, std::__1::less<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned long, int, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, int>>> {
    struct __tree<std::__1::__value_type<unsigned long, int>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, int>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct multiset<double, std::__1::less<double>, std::__1::allocator<double>> {
    struct __tree<double, std::__1::less<double>, std::__1::allocator<double>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<double, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<double>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct multiset<float, std::__1::less<float>, std::__1::allocator<float>> {
    struct __tree<float, std::__1::less<float>, std::__1::allocator<float>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<float, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<float>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct multiset<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> {
    struct __tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> _field1;
};

struct mutex {
    struct _opaque_pthread_mutex_t {
        long long _field1;
        char _field2[56];
    } _field1;
};

struct optional<CLGnssAvailabilityPredictor::Output> {
    union {
        char _field1;
        struct Output _field2;
    } _field1;
    _Bool _field2;
};

struct optional<CLIndoorError> {
    _Bool m_initialized;
    struct aligned_storage<CLIndoorError> m_storage;
};

struct optional<CLLastFix> {
    _Bool m_initialized;
    struct aligned_storage<CLLastFix> m_storage;
};

struct optional<CLMicroLocationProto::NowPlaying> {
    union {
        char _field1;
        struct NowPlaying _field2;
    } _field1;
    _Bool _field2;
};

struct optional<CLOldWifiScanner::LocationConfiguration> {
    union {
        char _field1;
        struct LocationConfiguration _field2;
    } _field1;
    _Bool _field2;
};

struct optional<CLWifiService_Type::AccessPoint> {
    union {
        char _field1;
        struct AccessPoint _field2;
    } _field1;
    _Bool _field2;
};

struct optional<_CLSLVInterestType> {
    union {
        char _field1;
        int _field2;
    } _field1;
    _Bool _field2;
};

struct optional<double> {
    union {
        char _field1;
        double _field2;
    } _field1;
    _Bool _field2;
};

struct optional<std::__1::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1>>>> {
    union {
        char _field1;
        time_point_406bde99 _field2;
    } _field1;
    _Bool _field2;
};

struct optional<std::__1::chrono::time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000>>>> {
    _Bool m_initialized;
    struct aligned_storage<std::__1::chrono::time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000>>>> m_storage;
};

struct optional<std::__1::chrono::time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000>>>> {
    _Bool _field1;
    struct aligned_storage<std::__1::chrono::time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000>>>> _field2;
};

struct optional<std::__1::vector<int, std::__1::allocator<int>>> {
    union {
        char _field1;
        vector_3203cf93 _field2;
    } _field1;
    _Bool _field2;
};

struct os_state_hints_s {
    unsigned int _field1;
    char *_field2;
    unsigned int _field3;
    unsigned int _field4;
};

struct pair<double, CLMotionActivity::Type>;

struct pair<double, CLNmeaGGA> {
    double _field1;
    struct {
        CDStruct_e2152fa8 _field1;
        CDStruct_d998682e _field2;
        CDStruct_d998682e _field3;
        int _field4;
        int _field5;
        int _field6;
        int _field7;
        int _field8;
        int _field9;
        int _field10;
        unsigned long long _field11;
    } _field2;
};

struct pair<double, CLNmeaRMC> {
    double _field1;
    struct {
        CDStruct_e2152fa8 _field1;
        int _field2;
        CDStruct_d998682e _field3;
        CDStruct_d998682e _field4;
        int _field5;
        int _field6;
        struct {
            int _field1;
            int _field2;
            int _field3;
        } _field7;
        int _field8;
        int _field9;
        int _field10;
        unsigned long long _field11;
    } _field2;
};

struct pair<double, double>;

struct pair<double, unsigned int>;

struct queue<std::__1::pair<double, unsigned int>, std::__1::deque<std::__1::pair<double, unsigned int>, std::__1::allocator<std::__1::pair<double, unsigned int>>>> {
    struct deque<std::__1::pair<double, unsigned int>, std::__1::allocator<std::__1::pair<double, unsigned int>>> c;
};

struct set<CLClientManager_Type::Notification, std::__1::less<CLClientManager_Type::Notification>, std::__1::allocator<CLClientManager_Type::Notification>> {
    struct __tree<CLClientManager_Type::Notification, std::__1::less<CLClientManager_Type::Notification>, std::__1::allocator<CLClientManager_Type::Notification>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<CLClientManager_Type::Notification, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<CLClientManager_Type::Notification>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<CLDaemonStatus_Type::Notification, std::__1::less<CLDaemonStatus_Type::Notification>, std::__1::allocator<CLDaemonStatus_Type::Notification>> {
    struct __tree<CLDaemonStatus_Type::Notification, std::__1::less<CLDaemonStatus_Type::Notification>, std::__1::allocator<CLDaemonStatus_Type::Notification>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<CLDaemonStatus_Type::Notification, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<CLDaemonStatus_Type::Notification>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<CLDataProtectionManager_Type::Notification, std::__1::less<CLDataProtectionManager_Type::Notification>, std::__1::allocator<CLDataProtectionManager_Type::Notification>> {
    struct __tree<CLDataProtectionManager_Type::Notification, std::__1::less<CLDataProtectionManager_Type::Notification>, std::__1::allocator<CLDataProtectionManager_Type::Notification>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<CLDataProtectionManager_Type::Notification, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<CLDataProtectionManager_Type::Notification>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence>> {
    struct __tree<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<CLFenceManager_Type::Fence, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<CLFenceManager_Type::Fence>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<CLHarvestPassKitNotificationRegistrant *, std::__1::less<CLHarvestPassKitNotificationRegistrant *>, std::__1::allocator<CLHarvestPassKitNotificationRegistrant *>> {
    struct __tree<CLHarvestPassKitNotificationRegistrant *, std::__1::less<CLHarvestPassKitNotificationRegistrant *>, std::__1::allocator<CLHarvestPassKitNotificationRegistrant *>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<CLHarvestPassKitNotificationRegistrant *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<CLHarvestPassKitNotificationRegistrant *>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<CLLocationProvider_Type::Notification, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<CLLocationProvider_Type::Notification>> {
    struct __tree<CLLocationProvider_Type::Notification, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<CLLocationProvider_Type::Notification>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<CLLocationProvider_Type::Notification, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<CLLocationProvider_Type::Notification>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<CLMapMatchingEngine *, std::__1::less<CLMapMatchingEngine *>, std::__1::allocator<CLMapMatchingEngine *>> {
    struct __tree<CLMapMatchingEngine *, std::__1::less<CLMapMatchingEngine *>, std::__1::allocator<CLMapMatchingEngine *>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<CLMapMatchingEngine *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<CLMapMatchingEngine *>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<CLMotionState_Type::Notification, std::__1::less<CLMotionState_Type::Notification>, std::__1::allocator<CLMotionState_Type::Notification>> {
    struct __tree<CLMotionState_Type::Notification, std::__1::less<CLMotionState_Type::Notification>, std::__1::allocator<CLMotionState_Type::Notification>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<CLMotionState_Type::Notification, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<CLMotionState_Type::Notification>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<CLNetworkLocationServerResponseListener *, std::__1::less<CLNetworkLocationServerResponseListener *>, std::__1::allocator<CLNetworkLocationServerResponseListener *>> {
    struct __tree<CLNetworkLocationServerResponseListener *, std::__1::less<CLNetworkLocationServerResponseListener *>, std::__1::allocator<CLNetworkLocationServerResponseListener *>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<CLNetworkLocationServerResponseListener *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<CLNetworkLocationServerResponseListener *>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<CMActivityAlarmLocal *, CLActivityAlarmConcentrator::AlarmCompare, std::__1::allocator<CMActivityAlarmLocal *>> {
    struct __tree<CMActivityAlarmLocal *, CLActivityAlarmConcentrator::AlarmCompare, std::__1::allocator<CMActivityAlarmLocal *>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<CMActivityAlarmLocal *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, CLActivityAlarmConcentrator::AlarmCompare> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<int, std::__1::less<int>, std::__1::allocator<int>> {
    struct __tree<int, std::__1::less<int>, std::__1::allocator<int>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<int, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<int>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<long, std::__1::less<long>, std::__1::allocator<long>> {
    struct __tree<long, std::__1::less<long>, std::__1::allocator<long>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<long, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<long>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> {
    struct __tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> __tree_;
};

struct set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int>> {
    struct __tree<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<unsigned int, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<unsigned int>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct shared_ptr<CLActivityAggregator<CLSignificantElevation, CLActivityDB::ClassCDataProtectionPolicy>> {
    struct CLActivityAggregator<CLSignificantElevation, CLActivityDB::ClassCDataProtectionPolicy> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLActivityLoggerPolicy> {
    struct CLActivityLoggerPolicy *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLActivityRecorderDb<CLExerciseMinuteData, CLActivityDB::ClassCDataProtectionPolicy>> {
    struct CLActivityRecorderDb<CLExerciseMinuteData, CLActivityDB::ClassCDataProtectionPolicy> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLActivityRecorderDb<CLNatalieData, CLActivityDB::ClassCDataProtectionPolicy>> {
    struct CLActivityRecorderDb<CLNatalieData, CLActivityDB::ClassCDataProtectionPolicy> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLActivityRecorderDb<CLSedentaryAlarmData, CLActivityDB::ClassCDataProtectionPolicy>> {
    struct CLActivityRecorderDb<CLSedentaryAlarmData, CLActivityDB::ClassCDataProtectionPolicy> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLActivityRecorderDb<CLSpringTrackerEntry, CLActivityDB::ClassCDataProtectionPolicy>> {
    struct CLActivityRecorderDb<CLSpringTrackerEntry, CLActivityDB::ClassCDataProtectionPolicy> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLActivityRecorderDb<CLStepCountEntry, CLActivityDB::ClassCDataProtectionPolicy>> {
    struct CLActivityRecorderDb<CLStepCountEntry, CLActivityDB::ClassCDataProtectionPolicy> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLActivityRecorderDb<MaxMets, CLActivityDB::ClassBDataProtectionPolicy>> {
    struct CLActivityRecorderDb<MaxMets, CLActivityDB::ClassBDataProtectionPolicy> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLAvengerHarvestInterface::External> {
    struct External *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> {
    struct CLBarometerCalibrationData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationWifiData> {
    struct CLBarometerCalibrationWifiData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLBatchedLocations> {
    struct CLBatchedLocations *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLClientManager::PersistentSubscriptionPersistenceBackend> {
    struct PersistentSubscriptionPersistenceBackend *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLElevationRecorderDb> {
    struct CLElevationRecorderDb *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLEmergencyAWD> {
    struct CLEmergencyAWD *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLEmergencyEED2> {
    struct CLEmergencyEED2 *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLExerciseMinuteRecorderDb> {
    struct CLExerciseMinuteRecorderDb *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLHarvestController> {
    struct CLHarvestController *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLICachedLookupWifiAccessPointLocationService> {
    struct CLICachedLookupWifiAccessPointLocationService *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLIWifiLocationChannelSelectionService> {
    struct CLIWifiLocationChannelSelectionService *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLInUseLevelTracker> {
    struct CLInUseLevelTracker *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLIoHidInterface::Device> {
    struct Device *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLMapGeometry> {
    struct CLMapGeometry *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLMaxMetsProcessingRecorderDb> {
    struct CLMaxMetsProcessingRecorderDb *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLMaxMetsRecorderDb> {
    struct CLMaxMetsRecorderDb *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLMicroLocationWifiScanStrategy> {
    struct CLMicroLocationWifiScanStrategy *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLMobility::GaitMetricsRecorderDb> {
    struct GaitMetricsRecorderDb *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLMobility::HKWorkoutsDelegate> {
    struct HKWorkoutsDelegate *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLMobility::WalkingBoutRecorderDb> {
    struct WalkingBoutRecorderDb *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLMonitorGps> {
    struct CLMonitorGps *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLNatalieModelInput> {
    struct CLNatalieModelInput *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLNatalimetryRecorderDb> {
    struct CLNatalimetryRecorderDb *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLNonInterruptingTimer> {
    struct CLNonInterruptingTimer *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLParkinsonsResultRecorderDb> {
    struct CLParkinsonsResultRecorderDb *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLPersistentSubscriptionBase::PersistenceBackend> {
    struct PersistenceBackend *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLPolicyProactive> {
    struct CLPolicyProactive *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLPolicyTrip> {
    struct CLPolicyTrip *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLPredictedWalkDistanceBoutRecorderDb> {
    struct CLPredictedWalkDistanceBoutRecorderDb *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLQmiClientAdapter> {
    struct CLQmiClientAdapter *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLQmiDiag> {
    struct CLQmiDiag *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLSedentaryAlarmRecorderDb> {
    struct CLSedentaryAlarmRecorderDb *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLSkiRecorderDb> {
    struct CLSkiRecorderDb *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLSpringTrackerRecorderDb> {
    struct CLSpringTrackerRecorderDb *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLStepCountRecorderDb> {
    struct CLStepCountRecorderDb *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLSubHarvester>;

struct shared_ptr<CLVO2MaxInputCache> {
    struct CLVO2MaxInputCache *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLWalkingSpeedCalRecorderDb> {
    struct CLWalkingSpeedCalRecorderDb *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLWifiAccessPointLocationService> {
    struct CLWifiAccessPointLocationService *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLWifiLocationProvider::IExternal> {
    struct IExternal *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<const gnss::MeasurementData> {
    struct MeasurementData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<int> {
    int *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<unsigned char> {
    char *_field1;
    struct __shared_weak_count *_field2;
};

struct sqlite3;

struct sqlite3_stmt;

struct stEventHistoryData {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct stObservationData {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
};

struct time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1>>> {
    struct duration<long double, std::__1::ratio<1, 1>> __d_;
};

struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000>>> {
    struct duration<long long, std::__1::ratio<1, 1000000000>> _field1;
};

struct time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000>>> {
    struct duration<long long, std::__1::ratio<1, 1000000>> _field1;
};

struct timed_mutex {
    struct mutex _field1;
    struct condition_variable _field2;
    _Bool _field3;
};

struct type {
    unsigned char __lx[24];
};

struct type_index {
    struct type_info *_field1;
};

struct type_info;

struct unique_ptr<CLAccessoryLocationProvider_Type::Client, std::__1::default_delete<CLAccessoryLocationProvider_Type::Client>> {
    struct __compressed_pair<CLAccessoryLocationProvider_Type::Client *, std::__1::default_delete<CLAccessoryLocationProvider_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLActivityAggregator<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>, std::__1::default_delete<CLActivityAggregator<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>>> {
    struct __compressed_pair<CLActivityAggregator<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>*, std::__1::default_delete<CLActivityAggregator<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>>> {
        struct CLActivityAggregator<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy> *__value_;
    } __ptr_;
};

struct unique_ptr<CLActivityAggregator<CLMobility::WalkingBout, CLActivityDB::ClassCDataProtectionPolicy>, std::__1::default_delete<CLActivityAggregator<CLMobility::WalkingBout, CLActivityDB::ClassCDataProtectionPolicy>>> {
    struct __compressed_pair<CLActivityAggregator<CLMobility::WalkingBout, CLActivityDB::ClassCDataProtectionPolicy>*, std::__1::default_delete<CLActivityAggregator<CLMobility::WalkingBout, CLActivityDB::ClassCDataProtectionPolicy>>> {
        struct CLActivityAggregator<CLMobility::WalkingBout, CLActivityDB::ClassCDataProtectionPolicy> *__value_;
    } __ptr_;
};

struct unique_ptr<CLActivityAggregator<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>, std::__1::default_delete<CLActivityAggregator<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>>> {
    struct __compressed_pair<CLActivityAggregator<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>*, std::__1::default_delete<CLActivityAggregator<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>>> {
        struct CLActivityAggregator<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy> *__value_;
    } __ptr_;
};

struct unique_ptr<CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>, std::__1::default_delete<CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>>> {
    struct __compressed_pair<CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>*, std::__1::default_delete<CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>>> {
        struct CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy> *_field1;
    } _field1;
};

struct unique_ptr<CLAggregateDictionary, std::__1::default_delete<CLAggregateDictionary>> {
    struct __compressed_pair<CLAggregateDictionary *, std::__1::default_delete<CLAggregateDictionary>> {
        struct CLAggregateDictionary *_field1;
    } _field1;
};

struct unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client>> {
    struct __compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLBTLEBeaconProvider_Type::Client, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client>> {
    struct __compressed_pair<CLBTLEBeaconProvider_Type::Client *, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client>> {
    struct __compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLBarometricAltimeter, std::__1::default_delete<CLBarometricAltimeter>> {
    struct __compressed_pair<CLBarometricAltimeter *, std::__1::default_delete<CLBarometricAltimeter>> {
        struct CLBarometricAltimeter *_field1;
    } _field1;
};

struct unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client>> {
    struct __compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLCachedLocationController_Type::Client, std::__1::default_delete<CLCachedLocationController_Type::Client>> {
    struct __compressed_pair<CLCachedLocationController_Type::Client *, std::__1::default_delete<CLCachedLocationController_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLCalorimetryDanceDMFeatureGenerator, std::__1::default_delete<CLCalorimetryDanceDMFeatureGenerator>> {
    struct __compressed_pair<CLCalorimetryDanceDMFeatureGenerator *, std::__1::default_delete<CLCalorimetryDanceDMFeatureGenerator>> {
        struct CLCalorimetryDanceDMFeatureGenerator *_field1;
    } _field1;
};

struct unique_ptr<CLCalorimetryFunctionalStrengthDMFeatureGenerator, std::__1::default_delete<CLCalorimetryFunctionalStrengthDMFeatureGenerator>> {
    struct __compressed_pair<CLCalorimetryFunctionalStrengthDMFeatureGenerator *, std::__1::default_delete<CLCalorimetryFunctionalStrengthDMFeatureGenerator>> {
        struct CLCalorimetryFunctionalStrengthDMFeatureGenerator *_field1;
    } _field1;
};

struct unique_ptr<CLCalorimetryRowingDMFeatureGenerator, std::__1::default_delete<CLCalorimetryRowingDMFeatureGenerator>> {
    struct __compressed_pair<CLCalorimetryRowingDMFeatureGenerator *, std::__1::default_delete<CLCalorimetryRowingDMFeatureGenerator>> {
        struct CLCalorimetryRowingDMFeatureGenerator *_field1;
    } _field1;
};

struct unique_ptr<CLCarrierSettings_Type::Client, std::__1::default_delete<CLCarrierSettings_Type::Client>> {
    struct __compressed_pair<CLCarrierSettings_Type::Client *, std::__1::default_delete<CLCarrierSettings_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client>> {
    struct __compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase>> {
    struct __compressed_pair<CLCdmaCellEncryptedLocationDatabase *, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase>> {
        struct CLCdmaCellEncryptedLocationDatabase *_field1;
    } _field1;
};

struct unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase>> {
    struct __compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase>> {
        struct CLCellEncryptedLocationDatabase *_field1;
    } _field1;
};

struct unique_ptr<CLCellTilesManager_Type::Client, std::__1::default_delete<CLCellTilesManager_Type::Client>> {
    struct __compressed_pair<CLCellTilesManager_Type::Client *, std::__1::default_delete<CLCellTilesManager_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> {
    struct __compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLClientManager_Type::Name, std::__1::default_delete<CLClientManager_Type::Name>> {
    struct __compressed_pair<CLClientManager_Type::Name *, std::__1::default_delete<CLClientManager_Type::Name>> {
        struct Name *_field1;
    } _field1;
};

struct unique_ptr<CLCoarseCellTilesManager_Type::Client, std::__1::default_delete<CLCoarseCellTilesManager_Type::Client>> {
    struct __compressed_pair<CLCoarseCellTilesManager_Type::Client *, std::__1::default_delete<CLCoarseCellTilesManager_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client>> {
    struct __compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> {
    struct __compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client>> {
    struct __compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> {
    struct __compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLFallMetMinuteStats, std::__1::default_delete<CLFallMetMinuteStats>> {
    struct __compressed_pair<CLFallMetMinuteStats *, std::__1::default_delete<CLFallMetMinuteStats>> {
        struct CLFallMetMinuteStats *_field1;
    } _field1;
};

struct unique_ptr<CLFallNotifier_Type::Client, std::__1::default_delete<CLFallNotifier_Type::Client>> {
    struct __compressed_pair<CLFallNotifier_Type::Client *, std::__1::default_delete<CLFallNotifier_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLFenceAuthorizationManager_Type::Client, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client>> {
    struct __compressed_pair<CLFenceAuthorizationManager_Type::Client *, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLFenceDataDownloadManager_Type::Client, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client>> {
    struct __compressed_pair<CLFenceDataDownloadManager_Type::Client *, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client>> {
    struct __compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLFenceMonitorCell_Type::Client, std::__1::default_delete<CLFenceMonitorCell_Type::Client>> {
    struct __compressed_pair<CLFenceMonitorCell_Type::Client *, std::__1::default_delete<CLFenceMonitorCell_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLFenceMonitorDatabase, std::__1::default_delete<CLFenceMonitorDatabase>> {
    struct __compressed_pair<CLFenceMonitorDatabase *, std::__1::default_delete<CLFenceMonitorDatabase>> {
        struct CLFenceMonitorDatabase *_field1;
    } _field1;
};

struct unique_ptr<CLFenceMonitorWifi_Type::Client, std::__1::default_delete<CLFenceMonitorWifi_Type::Client>> {
    struct __compressed_pair<CLFenceMonitorWifi_Type::Client *, std::__1::default_delete<CLFenceMonitorWifi_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLFenceMonitor_Type::Client, std::__1::default_delete<CLFenceMonitor_Type::Client>> {
    struct __compressed_pair<CLFenceMonitor_Type::Client *, std::__1::default_delete<CLFenceMonitor_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload>> {
    struct __compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload>> {
        struct CLFileDownload *_field1;
    } _field1;
};

struct unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client>> {
    struct __compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLFitnessControllerInterface, std::__1::default_delete<CLFitnessControllerInterface>> {
    struct __compressed_pair<CLFitnessControllerInterface *, std::__1::default_delete<CLFitnessControllerInterface>> {
        struct CLFitnessControllerInterface *_field1;
    } _field1;
};

struct unique_ptr<CLFitnessMachineNotifier_Type::Client, std::__1::default_delete<CLFitnessMachineNotifier_Type::Client>> {
    struct __compressed_pair<CLFitnessMachineNotifier_Type::Client *, std::__1::default_delete<CLFitnessMachineNotifier_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client>> {
    struct __compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client>> {
    struct __compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLGnssAvailabilityPredictor, std::__1::default_delete<CLGnssAvailabilityPredictor>> {
    struct __compressed_pair<CLGnssAvailabilityPredictor *, std::__1::default_delete<CLGnssAvailabilityPredictor>> {
        struct CLGnssAvailabilityPredictor *_field1;
    } _field1;
};

struct unique_ptr<CLGnssOdometer, std::__1::default_delete<CLGnssOdometer>> {
    struct __compressed_pair<CLGnssOdometer *, std::__1::default_delete<CLGnssOdometer>> {
        struct CLGnssOdometer *_field1;
    } _field1;
};

struct unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client>> {
    struct __compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLGnssUndulation, std::__1::default_delete<CLGnssUndulation>> {
    struct __compressed_pair<CLGnssUndulation *, std::__1::default_delete<CLGnssUndulation>> {
        struct CLGnssUndulation *_field1;
    } _field1;
};

struct unique_ptr<CLGpsAssistant_Type::Client, std::__1::default_delete<CLGpsAssistant_Type::Client>> {
    struct __compressed_pair<CLGpsAssistant_Type::Client *, std::__1::default_delete<CLGpsAssistant_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLHarvestSettings, std::__1::default_delete<CLHarvestSettings>> {
    struct __compressed_pair<CLHarvestSettings *, std::__1::default_delete<CLHarvestSettings>> {
        struct CLHarvestSettings *__value_;
    } __ptr_;
};

struct unique_ptr<CLHomeKitProvider_Type::Client, std::__1::default_delete<CLHomeKitProvider_Type::Client>> {
    struct __compressed_pair<CLHomeKitProvider_Type::Client *, std::__1::default_delete<CLHomeKitProvider_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLICellTilesManagerExternal, std::__1::default_delete<CLICellTilesManagerExternal>> {
    struct __compressed_pair<CLICellTilesManagerExternal *, std::__1::default_delete<CLICellTilesManagerExternal>> {
        struct CLICellTilesManagerExternal *_field1;
    } _field1;
};

struct unique_ptr<CLICoarseCellTilesManagerExternal, std::__1::default_delete<CLICoarseCellTilesManagerExternal>> {
    struct __compressed_pair<CLICoarseCellTilesManagerExternal *, std::__1::default_delete<CLICoarseCellTilesManagerExternal>> {
        struct CLICoarseCellTilesManagerExternal *_field1;
    } _field1;
};

struct unique_ptr<CLINetworkLocationProviderExternal, std::__1::default_delete<CLINetworkLocationProviderExternal>> {
    struct __compressed_pair<CLINetworkLocationProviderExternal *, std::__1::default_delete<CLINetworkLocationProviderExternal>> {
        struct CLINetworkLocationProviderExternal *_field1;
    } _field1;
};

struct unique_ptr<CLITileSyncManager, std::__1::default_delete<CLITileSyncManager>> {
    struct __compressed_pair<CLITileSyncManager *, std::__1::default_delete<CLITileSyncManager>> {
        struct CLITileSyncManager *_field1;
    } _field1;
};

struct unique_ptr<CLITilesManagerExternal, std::__1::default_delete<CLITilesManagerExternal>> {
    struct __compressed_pair<CLITilesManagerExternal *, std::__1::default_delete<CLITilesManagerExternal>> {
        struct CLITilesManagerExternal *_field1;
    } _field1;
};

struct unique_ptr<CLIWifiTilesManagerExternal, std::__1::default_delete<CLIWifiTilesManagerExternal>> {
    struct __compressed_pair<CLIWifiTilesManagerExternal *, std::__1::default_delete<CLIWifiTilesManagerExternal>> {
        struct CLIWifiTilesManagerExternal *_field1;
    } _field1;
};

struct unique_ptr<CLIndoorFitnessModeStateMachine, std::__1::default_delete<CLIndoorFitnessModeStateMachine>> {
    struct __compressed_pair<CLIndoorFitnessModeStateMachine *, std::__1::default_delete<CLIndoorFitnessModeStateMachine>> {
        struct CLIndoorFitnessModeStateMachine *__value_;
    } __ptr_;
};

struct unique_ptr<CLIndoorLogic, std::__1::default_delete<CLIndoorLogic>> {
    struct __compressed_pair<CLIndoorLogic *, std::__1::default_delete<CLIndoorLogic>> {
        struct CLIndoorLogic *_field1;
    } _field1;
};

struct unique_ptr<CLIndoorPrefetchLocationOfInterest, std::__1::default_delete<CLIndoorPrefetchLocationOfInterest>> {
    struct __compressed_pair<CLIndoorPrefetchLocationOfInterest *, std::__1::default_delete<CLIndoorPrefetchLocationOfInterest>> {
        struct CLIndoorPrefetchLocationOfInterest *__value_;
    } __ptr_;
};

struct unique_ptr<CLLocationAwarenessProvider_Type::Client, std::__1::default_delete<CLLocationAwarenessProvider_Type::Client>> {
    struct __compressed_pair<CLLocationAwarenessProvider_Type::Client *, std::__1::default_delete<CLLocationAwarenessProvider_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> {
    struct __compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>> {
    struct __compressed_pair<CLLocationProvider_Type::Client *, std::__1::default_delete<CLLocationProvider_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase>> {
    struct __compressed_pair<CLLteCellEncryptedLocationDatabase *, std::__1::default_delete<CLLteCellEncryptedLocationDatabase>> {
        struct CLLteCellEncryptedLocationDatabase *_field1;
    } _field1;
};

struct unique_ptr<CLMicroLocationBackgroundActivities, std::__1::default_delete<CLMicroLocationBackgroundActivities>> {
    struct __compressed_pair<CLMicroLocationBackgroundActivities *, std::__1::default_delete<CLMicroLocationBackgroundActivities>> {
        struct CLMicroLocationBackgroundActivities *_field1;
    } _field1;
};

struct unique_ptr<CLMicroLocationConfigurationTable, std::__1::default_delete<CLMicroLocationConfigurationTable>> {
    struct __compressed_pair<CLMicroLocationConfigurationTable *, std::__1::default_delete<CLMicroLocationConfigurationTable>> {
        struct CLMicroLocationConfigurationTable *_field1;
    } _field1;
};

struct unique_ptr<CLMicroLocationMeasurementTable, std::__1::default_delete<CLMicroLocationMeasurementTable>> {
    struct __compressed_pair<CLMicroLocationMeasurementTable *, std::__1::default_delete<CLMicroLocationMeasurementTable>> {
        struct CLMicroLocationMeasurementTable *_field1;
    } _field1;
};

struct unique_ptr<CLMicroLocationModelTable, std::__1::default_delete<CLMicroLocationModelTable>> {
    struct __compressed_pair<CLMicroLocationModelTable *, std::__1::default_delete<CLMicroLocationModelTable>> {
        struct CLMicroLocationModelTable *_field1;
    } _field1;
};

struct unique_ptr<CLMicroLocationRecorder::RecordingTransaction, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction>> {
    struct __compressed_pair<CLMicroLocationRecorder::RecordingTransaction *, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction>> {
        struct RecordingTransaction *_field1;
    } _field1;
};

struct unique_ptr<CLMicroLocationRecordingEventsTable, std::__1::default_delete<CLMicroLocationRecordingEventsTable>> {
    struct __compressed_pair<CLMicroLocationRecordingEventsTable *, std::__1::default_delete<CLMicroLocationRecordingEventsTable>> {
        struct CLMicroLocationRecordingEventsTable *_field1;
    } _field1;
};

struct unique_ptr<CLMobileAssetManager_Type::Client, std::__1::default_delete<CLMobileAssetManager_Type::Client>> {
    struct __compressed_pair<CLMobileAssetManager_Type::Client *, std::__1::default_delete<CLMobileAssetManager_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLMobility::WalkingBoutExtractor, std::__1::default_delete<CLMobility::WalkingBoutExtractor>> {
    struct __compressed_pair<CLMobility::WalkingBoutExtractor *, std::__1::default_delete<CLMobility::WalkingBoutExtractor>> {
        struct WalkingBoutExtractor *__value_;
    } __ptr_;
};

struct unique_ptr<CLMotionActivity, std::__1::default_delete<CLMotionActivity>> {
    struct __compressed_pair<CLMotionActivity *, std::__1::default_delete<CLMotionActivity>> {
        struct CLMotionActivity *__value_;
    } __ptr_;
};

struct unique_ptr<CLMotionAlarmDatabase, std::__1::default_delete<CLMotionAlarmDatabase>> {
    struct __compressed_pair<CLMotionAlarmDatabase *, std::__1::default_delete<CLMotionAlarmDatabase>> {
        struct CLMotionAlarmDatabase *_field1;
    } _field1;
};

struct unique_ptr<CLMotionNotifier::Dispatcher, std::__1::default_delete<CLMotionNotifier::Dispatcher>> {
    struct __compressed_pair<CLMotionNotifier::Dispatcher *, std::__1::default_delete<CLMotionNotifier::Dispatcher>> {
        struct Dispatcher *__value_;
    } __ptr_;
};

struct unique_ptr<CLMotionNotifier::Dispatcher, void (*)(CLMotionNotifier::Dispatcher *)> {
    struct __compressed_pair<CLMotionNotifier::Dispatcher *, void (*)(CLMotionNotifier::Dispatcher *)> {
        struct Dispatcher *_field1;
        CDUnknownFunctionPointerType _field2;
    } _field1;
};

struct unique_ptr<CLMotionNotifier::SiloDispatcher<CLBarometerCalibration_Types::CMKFFilteredPressureSample>, std::__1::default_delete<CLMotionNotifier::SiloDispatcher<CLBarometerCalibration_Types::CMKFFilteredPressureSample>>> {
    struct __compressed_pair<CLMotionNotifier::SiloDispatcher<CLBarometerCalibration_Types::CMKFFilteredPressureSample>*, std::__1::default_delete<CLMotionNotifier::SiloDispatcher<CLBarometerCalibration_Types::CMKFFilteredPressureSample>>> {
        struct SiloDispatcher<CLBarometerCalibration_Types::CMKFFilteredPressureSample> *__value_;
    } __ptr_;
};

struct unique_ptr<CLMotionNotifier::SiloDispatcher<CLDeviceMotion::Sample>, std::__1::default_delete<CLMotionNotifier::SiloDispatcher<CLDeviceMotion::Sample>>> {
    struct __compressed_pair<CLMotionNotifier::SiloDispatcher<CLDeviceMotion::Sample>*, std::__1::default_delete<CLMotionNotifier::SiloDispatcher<CLDeviceMotion::Sample>>> {
        struct SiloDispatcher<CLDeviceMotion::Sample> *_field1;
    } _field1;
};

struct unique_ptr<CLMotionNotifier::SiloDispatcher<CLMobility::SPUGaitMetrics>, std::__1::default_delete<CLMotionNotifier::SiloDispatcher<CLMobility::SPUGaitMetrics>>> {
    struct __compressed_pair<CLMotionNotifier::SiloDispatcher<CLMobility::SPUGaitMetrics>*, std::__1::default_delete<CLMotionNotifier::SiloDispatcher<CLMobility::SPUGaitMetrics>>> {
        struct SiloDispatcher<CLMobility::SPUGaitMetrics> *__value_;
    } __ptr_;
};

struct unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client>> {
    struct __compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLMotionStateObserver_Type::Client, std::__1::default_delete<CLMotionStateObserver_Type::Client>> {
    struct __compressed_pair<CLMotionStateObserver_Type::Client *, std::__1::default_delete<CLMotionStateObserver_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client>> {
    struct __compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLNADController, std::__1::default_delete<CLNADController>> {
    struct __compressed_pair<CLNADController *, std::__1::default_delete<CLNADController>> {
        struct CLNADController *__value_;
    } __ptr_;
};

struct unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client>> {
    struct __compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client>> {
    struct __compressed_pair<CLNetworkLocationProvider_Type::Client *, std::__1::default_delete<CLNetworkLocationProvider_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client>> {
    struct __compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLOutdoorMatchingEngine, std::__1::default_delete<CLOutdoorMatchingEngine>> {
    struct __compressed_pair<CLOutdoorMatchingEngine *, std::__1::default_delete<CLOutdoorMatchingEngine>> {
        struct CLOutdoorMatchingEngine *_field1;
    } _field1;
};

struct unique_ptr<CLPeerRangingNotifier_Type::Client, std::__1::default_delete<CLPeerRangingNotifier_Type::Client>> {
    struct __compressed_pair<CLPeerRangingNotifier_Type::Client *, std::__1::default_delete<CLPeerRangingNotifier_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLPersistentStore, std::__1::default_delete<CLPersistentStore>> {
    struct __compressed_pair<CLPersistentStore *, std::__1::default_delete<CLPersistentStore>> {
        struct CLPersistentStore *_field1;
    } _field1;
};

struct unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer>> {
    struct __compressed_pair<CLPersistentTimer *, std::__1::default_delete<CLPersistentTimer>> {
        struct CLPersistentTimer *_field1;
    } _field1;
};

struct unique_ptr<CLPowerAssertion, std::__1::default_delete<CLPowerAssertion>> {
    struct __compressed_pair<CLPowerAssertion *, std::__1::default_delete<CLPowerAssertion>> {
        struct CLPowerAssertion *__value_;
    } __ptr_;
};

struct unique_ptr<CLPredictedWalkDistanceBoutDetector, std::__1::default_delete<CLPredictedWalkDistanceBoutDetector>> {
    struct __compressed_pair<CLPredictedWalkDistanceBoutDetector *, std::__1::default_delete<CLPredictedWalkDistanceBoutDetector>> {
        struct CLPredictedWalkDistanceBoutDetector *__value_;
    } __ptr_;
};

struct unique_ptr<CLPredictedWalkDistanceEstimator, std::__1::default_delete<CLPredictedWalkDistanceEstimator>> {
    struct __compressed_pair<CLPredictedWalkDistanceEstimator *, std::__1::default_delete<CLPredictedWalkDistanceEstimator>> {
        struct CLPredictedWalkDistanceEstimator *__value_;
    } __ptr_;
};

struct unique_ptr<CLPressureBias_Type::Client, std::__1::default_delete<CLPressureBias_Type::Client>> {
    struct __compressed_pair<CLPressureBias_Type::Client *, std::__1::default_delete<CLPressureBias_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLPressureCalibrationDatabase_Type::Client, std::__1::default_delete<CLPressureCalibrationDatabase_Type::Client>> {
    struct __compressed_pair<CLPressureCalibrationDatabase_Type::Client *, std::__1::default_delete<CLPressureCalibrationDatabase_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLRavenController::RavenThread, std::__1::default_delete<CLRavenController::RavenThread>> {
    struct __compressed_pair<CLRavenController::RavenThread *, std::__1::default_delete<CLRavenController::RavenThread>> {
        struct RavenThread *_field1;
    } _field1;
};

struct unique_ptr<CLRavenSerializer, std::__1::default_delete<CLRavenSerializer>> {
    struct __compressed_pair<CLRavenSerializer *, std::__1::default_delete<CLRavenSerializer>> {
        struct CLRavenSerializer *_field1;
    } _field1;
};

struct unique_ptr<CLSensorCalibrationController_Type::Client, std::__1::default_delete<CLSensorCalibrationController_Type::Client>> {
    struct __compressed_pair<CLSensorCalibrationController_Type::Client *, std::__1::default_delete<CLSensorCalibrationController_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector>> {
    struct __compressed_pair<CLSensorCalibrationStaticDetector *, std::__1::default_delete<CLSensorCalibrationStaticDetector>> {
        struct CLSensorCalibrationStaticDetector *_field1;
    } _field1;
};

struct unique_ptr<CLSensorTemperatureController, std::__1::default_delete<CLSensorTemperatureController>> {
    struct __compressed_pair<CLSensorTemperatureController *, std::__1::default_delete<CLSensorTemperatureController>> {
        struct CLSensorTemperatureController *_field1;
    } _field1;
};

struct unique_ptr<CLServiceLocationProvider, std::__1::default_delete<CLServiceLocationProvider>> {
    struct __compressed_pair<CLServiceLocationProvider *, std::__1::default_delete<CLServiceLocationProvider>> {
        struct CLServiceLocationProvider *_field1;
    } _field1;
};

struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> {
    struct __compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLSignalEnvironmentProvider_Type::Client, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client>> {
    struct __compressed_pair<CLSignalEnvironmentProvider_Type::Client *, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLSimulatedLocationProvider_Type::Client, std::__1::default_delete<CLSimulatedLocationProvider_Type::Client>> {
    struct __compressed_pair<CLSimulatedLocationProvider_Type::Client *, std::__1::default_delete<CLSimulatedLocationProvider_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLSkiController, std::__1::default_delete<CLSkiController>> {
    struct __compressed_pair<CLSkiController *, std::__1::default_delete<CLSkiController>> {
        struct CLSkiController *_field1;
    } _field1;
};

struct unique_ptr<CLSkiNotifier_Type::Client, std::__1::default_delete<CLSkiNotifier_Type::Client>> {
    struct __compressed_pair<CLSkiNotifier_Type::Client *, std::__1::default_delete<CLSkiNotifier_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLSqliteDatabase, std::__1::default_delete<CLSqliteDatabase>> {
    struct __compressed_pair<CLSqliteDatabase *, std::__1::default_delete<CLSqliteDatabase>> {
        struct CLSqliteDatabase *__value_;
    } __ptr_;
};

struct unique_ptr<CLStandPlusMinuteEstimator, std::__1::default_delete<CLStandPlusMinuteEstimator>> {
    struct __compressed_pair<CLStandPlusMinuteEstimator *, std::__1::default_delete<CLStandPlusMinuteEstimator>> {
        struct CLStandPlusMinuteEstimator *_field1;
    } _field1;
};

struct unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client>> {
    struct __compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLStreamedLocationProvider_Type::Client, std::__1::default_delete<CLStreamedLocationProvider_Type::Client>> {
    struct __compressed_pair<CLStreamedLocationProvider_Type::Client *, std::__1::default_delete<CLStreamedLocationProvider_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLStreamingAwareLocationProviderStateMachine, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine>> {
    struct __compressed_pair<CLStreamingAwareLocationProviderStateMachine *, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine>> {
        struct CLStreamingAwareLocationProviderStateMachine *_field1;
    } _field1;
};

struct unique_ptr<CLStreamingAwareLocationProvider_Type::Client, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client>> {
    struct __compressed_pair<CLStreamingAwareLocationProvider_Type::Client *, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLSwimAlgController, std::__1::default_delete<CLSwimAlgController>> {
    struct __compressed_pair<CLSwimAlgController *, std::__1::default_delete<CLSwimAlgController>> {
        struct CLSwimAlgController *_field1;
    } _field1;
};

struct unique_ptr<CLSwimFusion, std::__1::default_delete<CLSwimFusion>> {
    struct __compressed_pair<CLSwimFusion *, std::__1::default_delete<CLSwimFusion>> {
        struct CLSwimFusion *_field1;
    } _field1;
};

struct unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client>> {
    struct __compressed_pair<CLSwimNotifier_Type::Client *, std::__1::default_delete<CLSwimNotifier_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLTelephonyCallObserverHelper, std::__1::default_delete<CLTelephonyCallObserverHelper>> {
    struct __compressed_pair<CLTelephonyCallObserverHelper *, std::__1::default_delete<CLTelephonyCallObserverHelper>> {
        struct CLTelephonyCallObserverHelper *_field1;
    } _field1;
};

struct unique_ptr<CLTelephonyIratManager, std::__1::default_delete<CLTelephonyIratManager>> {
    struct __compressed_pair<CLTelephonyIratManager *, std::__1::default_delete<CLTelephonyIratManager>> {
        struct CLTelephonyIratManager *_field1;
    } _field1;
};

struct unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client>> {
    struct __compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLTileDownloader, std::__1::default_delete<CLTileDownloader>> {
    struct __compressed_pair<CLTileDownloader *, std::__1::default_delete<CLTileDownloader>> {
        struct CLTileDownloader *_field1;
    } _field1;
};

struct unique_ptr<CLTileSyncManager::IExternal, std::__1::default_delete<CLTileSyncManager::IExternal>> {
    struct __compressed_pair<CLTileSyncManager::IExternal *, std::__1::default_delete<CLTileSyncManager::IExternal>> {
        struct IExternal *_field1;
    } _field1;
};

struct unique_ptr<CLTilesManager_Type::Client, std::__1::default_delete<CLTilesManager_Type::Client>> {
    struct __compressed_pair<CLTilesManager_Type::Client *, std::__1::default_delete<CLTilesManager_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet>>;

struct unique_ptr<CLTimeManager_Type::Client, std::__1::default_delete<CLTimeManager_Type::Client>> {
    struct __compressed_pair<CLTimeManager_Type::Client *, std::__1::default_delete<CLTimeManager_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLTrackingAvoidanceOTASubscription, std::__1::default_delete<CLTrackingAvoidanceOTASubscription>> {
    struct __compressed_pair<CLTrackingAvoidanceOTASubscription *, std::__1::default_delete<CLTrackingAvoidanceOTASubscription>> {
        struct CLTrackingAvoidanceOTASubscription *__value_;
    } __ptr_;
};

struct unique_ptr<CLVO2MaxEstimationDeescalator, std::__1::default_delete<CLVO2MaxEstimationDeescalator>> {
    struct __compressed_pair<CLVO2MaxEstimationDeescalator *, std::__1::default_delete<CLVO2MaxEstimationDeescalator>> {
        struct CLVO2MaxEstimationDeescalator *_field1;
    } _field1;
};

struct unique_ptr<CLVehicleConnectionNotifier_Type::Client, std::__1::default_delete<CLVehicleConnectionNotifier_Type::Client>> {
    struct __compressed_pair<CLVehicleConnectionNotifier_Type::Client *, std::__1::default_delete<CLVehicleConnectionNotifier_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLVehicularPedestrianOverallEstimator, std::__1::default_delete<CLVehicularPedestrianOverallEstimator>> {
    struct __compressed_pair<CLVehicularPedestrianOverallEstimator *, std::__1::default_delete<CLVehicularPedestrianOverallEstimator>> {
        struct CLVehicularPedestrianOverallEstimator *__value_;
    } __ptr_;
};

struct unique_ptr<CLVisionController, std::__1::default_delete<CLVisionController>> {
    struct __compressed_pair<CLVisionController *, std::__1::default_delete<CLVisionController>> {
        struct CLVisionController *_field1;
    } _field1;
};

struct unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client>> {
    struct __compressed_pair<CLWatchOrientationSettingsNotifier_Type::Client *, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner>> {
    struct __compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner>> {
        struct CLWifiScanner *_field1;
    } _field1;
};

struct unique_ptr<CLWifiService::IExternal, std::__1::default_delete<CLWifiService::IExternal>> {
    struct __compressed_pair<CLWifiService::IExternal *, std::__1::default_delete<CLWifiService::IExternal>> {
        struct IExternal *_field1;
    } _field1;
};

struct unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient>> {
    struct __compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient>> {
        struct CLWifiServiceClient *_field1;
    } _field1;
};

struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> {
    struct __compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLWorkoutIndoorOutdoorDetector, std::__1::default_delete<CLWorkoutIndoorOutdoorDetector>> {
    struct __compressed_pair<CLWorkoutIndoorOutdoorDetector *, std::__1::default_delete<CLWorkoutIndoorOutdoorDetector>> {
        struct CLWorkoutIndoorOutdoorDetector *_field1;
    } _field1;
};

struct unique_ptr<CLWorkoutLabeler, std::__1::default_delete<CLWorkoutLabeler>> {
    struct __compressed_pair<CLWorkoutLabeler *, std::__1::default_delete<CLWorkoutLabeler>> {
        struct CLWorkoutLabeler *_field1;
    } _field1;
};

struct unique_ptr<CLWorkoutPredictorTier2Classifier, std::__1::default_delete<CLWorkoutPredictorTier2Classifier>> {
    struct __compressed_pair<CLWorkoutPredictorTier2Classifier *, std::__1::default_delete<CLWorkoutPredictorTier2Classifier>> {
        struct CLWorkoutPredictorTier2Classifier *_field1;
    } _field1;
};

struct unique_ptr<CLWorkoutPredictorTurnDetector, std::__1::default_delete<CLWorkoutPredictorTurnDetector>> {
    struct __compressed_pair<CLWorkoutPredictorTurnDetector *, std::__1::default_delete<CLWorkoutPredictorTurnDetector>> {
        struct CLWorkoutPredictorTurnDetector *_field1;
    } _field1;
};

struct unique_ptr<CLWorkoutStopDetector, std::__1::default_delete<CLWorkoutStopDetector>> {
    struct __compressed_pair<CLWorkoutStopDetector *, std::__1::default_delete<CLWorkoutStopDetector>> {
        struct CLWorkoutStopDetector *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::ALSData, std::__1::default_delete<CMMsl::ALSData>> {
    struct __compressed_pair<CMMsl::ALSData *, std::__1::default_delete<CMMsl::ALSData>> {
        struct ALSData *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::ARSessionState, std::__1::default_delete<CMMsl::ARSessionState>> {
    struct __compressed_pair<CMMsl::ARSessionState *, std::__1::default_delete<CMMsl::ARSessionState>> {
        struct ARSessionState *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::Accel, std::__1::default_delete<CMMsl::Accel>> {
    struct __compressed_pair<CMMsl::Accel *, std::__1::default_delete<CMMsl::Accel>> {
        struct Accel *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::Accel800, std::__1::default_delete<CMMsl::Accel800>> {
    struct __compressed_pair<CMMsl::Accel800 *, std::__1::default_delete<CMMsl::Accel800>> {
        struct Accel800 *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AccelBatch, std::__1::default_delete<CMMsl::AccelBatch>> {
    struct __compressed_pair<CMMsl::AccelBatch *, std::__1::default_delete<CMMsl::AccelBatch>> {
        struct AccelBatch *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AccelGesture, std::__1::default_delete<CMMsl::AccelGesture>> {
    struct __compressed_pair<CMMsl::AccelGesture *, std::__1::default_delete<CMMsl::AccelGesture>> {
        struct AccelGesture *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AccelGps, std::__1::default_delete<CMMsl::AccelGps>> {
    struct __compressed_pair<CMMsl::AccelGps *, std::__1::default_delete<CMMsl::AccelGps>> {
        struct AccelGps *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AccelOscarEmu, std::__1::default_delete<CMMsl::AccelOscarEmu>> {
    struct __compressed_pair<CMMsl::AccelOscarEmu *, std::__1::default_delete<CMMsl::AccelOscarEmu>> {
        struct AccelOscarEmu *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AccelerometerPace, std::__1::default_delete<CMMsl::AccelerometerPace>> {
    struct __compressed_pair<CMMsl::AccelerometerPace *, std::__1::default_delete<CMMsl::AccelerometerPace>> {
        struct AccelerometerPace *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AccessoryAccel, std::__1::default_delete<CMMsl::AccessoryAccel>> {
    struct __compressed_pair<CMMsl::AccessoryAccel *, std::__1::default_delete<CMMsl::AccessoryAccel>> {
        struct AccessoryAccel *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AccessoryAccelConfig, std::__1::default_delete<CMMsl::AccessoryAccelConfig>> {
    struct __compressed_pair<CMMsl::AccessoryAccelConfig *, std::__1::default_delete<CMMsl::AccessoryAccelConfig>> {
        struct AccessoryAccelConfig *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AccessoryConfig, std::__1::default_delete<CMMsl::AccessoryConfig>> {
    struct __compressed_pair<CMMsl::AccessoryConfig *, std::__1::default_delete<CMMsl::AccessoryConfig>> {
        struct AccessoryConfig *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AccessoryDeviceMotion, std::__1::default_delete<CMMsl::AccessoryDeviceMotion>> {
    struct __compressed_pair<CMMsl::AccessoryDeviceMotion *, std::__1::default_delete<CMMsl::AccessoryDeviceMotion>> {
        struct AccessoryDeviceMotion *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AccessoryDeviceMotionConfig, std::__1::default_delete<CMMsl::AccessoryDeviceMotionConfig>> {
    struct __compressed_pair<CMMsl::AccessoryDeviceMotionConfig *, std::__1::default_delete<CMMsl::AccessoryDeviceMotionConfig>> {
        struct AccessoryDeviceMotionConfig *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AccessoryGyro, std::__1::default_delete<CMMsl::AccessoryGyro>> {
    struct __compressed_pair<CMMsl::AccessoryGyro *, std::__1::default_delete<CMMsl::AccessoryGyro>> {
        struct AccessoryGyro *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AccessoryGyroCachedBias, std::__1::default_delete<CMMsl::AccessoryGyroCachedBias>> {
    struct __compressed_pair<CMMsl::AccessoryGyroCachedBias *, std::__1::default_delete<CMMsl::AccessoryGyroCachedBias>> {
        struct AccessoryGyroCachedBias *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AccessoryGyroConfig, std::__1::default_delete<CMMsl::AccessoryGyroConfig>> {
    struct __compressed_pair<CMMsl::AccessoryGyroConfig *, std::__1::default_delete<CMMsl::AccessoryGyroConfig>> {
        struct AccessoryGyroConfig *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AccessoryGyroGYTT, std::__1::default_delete<CMMsl::AccessoryGyroGYTT>> {
    struct __compressed_pair<CMMsl::AccessoryGyroGYTT *, std::__1::default_delete<CMMsl::AccessoryGyroGYTT>> {
        struct AccessoryGyroGYTT *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AccessoryProx, std::__1::default_delete<CMMsl::AccessoryProx>> {
    struct __compressed_pair<CMMsl::AccessoryProx *, std::__1::default_delete<CMMsl::AccessoryProx>> {
        struct AccessoryProx *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AccessoryProxSensorDrop, std::__1::default_delete<CMMsl::AccessoryProxSensorDrop>> {
    struct __compressed_pair<CMMsl::AccessoryProxSensorDrop *, std::__1::default_delete<CMMsl::AccessoryProxSensorDrop>> {
        struct AccessoryProxSensorDrop *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AccessoryProxTempComp, std::__1::default_delete<CMMsl::AccessoryProxTempComp>> {
    struct __compressed_pair<CMMsl::AccessoryProxTempComp *, std::__1::default_delete<CMMsl::AccessoryProxTempComp>> {
        struct AccessoryProxTempComp *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AccessoryProximityConfig, std::__1::default_delete<CMMsl::AccessoryProximityConfig>> {
    struct __compressed_pair<CMMsl::AccessoryProximityConfig *, std::__1::default_delete<CMMsl::AccessoryProximityConfig>> {
        struct AccessoryProximityConfig *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AccessoryWake, std::__1::default_delete<CMMsl::AccessoryWake>> {
    struct __compressed_pair<CMMsl::AccessoryWake *, std::__1::default_delete<CMMsl::AccessoryWake>> {
        struct AccessoryWake *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AccessoryWakeDebug, std::__1::default_delete<CMMsl::AccessoryWakeDebug>> {
    struct __compressed_pair<CMMsl::AccessoryWakeDebug *, std::__1::default_delete<CMMsl::AccessoryWakeDebug>> {
        struct AccessoryWakeDebug *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AirpodEvent, std::__1::default_delete<CMMsl::AirpodEvent>> {
    struct __compressed_pair<CMMsl::AirpodEvent *, std::__1::default_delete<CMMsl::AirpodEvent>> {
        struct AirpodEvent *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AnchorCorrection, std::__1::default_delete<CMMsl::AnchorCorrection>> {
    struct __compressed_pair<CMMsl::AnchorCorrection *, std::__1::default_delete<CMMsl::AnchorCorrection>> {
        struct AnchorCorrection *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AudioAccessoryDeviceMotion, std::__1::default_delete<CMMsl::AudioAccessoryDeviceMotion>> {
    struct __compressed_pair<CMMsl::AudioAccessoryDeviceMotion *, std::__1::default_delete<CMMsl::AudioAccessoryDeviceMotion>> {
        struct AudioAccessoryDeviceMotion *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::AuxiliaryDeviceMotion, std::__1::default_delete<CMMsl::AuxiliaryDeviceMotion>> {
    struct __compressed_pair<CMMsl::AuxiliaryDeviceMotion *, std::__1::default_delete<CMMsl::AuxiliaryDeviceMotion>> {
        struct AuxiliaryDeviceMotion *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::BTConnection, std::__1::default_delete<CMMsl::BTConnection>> {
    struct __compressed_pair<CMMsl::BTConnection *, std::__1::default_delete<CMMsl::BTConnection>> {
        struct BTConnection *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::BasebandSpeed, std::__1::default_delete<CMMsl::BasebandSpeed>> {
    struct __compressed_pair<CMMsl::BasebandSpeed *, std::__1::default_delete<CMMsl::BasebandSpeed>> {
        struct BasebandSpeed *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::BioMotionPose, std::__1::default_delete<CMMsl::BioMotionPose>> {
    struct __compressed_pair<CMMsl::BioMotionPose *, std::__1::default_delete<CMMsl::BioMotionPose>> {
        struct BioMotionPose *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::BleedToZeroCorrection, std::__1::default_delete<CMMsl::BleedToZeroCorrection>> {
    struct __compressed_pair<CMMsl::BleedToZeroCorrection *, std::__1::default_delete<CMMsl::BleedToZeroCorrection>> {
        struct BleedToZeroCorrection *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::BodyMetrics, std::__1::default_delete<CMMsl::BodyMetrics>> {
    struct __compressed_pair<CMMsl::BodyMetrics *, std::__1::default_delete<CMMsl::BodyMetrics>> {
        struct BodyMetrics *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::BraveHeartAccel, std::__1::default_delete<CMMsl::BraveHeartAccel>> {
    struct __compressed_pair<CMMsl::BraveHeartAccel *, std::__1::default_delete<CMMsl::BraveHeartAccel>> {
        struct BraveHeartAccel *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::BraveHeartDeviceMotion, std::__1::default_delete<CMMsl::BraveHeartDeviceMotion>> {
    struct __compressed_pair<CMMsl::BraveHeartDeviceMotion *, std::__1::default_delete<CMMsl::BraveHeartDeviceMotion>> {
        struct BraveHeartDeviceMotion *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::BraveHeartNatalieData, std::__1::default_delete<CMMsl::BraveHeartNatalieData>> {
    struct __compressed_pair<CMMsl::BraveHeartNatalieData *, std::__1::default_delete<CMMsl::BraveHeartNatalieData>> {
        struct BraveHeartNatalieData *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::BraveHeartVO2MaxInput, std::__1::default_delete<CMMsl::BraveHeartVO2MaxInput>> {
    struct __compressed_pair<CMMsl::BraveHeartVO2MaxInput *, std::__1::default_delete<CMMsl::BraveHeartVO2MaxInput>> {
        struct BraveHeartVO2MaxInput *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::BraveHeartWorkoutEvent, std::__1::default_delete<CMMsl::BraveHeartWorkoutEvent>> {
    struct __compressed_pair<CMMsl::BraveHeartWorkoutEvent *, std::__1::default_delete<CMMsl::BraveHeartWorkoutEvent>> {
        struct BraveHeartWorkoutEvent *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::CalorimetryPauseEvent, std::__1::default_delete<CMMsl::CalorimetryPauseEvent>> {
    struct __compressed_pair<CMMsl::CalorimetryPauseEvent *, std::__1::default_delete<CMMsl::CalorimetryPauseEvent>> {
        struct CalorimetryPauseEvent *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::CatherineHealthKitData, std::__1::default_delete<CMMsl::CatherineHealthKitData>> {
    struct __compressed_pair<CMMsl::CatherineHealthKitData *, std::__1::default_delete<CMMsl::CatherineHealthKitData>> {
        struct CatherineHealthKitData *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::ClefCalibration, std::__1::default_delete<CMMsl::ClefCalibration>> {
    struct __compressed_pair<CMMsl::ClefCalibration *, std::__1::default_delete<CMMsl::ClefCalibration>> {
        struct ClefCalibration *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::CoarseElevationChange, std::__1::default_delete<CMMsl::CoarseElevationChange>> {
    struct __compressed_pair<CMMsl::CoarseElevationChange *, std::__1::default_delete<CMMsl::CoarseElevationChange>> {
        struct CoarseElevationChange *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::Compass, std::__1::default_delete<CMMsl::Compass>> {
    struct __compressed_pair<CMMsl::Compass *, std::__1::default_delete<CMMsl::Compass>> {
        struct Compass *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::CompassAlignment, std::__1::default_delete<CMMsl::CompassAlignment>> {
    struct __compressed_pair<CMMsl::CompassAlignment *, std::__1::default_delete<CMMsl::CompassAlignment>> {
        struct CompassAlignment *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::CompassCalibration, std::__1::default_delete<CMMsl::CompassCalibration>> {
    struct __compressed_pair<CMMsl::CompassCalibration *, std::__1::default_delete<CMMsl::CompassCalibration>> {
        struct CompassCalibration *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::CompassCalibrationAttempt, std::__1::default_delete<CMMsl::CompassCalibrationAttempt>> {
    struct __compressed_pair<CMMsl::CompassCalibrationAttempt *, std::__1::default_delete<CMMsl::CompassCalibrationAttempt>> {
        struct CompassCalibrationAttempt *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::CompassConstraints, std::__1::default_delete<CMMsl::CompassConstraints>> {
    struct __compressed_pair<CMMsl::CompassConstraints *, std::__1::default_delete<CMMsl::CompassConstraints>> {
        struct CompassConstraints *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::CompassCorrection, std::__1::default_delete<CMMsl::CompassCorrection>> {
    struct __compressed_pair<CMMsl::CompassCorrection *, std::__1::default_delete<CMMsl::CompassCorrection>> {
        struct CompassCorrection *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::ConstrainedIntegratorPose, std::__1::default_delete<CMMsl::ConstrainedIntegratorPose>> {
    struct __compressed_pair<CMMsl::ConstrainedIntegratorPose *, std::__1::default_delete<CMMsl::ConstrainedIntegratorPose>> {
        struct ConstrainedIntegratorPose *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::CoprocessorReplyGaitMetrics, std::__1::default_delete<CMMsl::CoprocessorReplyGaitMetrics>> {
    struct __compressed_pair<CMMsl::CoprocessorReplyGaitMetrics *, std::__1::default_delete<CMMsl::CoprocessorReplyGaitMetrics>> {
        struct CoprocessorReplyGaitMetrics *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::CourseConstraints, std::__1::default_delete<CMMsl::CourseConstraints>> {
    struct __compressed_pair<CMMsl::CourseConstraints *, std::__1::default_delete<CMMsl::CourseConstraints>> {
        struct CourseConstraints *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::CourseCorrection, std::__1::default_delete<CMMsl::CourseCorrection>> {
    struct __compressed_pair<CMMsl::CourseCorrection *, std::__1::default_delete<CMMsl::CourseCorrection>> {
        struct CourseCorrection *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::DeviceMotion, std::__1::default_delete<CMMsl::DeviceMotion>> {
    struct __compressed_pair<CMMsl::DeviceMotion *, std::__1::default_delete<CMMsl::DeviceMotion>> {
        struct DeviceMotion *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::DeviceMotionAlwaysOn, std::__1::default_delete<CMMsl::DeviceMotionAlwaysOn>> {
    struct __compressed_pair<CMMsl::DeviceMotionAlwaysOn *, std::__1::default_delete<CMMsl::DeviceMotionAlwaysOn>> {
        struct DeviceMotionAlwaysOn *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::DeviceMotionCovariance, std::__1::default_delete<CMMsl::DeviceMotionCovariance>> {
    struct __compressed_pair<CMMsl::DeviceMotionCovariance *, std::__1::default_delete<CMMsl::DeviceMotionCovariance>> {
        struct DeviceMotionCovariance *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::DoubleTap, std::__1::default_delete<CMMsl::DoubleTap>> {
    struct __compressed_pair<CMMsl::DoubleTap *, std::__1::default_delete<CMMsl::DoubleTap>> {
        struct DoubleTap *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::ElevationChange, std::__1::default_delete<CMMsl::ElevationChange>> {
    struct __compressed_pair<CMMsl::ElevationChange *, std::__1::default_delete<CMMsl::ElevationChange>> {
        struct ElevationChange *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::EmergencyState, std::__1::default_delete<CMMsl::EmergencyState>> {
    struct __compressed_pair<CMMsl::EmergencyState *, std::__1::default_delete<CMMsl::EmergencyState>> {
        struct EmergencyState *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::EnhancedDeviceMotion, std::__1::default_delete<CMMsl::EnhancedDeviceMotion>> {
    struct __compressed_pair<CMMsl::EnhancedDeviceMotion *, std::__1::default_delete<CMMsl::EnhancedDeviceMotion>> {
        struct EnhancedDeviceMotion *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::FacePose, std::__1::default_delete<CMMsl::FacePose>> {
    struct __compressed_pair<CMMsl::FacePose *, std::__1::default_delete<CMMsl::FacePose>> {
        struct FacePose *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::FallDetectionDetector, std::__1::default_delete<CMMsl::FallDetectionDetector>> {
    struct __compressed_pair<CMMsl::FallDetectionDetector *, std::__1::default_delete<CMMsl::FallDetectionDetector>> {
        struct FallDetectionDetector *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::FallDetectionGyroControllerReplay, std::__1::default_delete<CMMsl::FallDetectionGyroControllerReplay>> {
    struct __compressed_pair<CMMsl::FallDetectionGyroControllerReplay *, std::__1::default_delete<CMMsl::FallDetectionGyroControllerReplay>> {
        struct FallDetectionGyroControllerReplay *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::FallDetectionReplay, std::__1::default_delete<CMMsl::FallDetectionReplay>> {
    struct __compressed_pair<CMMsl::FallDetectionReplay *, std::__1::default_delete<CMMsl::FallDetectionReplay>> {
        struct FallDetectionReplay *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::FallDetectionStateMachine, std::__1::default_delete<CMMsl::FallDetectionStateMachine>> {
    struct __compressed_pair<CMMsl::FallDetectionStateMachine *, std::__1::default_delete<CMMsl::FallDetectionStateMachine>> {
        struct FallDetectionStateMachine *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::FallFalsePositiveSuppressionFeatures, std::__1::default_delete<CMMsl::FallFalsePositiveSuppressionFeatures>> {
    struct __compressed_pair<CMMsl::FallFalsePositiveSuppressionFeatures *, std::__1::default_delete<CMMsl::FallFalsePositiveSuppressionFeatures>> {
        struct FallFalsePositiveSuppressionFeatures *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::FallSnippet, std::__1::default_delete<CMMsl::FallSnippet>> {
    struct __compressed_pair<CMMsl::FallSnippet *, std::__1::default_delete<CMMsl::FallSnippet>> {
        struct FallSnippet *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::FallStats, std::__1::default_delete<CMMsl::FallStats>> {
    struct __compressed_pair<CMMsl::FallStats *, std::__1::default_delete<CMMsl::FallStats>> {
        struct FallStats *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::FrequencyResponse, std::__1::default_delete<CMMsl::FrequencyResponse>> {
    struct __compressed_pair<CMMsl::FrequencyResponse *, std::__1::default_delete<CMMsl::FrequencyResponse>> {
        struct FrequencyResponse *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::GaitCycleSegment, std::__1::default_delete<CMMsl::GaitCycleSegment>> {
    struct __compressed_pair<CMMsl::GaitCycleSegment *, std::__1::default_delete<CMMsl::GaitCycleSegment>> {
        struct GaitCycleSegment *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::GaitCycleSegmentationState, std::__1::default_delete<CMMsl::GaitCycleSegmentationState>> {
    struct __compressed_pair<CMMsl::GaitCycleSegmentationState *, std::__1::default_delete<CMMsl::GaitCycleSegmentationState>> {
        struct GaitCycleSegmentationState *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::GeomagneticData, std::__1::default_delete<CMMsl::GeomagneticData>> {
    struct __compressed_pair<CMMsl::GeomagneticData *, std::__1::default_delete<CMMsl::GeomagneticData>> {
        struct GeomagneticData *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::GravityConstraints, std::__1::default_delete<CMMsl::GravityConstraints>> {
    struct __compressed_pair<CMMsl::GravityConstraints *, std::__1::default_delete<CMMsl::GravityConstraints>> {
        struct GravityConstraints *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::GravityCorrection, std::__1::default_delete<CMMsl::GravityCorrection>> {
    struct __compressed_pair<CMMsl::GravityCorrection *, std::__1::default_delete<CMMsl::GravityCorrection>> {
        struct GravityCorrection *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::Gyro, std::__1::default_delete<CMMsl::Gyro>> {
    struct __compressed_pair<CMMsl::Gyro *, std::__1::default_delete<CMMsl::Gyro>> {
        struct Gyro *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::GyroBiasAndVariance, std::__1::default_delete<CMMsl::GyroBiasAndVariance>> {
    struct __compressed_pair<CMMsl::GyroBiasAndVariance *, std::__1::default_delete<CMMsl::GyroBiasAndVariance>> {
        struct GyroBiasAndVariance *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::GyroBiasConstraints, std::__1::default_delete<CMMsl::GyroBiasConstraints>> {
    struct __compressed_pair<CMMsl::GyroBiasConstraints *, std::__1::default_delete<CMMsl::GyroBiasConstraints>> {
        struct GyroBiasConstraints *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::GyroBiasCorrection, std::__1::default_delete<CMMsl::GyroBiasCorrection>> {
    struct __compressed_pair<CMMsl::GyroBiasCorrection *, std::__1::default_delete<CMMsl::GyroBiasCorrection>> {
        struct GyroBiasCorrection *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::GyroBiasFit, std::__1::default_delete<CMMsl::GyroBiasFit>> {
    struct __compressed_pair<CMMsl::GyroBiasFit *, std::__1::default_delete<CMMsl::GyroBiasFit>> {
        struct GyroBiasFit *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::GyroCalibrationDataFactory, std::__1::default_delete<CMMsl::GyroCalibrationDataFactory>> {
    struct __compressed_pair<CMMsl::GyroCalibrationDataFactory *, std::__1::default_delete<CMMsl::GyroCalibrationDataFactory>> {
        struct GyroCalibrationDataFactory *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::GyroCalibrationDataNonlinearNonFactory, std::__1::default_delete<CMMsl::GyroCalibrationDataNonlinearNonFactory>> {
    struct __compressed_pair<CMMsl::GyroCalibrationDataNonlinearNonFactory *, std::__1::default_delete<CMMsl::GyroCalibrationDataNonlinearNonFactory>> {
        struct GyroCalibrationDataNonlinearNonFactory *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::GyroCalibrationSample, std::__1::default_delete<CMMsl::GyroCalibrationSample>> {
    struct __compressed_pair<CMMsl::GyroCalibrationSample *, std::__1::default_delete<CMMsl::GyroCalibrationSample>> {
        struct GyroCalibrationSample *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::GyroCalibrationSampleNonlinear, std::__1::default_delete<CMMsl::GyroCalibrationSampleNonlinear>> {
    struct __compressed_pair<CMMsl::GyroCalibrationSampleNonlinear *, std::__1::default_delete<CMMsl::GyroCalibrationSampleNonlinear>> {
        struct GyroCalibrationSampleNonlinear *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::GyroCompass, std::__1::default_delete<CMMsl::GyroCompass>> {
    struct __compressed_pair<CMMsl::GyroCompass *, std::__1::default_delete<CMMsl::GyroCompass>> {
        struct GyroCompass *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::GyroDt, std::__1::default_delete<CMMsl::GyroDt>> {
    struct __compressed_pair<CMMsl::GyroDt *, std::__1::default_delete<CMMsl::GyroDt>> {
        struct GyroDt *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::GyroFactoryCalibrationData, std::__1::default_delete<CMMsl::GyroFactoryCalibrationData>> {
    struct __compressed_pair<CMMsl::GyroFactoryCalibrationData *, std::__1::default_delete<CMMsl::GyroFactoryCalibrationData>> {
        struct GyroFactoryCalibrationData *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::GyroGps, std::__1::default_delete<CMMsl::GyroGps>> {
    struct __compressed_pair<CMMsl::GyroGps *, std::__1::default_delete<CMMsl::GyroGps>> {
        struct GyroGps *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::GyroOscarEmu, std::__1::default_delete<CMMsl::GyroOscarEmu>> {
    struct __compressed_pair<CMMsl::GyroOscarEmu *, std::__1::default_delete<CMMsl::GyroOscarEmu>> {
        struct GyroOscarEmu *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::GyroTemperature, std::__1::default_delete<CMMsl::GyroTemperature>> {
    struct __compressed_pair<CMMsl::GyroTemperature *, std::__1::default_delete<CMMsl::GyroTemperature>> {
        struct GyroTemperature *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::InEarAdditionalState, std::__1::default_delete<CMMsl::InEarAdditionalState>> {
    struct __compressed_pair<CMMsl::InEarAdditionalState *, std::__1::default_delete<CMMsl::InEarAdditionalState>> {
        struct InEarAdditionalState *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::InEarBaseline, std::__1::default_delete<CMMsl::InEarBaseline>> {
    struct __compressed_pair<CMMsl::InEarBaseline *, std::__1::default_delete<CMMsl::InEarBaseline>> {
        struct InEarBaseline *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::InEarBaselining, std::__1::default_delete<CMMsl::InEarBaselining>> {
    struct __compressed_pair<CMMsl::InEarBaselining *, std::__1::default_delete<CMMsl::InEarBaselining>> {
        struct InEarBaselining *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::InEarConstraints, std::__1::default_delete<CMMsl::InEarConstraints>> {
    struct __compressed_pair<CMMsl::InEarConstraints *, std::__1::default_delete<CMMsl::InEarConstraints>> {
        struct InEarConstraints *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::InEarOpenLid, std::__1::default_delete<CMMsl::InEarOpenLid>> {
    struct __compressed_pair<CMMsl::InEarOpenLid *, std::__1::default_delete<CMMsl::InEarOpenLid>> {
        struct InEarOpenLid *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::InEarOptical, std::__1::default_delete<CMMsl::InEarOptical>> {
    struct __compressed_pair<CMMsl::InEarOptical *, std::__1::default_delete<CMMsl::InEarOptical>> {
        struct InEarOptical *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::InEarSession, std::__1::default_delete<CMMsl::InEarSession>> {
    struct __compressed_pair<CMMsl::InEarSession *, std::__1::default_delete<CMMsl::InEarSession>> {
        struct InEarSession *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::InEarTransition, std::__1::default_delete<CMMsl::InEarTransition>> {
    struct __compressed_pair<CMMsl::InEarTransition *, std::__1::default_delete<CMMsl::InEarTransition>> {
        struct InEarTransition *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::InEarTransitionEntry, std::__1::default_delete<CMMsl::InEarTransitionEntry>> {
    struct __compressed_pair<CMMsl::InEarTransitionEntry *, std::__1::default_delete<CMMsl::InEarTransitionEntry>> {
        struct InEarTransitionEntry *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::InterpolatedAccessoryAccel, std::__1::default_delete<CMMsl::InterpolatedAccessoryAccel>> {
    struct __compressed_pair<CMMsl::InterpolatedAccessoryAccel *, std::__1::default_delete<CMMsl::InterpolatedAccessoryAccel>> {
        struct InterpolatedAccessoryAccel *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::IntersiloNSCodingData, std::__1::default_delete<CMMsl::IntersiloNSCodingData>> {
    struct __compressed_pair<CMMsl::IntersiloNSCodingData *, std::__1::default_delete<CMMsl::IntersiloNSCodingData>> {
        struct IntersiloNSCodingData *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::JointLinkModelPose, std::__1::default_delete<CMMsl::JointLinkModelPose>> {
    struct __compressed_pair<CMMsl::JointLinkModelPose *, std::__1::default_delete<CMMsl::JointLinkModelPose>> {
        struct JointLinkModelPose *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::KappaTrigger, std::__1::default_delete<CMMsl::KappaTrigger>> {
    struct __compressed_pair<CMMsl::KappaTrigger *, std::__1::default_delete<CMMsl::KappaTrigger>> {
        struct KappaTrigger *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::LSLHeadingEstimation, std::__1::default_delete<CMMsl::LSLHeadingEstimation>> {
    struct __compressed_pair<CMMsl::LSLHeadingEstimation *, std::__1::default_delete<CMMsl::LSLHeadingEstimation>> {
        struct LSLHeadingEstimation *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::LocationOscarEmu, std::__1::default_delete<CMMsl::LocationOscarEmu>> {
    struct __compressed_pair<CMMsl::LocationOscarEmu *, std::__1::default_delete<CMMsl::LocationOscarEmu>> {
        struct LocationOscarEmu *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::Magnetometer, std::__1::default_delete<CMMsl::Magnetometer>> {
    struct __compressed_pair<CMMsl::Magnetometer *, std::__1::default_delete<CMMsl::Magnetometer>> {
        struct Magnetometer *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::MetsInfo, std::__1::default_delete<CMMsl::MetsInfo>> {
    struct __compressed_pair<CMMsl::MetsInfo *, std::__1::default_delete<CMMsl::MetsInfo>> {
        struct MetsInfo *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::MobilityBoutMetrics, std::__1::default_delete<CMMsl::MobilityBoutMetrics>> {
    struct __compressed_pair<CMMsl::MobilityBoutMetrics *, std::__1::default_delete<CMMsl::MobilityBoutMetrics>> {
        struct MobilityBoutMetrics *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::MotionActivity, std::__1::default_delete<CMMsl::MotionActivity>> {
    struct __compressed_pair<CMMsl::MotionActivity *, std::__1::default_delete<CMMsl::MotionActivity>> {
        struct MotionActivity *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::MotionGPSLocation, std::__1::default_delete<CMMsl::MotionGPSLocation>> {
    struct __compressed_pair<CMMsl::MotionGPSLocation *, std::__1::default_delete<CMMsl::MotionGPSLocation>> {
        struct MotionGPSLocation *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::MotionHint, std::__1::default_delete<CMMsl::MotionHint>> {
    struct __compressed_pair<CMMsl::MotionHint *, std::__1::default_delete<CMMsl::MotionHint>> {
        struct MotionHint *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::MotionLocation, std::__1::default_delete<CMMsl::MotionLocation>> {
    struct __compressed_pair<CMMsl::MotionLocation *, std::__1::default_delete<CMMsl::MotionLocation>> {
        struct MotionLocation *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::MotionLoiData, std::__1::default_delete<CMMsl::MotionLoiData>> {
    struct __compressed_pair<CMMsl::MotionLoiData *, std::__1::default_delete<CMMsl::MotionLoiData>> {
        struct MotionLoiData *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::MotionStateUpdate, std::__1::default_delete<CMMsl::MotionStateUpdate>> {
    struct __compressed_pair<CMMsl::MotionStateUpdate *, std::__1::default_delete<CMMsl::MotionStateUpdate>> {
        struct MotionStateUpdate *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::MotionWifiAssociation, std::__1::default_delete<CMMsl::MotionWifiAssociation>> {
    struct __compressed_pair<CMMsl::MotionWifiAssociation *, std::__1::default_delete<CMMsl::MotionWifiAssociation>> {
        struct MotionWifiAssociation *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::MotionWifiLocation, std::__1::default_delete<CMMsl::MotionWifiLocation>> {
    struct __compressed_pair<CMMsl::MotionWifiLocation *, std::__1::default_delete<CMMsl::MotionWifiLocation>> {
        struct MotionWifiLocation *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::MovementStats, std::__1::default_delete<CMMsl::MovementStats>> {
    struct __compressed_pair<CMMsl::MovementStats *, std::__1::default_delete<CMMsl::MovementStats>> {
        struct MovementStats *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::MovementStatsGravityProjection, std::__1::default_delete<CMMsl::MovementStatsGravityProjection>> {
    struct __compressed_pair<CMMsl::MovementStatsGravityProjection *, std::__1::default_delete<CMMsl::MovementStatsGravityProjection>> {
        struct MovementStatsGravityProjection *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::MovementStatsSignal, std::__1::default_delete<CMMsl::MovementStatsSignal>> {
    struct __compressed_pair<CMMsl::MovementStatsSignal *, std::__1::default_delete<CMMsl::MovementStatsSignal>> {
        struct MovementStatsSignal *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::NatalieData, std::__1::default_delete<CMMsl::NatalieData>> {
    struct __compressed_pair<CMMsl::NatalieData *, std::__1::default_delete<CMMsl::NatalieData>> {
        struct NatalieData *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::NonlinearBiasFit, std::__1::default_delete<CMMsl::NonlinearBiasFit>> {
    struct __compressed_pair<CMMsl::NonlinearBiasFit *, std::__1::default_delete<CMMsl::NonlinearBiasFit>> {
        struct NonlinearBiasFit *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::Odometer, std::__1::default_delete<CMMsl::Odometer>> {
    struct __compressed_pair<CMMsl::Odometer *, std::__1::default_delete<CMMsl::Odometer>> {
        struct Odometer *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::OdometerWithAltitude, std::__1::default_delete<CMMsl::OdometerWithAltitude>> {
    struct __compressed_pair<CMMsl::OdometerWithAltitude *, std::__1::default_delete<CMMsl::OdometerWithAltitude>> {
        struct OdometerWithAltitude *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::OnsetHeartRateData, std::__1::default_delete<CMMsl::OnsetHeartRateData>> {
    struct __compressed_pair<CMMsl::OnsetHeartRateData *, std::__1::default_delete<CMMsl::OnsetHeartRateData>> {
        struct OnsetHeartRateData *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::PearlAttitude, std::__1::default_delete<CMMsl::PearlAttitude>> {
    struct __compressed_pair<CMMsl::PearlAttitude *, std::__1::default_delete<CMMsl::PearlAttitude>> {
        struct PearlAttitude *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::PredictedRelativeDeviceMotion, std::__1::default_delete<CMMsl::PredictedRelativeDeviceMotion>> {
    struct __compressed_pair<CMMsl::PredictedRelativeDeviceMotion *, std::__1::default_delete<CMMsl::PredictedRelativeDeviceMotion>> {
        struct PredictedRelativeDeviceMotion *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::Pressure, std::__1::default_delete<CMMsl::Pressure>> {
    struct __compressed_pair<CMMsl::Pressure *, std::__1::default_delete<CMMsl::Pressure>> {
        struct Pressure *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::PressureFiltered, std::__1::default_delete<CMMsl::PressureFiltered>> {
    struct __compressed_pair<CMMsl::PressureFiltered *, std::__1::default_delete<CMMsl::PressureFiltered>> {
        struct PressureFiltered *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::PressureFilteredNoTemperature, std::__1::default_delete<CMMsl::PressureFilteredNoTemperature>> {
    struct __compressed_pair<CMMsl::PressureFilteredNoTemperature *, std::__1::default_delete<CMMsl::PressureFilteredNoTemperature>> {
        struct PressureFilteredNoTemperature *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::PressureGps, std::__1::default_delete<CMMsl::PressureGps>> {
    struct __compressed_pair<CMMsl::PressureGps *, std::__1::default_delete<CMMsl::PressureGps>> {
        struct PressureGps *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::PressureOscarEmu, std::__1::default_delete<CMMsl::PressureOscarEmu>> {
    struct __compressed_pair<CMMsl::PressureOscarEmu *, std::__1::default_delete<CMMsl::PressureOscarEmu>> {
        struct PressureOscarEmu *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::Prox, std::__1::default_delete<CMMsl::Prox>> {
    struct __compressed_pair<CMMsl::Prox *, std::__1::default_delete<CMMsl::Prox>> {
        struct Prox *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::RelDMInSystemConfig, std::__1::default_delete<CMMsl::RelDMInSystemConfig>> {
    struct __compressed_pair<CMMsl::RelDMInSystemConfig *, std::__1::default_delete<CMMsl::RelDMInSystemConfig>> {
        struct RelDMInSystemConfig *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::RelativeDeviceMotionComplexTransition, std::__1::default_delete<CMMsl::RelativeDeviceMotionComplexTransition>> {
    struct __compressed_pair<CMMsl::RelativeDeviceMotionComplexTransition *, std::__1::default_delete<CMMsl::RelativeDeviceMotionComplexTransition>> {
        struct RelativeDeviceMotionComplexTransition *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::RelativeDeviceMotionCorrelatedMotion, std::__1::default_delete<CMMsl::RelativeDeviceMotionCorrelatedMotion>> {
    struct __compressed_pair<CMMsl::RelativeDeviceMotionCorrelatedMotion *, std::__1::default_delete<CMMsl::RelativeDeviceMotionCorrelatedMotion>> {
        struct RelativeDeviceMotionCorrelatedMotion *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::RelativeDeviceMotionInternal, std::__1::default_delete<CMMsl::RelativeDeviceMotionInternal>> {
    struct __compressed_pair<CMMsl::RelativeDeviceMotionInternal *, std::__1::default_delete<CMMsl::RelativeDeviceMotionInternal>> {
        struct RelativeDeviceMotionInternal *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::RelativeGravityConstraints, std::__1::default_delete<CMMsl::RelativeGravityConstraints>> {
    struct __compressed_pair<CMMsl::RelativeGravityConstraints *, std::__1::default_delete<CMMsl::RelativeGravityConstraints>> {
        struct RelativeGravityConstraints *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::RelativeGravityCorrection, std::__1::default_delete<CMMsl::RelativeGravityCorrection>> {
    struct __compressed_pair<CMMsl::RelativeGravityCorrection *, std::__1::default_delete<CMMsl::RelativeGravityCorrection>> {
        struct RelativeGravityCorrection *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::RotationRate, std::__1::default_delete<CMMsl::RotationRate>> {
    struct __compressed_pair<CMMsl::RotationRate *, std::__1::default_delete<CMMsl::RotationRate>> {
        struct RotationRate *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::SPUPlaybackExampleDeviceMotion, std::__1::default_delete<CMMsl::SPUPlaybackExampleDeviceMotion>> {
    struct __compressed_pair<CMMsl::SPUPlaybackExampleDeviceMotion *, std::__1::default_delete<CMMsl::SPUPlaybackExampleDeviceMotion>> {
        struct SPUPlaybackExampleDeviceMotion *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::SPUPlaybackExampleMotionStateUpdate, std::__1::default_delete<CMMsl::SPUPlaybackExampleMotionStateUpdate>> {
    struct __compressed_pair<CMMsl::SPUPlaybackExampleMotionStateUpdate *, std::__1::default_delete<CMMsl::SPUPlaybackExampleMotionStateUpdate>> {
        struct SPUPlaybackExampleMotionStateUpdate *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::SessionOverride, std::__1::default_delete<CMMsl::SessionOverride>> {
    struct __compressed_pair<CMMsl::SessionOverride *, std::__1::default_delete<CMMsl::SessionOverride>> {
        struct SessionOverride *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::SignalEnvironment, std::__1::default_delete<CMMsl::SignalEnvironment>> {
    struct __compressed_pair<CMMsl::SignalEnvironment *, std::__1::default_delete<CMMsl::SignalEnvironment>> {
        struct SignalEnvironment *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::SoundPressureLevel, std::__1::default_delete<CMMsl::SoundPressureLevel>> {
    struct __compressed_pair<CMMsl::SoundPressureLevel *, std::__1::default_delete<CMMsl::SoundPressureLevel>> {
        struct SoundPressureLevel *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::StepCadenceToStrideLengthBin, std::__1::default_delete<CMMsl::StepCadenceToStrideLengthBin>> {
    struct __compressed_pair<CMMsl::StepCadenceToStrideLengthBin *, std::__1::default_delete<CMMsl::StepCadenceToStrideLengthBin>> {
        struct StepCadenceToStrideLengthBin *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::StepCountEntry, std::__1::default_delete<CMMsl::StepCountEntry>> {
    struct __compressed_pair<CMMsl::StepCountEntry *, std::__1::default_delete<CMMsl::StepCountEntry>> {
        struct StepCountEntry *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::StreamingHeartRateData, std::__1::default_delete<CMMsl::StreamingHeartRateData>> {
    struct __compressed_pair<CMMsl::StreamingHeartRateData *, std::__1::default_delete<CMMsl::StreamingHeartRateData>> {
        struct StreamingHeartRateData *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::StrideCalBin, std::__1::default_delete<CMMsl::StrideCalBin>> {
    struct __compressed_pair<CMMsl::StrideCalBin *, std::__1::default_delete<CMMsl::StrideCalBin>> {
        struct StrideCalBin *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::TapAccept, std::__1::default_delete<CMMsl::TapAccept>> {
    struct __compressed_pair<CMMsl::TapAccept *, std::__1::default_delete<CMMsl::TapAccept>> {
        struct TapAccept *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::TapDetect, std::__1::default_delete<CMMsl::TapDetect>> {
    struct __compressed_pair<CMMsl::TapDetect *, std::__1::default_delete<CMMsl::TapDetect>> {
        struct TapDetect *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::TempestPoCAuxiliaryDeviceMotion, std::__1::default_delete<CMMsl::TempestPoCAuxiliaryDeviceMotion>> {
    struct __compressed_pair<CMMsl::TempestPoCAuxiliaryDeviceMotion *, std::__1::default_delete<CMMsl::TempestPoCAuxiliaryDeviceMotion>> {
        struct TempestPoCAuxiliaryDeviceMotion *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::TempestPoCListenerOrientation, std::__1::default_delete<CMMsl::TempestPoCListenerOrientation>> {
    struct __compressed_pair<CMMsl::TempestPoCListenerOrientation *, std::__1::default_delete<CMMsl::TempestPoCListenerOrientation>> {
        struct TempestPoCListenerOrientation *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::TouchOscarEmu, std::__1::default_delete<CMMsl::TouchOscarEmu>> {
    struct __compressed_pair<CMMsl::TouchOscarEmu *, std::__1::default_delete<CMMsl::TouchOscarEmu>> {
        struct TouchOscarEmu *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::UserStudyEvent, std::__1::default_delete<CMMsl::UserStudyEvent>> {
    struct __compressed_pair<CMMsl::UserStudyEvent *, std::__1::default_delete<CMMsl::UserStudyEvent>> {
        struct UserStudyEvent *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::VIOEstimation, std::__1::default_delete<CMMsl::VIOEstimation>> {
    struct __compressed_pair<CMMsl::VIOEstimation *, std::__1::default_delete<CMMsl::VIOEstimation>> {
        struct VIOEstimation *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::VIOPose, std::__1::default_delete<CMMsl::VIOPose>> {
    struct __compressed_pair<CMMsl::VIOPose *, std::__1::default_delete<CMMsl::VIOPose>> {
        struct VIOPose *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::VIOReplayPose, std::__1::default_delete<CMMsl::VIOReplayPose>> {
    struct __compressed_pair<CMMsl::VIOReplayPose *, std::__1::default_delete<CMMsl::VIOReplayPose>> {
        struct VIOReplayPose *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::VO2MaxInput, std::__1::default_delete<CMMsl::VO2MaxInput>> {
    struct __compressed_pair<CMMsl::VO2MaxInput *, std::__1::default_delete<CMMsl::VO2MaxInput>> {
        struct VO2MaxInput *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::VibrationEvent, std::__1::default_delete<CMMsl::VibrationEvent>> {
    struct __compressed_pair<CMMsl::VibrationEvent *, std::__1::default_delete<CMMsl::VibrationEvent>> {
        struct VibrationEvent *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::VisionCompassBias, std::__1::default_delete<CMMsl::VisionCompassBias>> {
    struct __compressed_pair<CMMsl::VisionCompassBias *, std::__1::default_delete<CMMsl::VisionCompassBias>> {
        struct VisionCompassBias *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::VisualLocalization, std::__1::default_delete<CMMsl::VisualLocalization>> {
    struct __compressed_pair<CMMsl::VisualLocalization *, std::__1::default_delete<CMMsl::VisualLocalization>> {
        struct VisualLocalization *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::VisualLocalizationAttitudeConstraints, std::__1::default_delete<CMMsl::VisualLocalizationAttitudeConstraints>> {
    struct __compressed_pair<CMMsl::VisualLocalizationAttitudeConstraints *, std::__1::default_delete<CMMsl::VisualLocalizationAttitudeConstraints>> {
        struct VisualLocalizationAttitudeConstraints *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::VisualLocalizationAttitudeCorrection, std::__1::default_delete<CMMsl::VisualLocalizationAttitudeCorrection>> {
    struct __compressed_pair<CMMsl::VisualLocalizationAttitudeCorrection *, std::__1::default_delete<CMMsl::VisualLocalizationAttitudeCorrection>> {
        struct VisualLocalizationAttitudeCorrection *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::WalkingDetectionResult, std::__1::default_delete<CMMsl::WalkingDetectionResult>> {
    struct __compressed_pair<CMMsl::WalkingDetectionResult *, std::__1::default_delete<CMMsl::WalkingDetectionResult>> {
        struct WalkingDetectionResult *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::WatchOnWristState, std::__1::default_delete<CMMsl::WatchOnWristState>> {
    struct __compressed_pair<CMMsl::WatchOnWristState *, std::__1::default_delete<CMMsl::WatchOnWristState>> {
        struct WatchOnWristState *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::WatchOrientationSettings, std::__1::default_delete<CMMsl::WatchOrientationSettings>> {
    struct __compressed_pair<CMMsl::WatchOrientationSettings *, std::__1::default_delete<CMMsl::WatchOrientationSettings>> {
        struct WatchOrientationSettings *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::WifiScanResults, std::__1::default_delete<CMMsl::WifiScanResults>> {
    struct __compressed_pair<CMMsl::WifiScanResults *, std::__1::default_delete<CMMsl::WifiScanResults>> {
        struct WifiScanResults *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::WorkoutEvent, std::__1::default_delete<CMMsl::WorkoutEvent>> {
    struct __compressed_pair<CMMsl::WorkoutEvent *, std::__1::default_delete<CMMsl::WorkoutEvent>> {
        struct WorkoutEvent *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::WorkoutRecorderALSData, std::__1::default_delete<CMMsl::WorkoutRecorderALSData>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderALSData *, std::__1::default_delete<CMMsl::WorkoutRecorderALSData>> {
        struct WorkoutRecorderALSData *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::WorkoutRecorderAccel, std::__1::default_delete<CMMsl::WorkoutRecorderAccel>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderAccel *, std::__1::default_delete<CMMsl::WorkoutRecorderAccel>> {
        struct WorkoutRecorderAccel *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::WorkoutRecorderAccel800, std::__1::default_delete<CMMsl::WorkoutRecorderAccel800>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderAccel800 *, std::__1::default_delete<CMMsl::WorkoutRecorderAccel800>> {
        struct WorkoutRecorderAccel800 *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::WorkoutRecorderBodyMetrics, std::__1::default_delete<CMMsl::WorkoutRecorderBodyMetrics>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderBodyMetrics *, std::__1::default_delete<CMMsl::WorkoutRecorderBodyMetrics>> {
        struct WorkoutRecorderBodyMetrics *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::WorkoutRecorderElevation, std::__1::default_delete<CMMsl::WorkoutRecorderElevation>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderElevation *, std::__1::default_delete<CMMsl::WorkoutRecorderElevation>> {
        struct WorkoutRecorderElevation *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::WorkoutRecorderHealthKitInfo, std::__1::default_delete<CMMsl::WorkoutRecorderHealthKitInfo>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderHealthKitInfo *, std::__1::default_delete<CMMsl::WorkoutRecorderHealthKitInfo>> {
        struct WorkoutRecorderHealthKitInfo *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::WorkoutRecorderHeartRate, std::__1::default_delete<CMMsl::WorkoutRecorderHeartRate>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderHeartRate *, std::__1::default_delete<CMMsl::WorkoutRecorderHeartRate>> {
        struct WorkoutRecorderHeartRate *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::WorkoutRecorderOdometer, std::__1::default_delete<CMMsl::WorkoutRecorderOdometer>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderOdometer *, std::__1::default_delete<CMMsl::WorkoutRecorderOdometer>> {
        struct WorkoutRecorderOdometer *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::WorkoutRecorderPressure, std::__1::default_delete<CMMsl::WorkoutRecorderPressure>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderPressure *, std::__1::default_delete<CMMsl::WorkoutRecorderPressure>> {
        struct WorkoutRecorderPressure *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::WorkoutRecorderRotationRate, std::__1::default_delete<CMMsl::WorkoutRecorderRotationRate>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderRotationRate *, std::__1::default_delete<CMMsl::WorkoutRecorderRotationRate>> {
        struct WorkoutRecorderRotationRate *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::WorkoutRecorderWatchOrientationSettings, std::__1::default_delete<CMMsl::WorkoutRecorderWatchOrientationSettings>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderWatchOrientationSettings *, std::__1::default_delete<CMMsl::WorkoutRecorderWatchOrientationSettings>> {
        struct WorkoutRecorderWatchOrientationSettings *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::WorkoutRecorderWifiScanResults, std::__1::default_delete<CMMsl::WorkoutRecorderWifiScanResults>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderWifiScanResults *, std::__1::default_delete<CMMsl::WorkoutRecorderWifiScanResults>> {
        struct WorkoutRecorderWifiScanResults *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::WorkoutRecorderWorkoutEvent, std::__1::default_delete<CMMsl::WorkoutRecorderWorkoutEvent>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderWorkoutEvent *, std::__1::default_delete<CMMsl::WorkoutRecorderWorkoutEvent>> {
        struct WorkoutRecorderWorkoutEvent *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::WriterManager<CLLegacyFileManager>, std::__1::default_delete<CMMsl::WriterManager<CLLegacyFileManager>>> {
    struct __compressed_pair<CMMsl::WriterManager<CLLegacyFileManager>*, std::__1::default_delete<CMMsl::WriterManager<CLLegacyFileManager>>> {
        struct WriterManager<CLLegacyFileManager> *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::ZeroVelocityCorrection, std::__1::default_delete<CMMsl::ZeroVelocityCorrection>> {
    struct __compressed_pair<CMMsl::ZeroVelocityCorrection *, std::__1::default_delete<CMMsl::ZeroVelocityCorrection>> {
        struct ZeroVelocityCorrection *_field1;
    } _field1;
};

struct unique_ptr<RollingPowerAssertion, std::__1::default_delete<RollingPowerAssertion>> {
    struct __compressed_pair<RollingPowerAssertion *, std::__1::default_delete<RollingPowerAssertion>> {
        struct RollingPowerAssertion *__value_;
    } __ptr_;
};

struct unique_ptr<raven::RavenSupervisor, std::__1::default_delete<raven::RavenSupervisor>> {
    struct __compressed_pair<raven::RavenSupervisor *, std::__1::default_delete<raven::RavenSupervisor>> {
        struct RavenSupervisor *_field1;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLPersistentSubscriptionBase::Connection *, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLPersistentSubscriptionBase::Connection *, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLPersistentSubscriptionBase::Connection *, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLPersistentSubscriptionBase::Connection *, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<CLPersistentSubscriptionBase::Connection *, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLPersistentSubscriptionBase::Connection *, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLPersistentSubscriptionBase::Connection *, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::ClientArrowRecord>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::ClientArrowRecord>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::ClientArrowRecord>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::ClientArrowRecord>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::ClientArrowRecord>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::ClientArrowRecord>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::ClientArrowRecord>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::function<void ()>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::function<void ()>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::function<void ()>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::function<void ()>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::function<void ()>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::function<void ()>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::function<void ()>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<CLPeopleDensityBTLEAdvertisement, std::__1::allocator<CLPeopleDensityBTLEAdvertisement>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<CLPeopleDensityBTLEAdvertisement, std::__1::allocator<CLPeopleDensityBTLEAdvertisement>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<CLPeopleDensityBTLEAdvertisement, std::__1::allocator<CLPeopleDensityBTLEAdvertisement>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<CLPeopleDensityBTLEAdvertisement, std::__1::allocator<CLPeopleDensityBTLEAdvertisement>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<CLPeopleDensityBTLEAdvertisement, std::__1::allocator<CLPeopleDensityBTLEAdvertisement>>>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<CLPeopleDensityBTLEAdvertisement, std::__1::allocator<CLPeopleDensityBTLEAdvertisement>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<CLPeopleDensityBTLEAdvertisement, std::__1::allocator<CLPeopleDensityBTLEAdvertisement>>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unordered_map<CLLocationType, CLChinaShiftedDataStructure, std::__1::hash<CLLocationType>, std::__1::equal_to<CLLocationType>, std::__1::allocator<std::__1::pair<const CLLocationType, CLChinaShiftedDataStructure>>> {
    struct __hash_table<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, std::__1::__unordered_map_hasher<CLLocationType, std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, std::__1::hash<CLLocationType>, true>, std::__1::__unordered_map_equal<CLLocationType, std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, std::__1::equal_to<CLLocationType>, true>, std::__1::allocator<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CLLocationType, std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, std::__1::hash<CLLocationType>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<CLLocationType, std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, std::__1::equal_to<CLLocationType>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>>> {
    struct __hash_table<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::__1::hash<CLMacAddress>, true>, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::__1::equal_to<CLMacAddress>, true>, std::__1::allocator<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::__1::hash<CLMacAddress>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::__1::equal_to<CLMacAddress>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<CLMacAddress, CLWifiService_Type::AccessPoint, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLWifiService_Type::AccessPoint>>> {
    struct __hash_table<std::__1::__hash_value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::hash<CLMacAddress>, true>, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::equal_to<CLMacAddress>, true>, std::__1::allocator<std::__1::__hash_value_type<CLMacAddress, CLWifiService_Type::AccessPoint>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::hash<CLMacAddress>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::equal_to<CLMacAddress>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>, std::__1::hash<CLMobileAssetManager_Type::AssetDescriptor>, std::__1::equal_to<CLMobileAssetManager_Type::AssetDescriptor>, std::__1::allocator<std::__1::pair<const CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>>>> {
    struct __hash_table<std::__1::__hash_value_type<CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>>, std::__1::__unordered_map_hasher<CLMobileAssetManager_Type::AssetDescriptor, std::__1::__hash_value_type<CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>>, std::__1::hash<CLMobileAssetManager_Type::AssetDescriptor>, true>, std::__1::__unordered_map_equal<CLMobileAssetManager_Type::AssetDescriptor, std::__1::__hash_value_type<CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>>, std::__1::equal_to<CLMobileAssetManager_Type::AssetDescriptor>, true>, std::__1::allocator<std::__1::__hash_value_type<CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CLMobileAssetManager_Type::AssetDescriptor, std::__1::__hash_value_type<CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>>, std::__1::hash<CLMobileAssetManager_Type::AssetDescriptor>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<CLMobileAssetManager_Type::AssetDescriptor, std::__1::__hash_value_type<CLMobileAssetManager_Type::AssetDescriptor, std::__1::unique_ptr<CLConfigAssetComponent, std::__1::default_delete<CLConfigAssetComponent>>>, std::__1::equal_to<CLMobileAssetManager_Type::AssetDescriptor>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>, std::__1::hash<CLTelephonyService_Type::BundleDescriptor>, std::__1::equal_to<CLTelephonyService_Type::BundleDescriptor>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>>>> {
    struct __hash_table<std::__1::__hash_value_type<CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>>, std::__1::__unordered_map_hasher<CLTelephonyService_Type::BundleDescriptor, std::__1::__hash_value_type<CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>>, std::__1::hash<CLTelephonyService_Type::BundleDescriptor>, true>, std::__1::__unordered_map_equal<CLTelephonyService_Type::BundleDescriptor, std::__1::__hash_value_type<CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>>, std::__1::equal_to<CLTelephonyService_Type::BundleDescriptor>, true>, std::__1::allocator<std::__1::__hash_value_type<CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CLTelephonyService_Type::BundleDescriptor, std::__1::__hash_value_type<CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>>, std::__1::hash<CLTelephonyService_Type::BundleDescriptor>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<CLTelephonyService_Type::BundleDescriptor, std::__1::__hash_value_type<CLTelephonyService_Type::BundleDescriptor, std::__1::shared_ptr<CLTelephonyService_Type::BundleInfo>>, std::__1::equal_to<CLTelephonyService_Type::BundleDescriptor>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<CLTelephonyService_Type::SimInstance, CLEmergencyActor::NetworkAndSimInfo, std::__1::hash<CLTelephonyService_Type::SimInstance>, std::__1::equal_to<CLTelephonyService_Type::SimInstance>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::SimInstance, CLEmergencyActor::NetworkAndSimInfo>>>;

struct unordered_map<CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig, std::__1::hash<CLTelephonyService_Type::SimInstance>, std::__1::equal_to<CLTelephonyService_Type::SimInstance>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig>>> {
    struct __hash_table<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig>, std::__1::__unordered_map_hasher<CLTelephonyService_Type::SimInstance, std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig>, std::__1::hash<CLTelephonyService_Type::SimInstance>, true>, std::__1::__unordered_map_equal<CLTelephonyService_Type::SimInstance, std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig>, std::__1::equal_to<CLTelephonyService_Type::SimInstance>, true>, std::__1::allocator<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CLTelephonyService_Type::SimInstance, std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig>, std::__1::hash<CLTelephonyService_Type::SimInstance>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<CLTelephonyService_Type::SimInstance, std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, CLEmergencyEED2::SimConfig>, std::__1::equal_to<CLTelephonyService_Type::SimInstance>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>, std::__1::hash<CLTelephonyService_Type::SimInstance>, std::__1::equal_to<CLTelephonyService_Type::SimInstance>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>>>> {
    struct __hash_table<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>>, std::__1::__unordered_map_hasher<CLTelephonyService_Type::SimInstance, std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>>, std::__1::hash<CLTelephonyService_Type::SimInstance>, true>, std::__1::__unordered_map_equal<CLTelephonyService_Type::SimInstance, std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>>, std::__1::equal_to<CLTelephonyService_Type::SimInstance>, true>, std::__1::allocator<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CLTelephonyService_Type::SimInstance, std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>>, std::__1::hash<CLTelephonyService_Type::SimInstance>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<CLTelephonyService_Type::SimInstance, std::__1::__hash_value_type<CLTelephonyService_Type::SimInstance, std::__1::basic_string<char>>, std::__1::equal_to<CLTelephonyService_Type::SimInstance>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::__1::basic_string<char>, CLClientManager::ClientArrowRecord, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLClientManager::ClientArrowRecord>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::ClientArrowRecord>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::ClientArrowRecord>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::ClientArrowRecord>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::ClientArrowRecord>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::ClientArrowRecord>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::ClientArrowRecord>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::ClientArrowRecord>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::ClientArrowRecord>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::ClientArrowRecord>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::ClientArrowRecord>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::ClientArrowRecord>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, CLClientManager::LocationConsumptionScoreInfo>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, CLPersistentSubscriptionBase::CachedMessage>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::__1::basic_string<char>, std::__1::function<void ()>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::function<void ()>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::function<void ()>>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::function<void ()>>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::function<void ()>>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::function<void ()>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::function<void ()>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::function<void ()>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::function<void ()>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::function<void ()>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::function<void ()>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::function<void ()>>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::function<void ()>>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::weak_ptr<CLPersistentSubscriptionBase>>>>>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::__1::basic_string<char>, std::__1::vector<CLPeopleDensityBTLEAdvertisement, std::__1::allocator<CLPeopleDensityBTLEAdvertisement>>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::vector<CLPeopleDensityBTLEAdvertisement, std::__1::allocator<CLPeopleDensityBTLEAdvertisement>>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<CLPeopleDensityBTLEAdvertisement, std::__1::allocator<CLPeopleDensityBTLEAdvertisement>>>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<CLPeopleDensityBTLEAdvertisement, std::__1::allocator<CLPeopleDensityBTLEAdvertisement>>>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<CLPeopleDensityBTLEAdvertisement, std::__1::allocator<CLPeopleDensityBTLEAdvertisement>>>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<CLPeopleDensityBTLEAdvertisement, std::__1::allocator<CLPeopleDensityBTLEAdvertisement>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<CLPeopleDensityBTLEAdvertisement, std::__1::allocator<CLPeopleDensityBTLEAdvertisement>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<CLPeopleDensityBTLEAdvertisement, std::__1::allocator<CLPeopleDensityBTLEAdvertisement>>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<CLPeopleDensityBTLEAdvertisement, std::__1::allocator<CLPeopleDensityBTLEAdvertisement>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<CLPeopleDensityBTLEAdvertisement, std::__1::allocator<CLPeopleDensityBTLEAdvertisement>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<CLPeopleDensityBTLEAdvertisement, std::__1::allocator<CLPeopleDensityBTLEAdvertisement>>>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<CLPeopleDensityBTLEAdvertisement, std::__1::allocator<CLPeopleDensityBTLEAdvertisement>>>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<CLPeopleDensityBTLEAdvertisement, std::__1::allocator<CLPeopleDensityBTLEAdvertisement>>>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>>, std::__1::__unordered_map_hasher<std::__1::type_index, std::__1::__hash_value_type<std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>>, std::__1::hash<std::__1::type_index>, true>, std::__1::__unordered_map_equal<std::__1::type_index, std::__1::__hash_value_type<std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>>, std::__1::equal_to<std::__1::type_index>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::type_index, std::__1::__hash_value_type<std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>>, std::__1::hash<std::__1::type_index>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::type_index, std::__1::__hash_value_type<std::__1::type_index, std::__1::shared_ptr<CLPersistentSubscriptionBase>>, std::__1::equal_to<std::__1::type_index>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, std::__1::__unordered_map_hasher<std::__1::type_index, std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, std::__1::hash<std::__1::type_index>, true>, std::__1::__unordered_map_equal<std::__1::type_index, std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, std::__1::equal_to<std::__1::type_index>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::type_index, std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, std::__1::hash<std::__1::type_index>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::type_index, std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, std::__1::equal_to<std::__1::type_index>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement>> {
    struct __hash_table<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*>, std::__1::allocator<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, CLMicroLocationFingerprint::HashMeasurement> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, CLMicroLocationFingerprint::PredicateMeasurement> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_set<CLMacAddress, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<CLMacAddress>> {
    struct __hash_table<CLMacAddress, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<CLMacAddress>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*>, std::__1::allocator<std::__1::__hash_node<CLMacAddress, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::hash<CLMacAddress>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<CLMacAddress>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_set<CLPersistentSubscriptionBase::Connection *, std::__1::hash<CLPersistentSubscriptionBase::Connection *>, std::__1::equal_to<CLPersistentSubscriptionBase::Connection *>, std::__1::allocator<CLPersistentSubscriptionBase::Connection *>> {
    struct __hash_table<CLPersistentSubscriptionBase::Connection *, std::__1::hash<CLPersistentSubscriptionBase::Connection *>, std::__1::equal_to<CLPersistentSubscriptionBase::Connection *>, std::__1::allocator<CLPersistentSubscriptionBase::Connection *>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLPersistentSubscriptionBase::Connection *, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLPersistentSubscriptionBase::Connection *, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLPersistentSubscriptionBase::Connection *, void *>*>, std::__1::allocator<std::__1::__hash_node<CLPersistentSubscriptionBase::Connection *, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<CLPersistentSubscriptionBase::Connection *, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::hash<CLPersistentSubscriptionBase::Connection *>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<CLPersistentSubscriptionBase::Connection *>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_set<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint>> {
    struct __hash_table<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*>, std::__1::allocator<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, CLWifiService_Type::AccessPointHash> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, CLWifiService_Type::AccessPointEquality> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_set<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> {
    struct __hash_table<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::hash<std::__1::basic_string<char>>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<std::__1::basic_string<char>>> {
            float _field1;
        } _field4;
    } _field1;
};

struct uuid {
    unsigned char _field1[16];
};

struct vector<ALSWifiBand, std::__1::allocator<ALSWifiBand>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<ALSWifiBand *, std::__1::allocator<ALSWifiBand>> {
        int *_field1;
    } _field3;
};

struct vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>> {
    struct CLAggregationRule *_field1;
    struct CLAggregationRule *_field2;
    struct __compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule>> {
        struct CLAggregationRule *_field1;
    } _field3;
};

struct vector<CLCell, std::__1::allocator<CLCell>> {
    struct CLCell *_field1;
    struct CLCell *_field2;
    struct __compressed_pair<CLCell *, std::__1::allocator<CLCell>> {
        struct CLCell *_field1;
    } _field3;
};

struct vector<CLClientLocationCoordinate, std::__1::allocator<CLClientLocationCoordinate>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<CLClientLocationCoordinate *, std::__1::allocator<CLClientLocationCoordinate>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<CLClientManager::ImproveAccuracyNotification, std::__1::allocator<CLClientManager::ImproveAccuracyNotification>> {
    struct ImproveAccuracyNotification *_field1;
    struct ImproveAccuracyNotification *_field2;
    struct __compressed_pair<CLClientManager::ImproveAccuracyNotification *, std::__1::allocator<CLClientManager::ImproveAccuracyNotification>> {
        struct ImproveAccuracyNotification *_field1;
    } _field3;
};

struct vector<CLClientSatelliteInfo, std::__1::allocator<CLClientSatelliteInfo>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<CLClientSatelliteInfo *, std::__1::allocator<CLClientSatelliteInfo>> {
        CDStruct_183601bc *__value_;
    } __end_cap_;
};

struct vector<CLDaemonLocation, std::__1::allocator<CLDaemonLocation>> {
    struct CLDaemonLocation *__begin_;
    struct CLDaemonLocation *__end_;
    struct __compressed_pair<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation>> {
        struct CLDaemonLocation *__value_;
    } __end_cap_;
};

struct vector<CLEmergencyController::LocationSettings::Emergency::AugmentedAction::EED2::PartnerInfo, std::__1::allocator<CLEmergencyController::LocationSettings::Emergency::AugmentedAction::EED2::PartnerInfo>> {
    struct PartnerInfo *_field1;
    struct PartnerInfo *_field2;
    struct __compressed_pair<CLEmergencyController::LocationSettings::Emergency::AugmentedAction::EED2::PartnerInfo *, std::__1::allocator<CLEmergencyController::LocationSettings::Emergency::AugmentedAction::EED2::PartnerInfo>> {
        struct PartnerInfo *_field1;
    } _field3;
};

struct vector<CLFenceManager_Type::Fence, std::__1::allocator<CLFenceManager_Type::Fence>> {
    struct Fence *_field1;
    struct Fence *_field2;
    struct __compressed_pair<CLFenceManager_Type::Fence *, std::__1::allocator<CLFenceManager_Type::Fence>> {
        struct Fence *_field1;
    } _field3;
};

struct vector<CLFenceMonitor::GpsSession, std::__1::allocator<CLFenceMonitor::GpsSession>> {
    struct GpsSession *_field1;
    struct GpsSession *_field2;
    struct __compressed_pair<CLFenceMonitor::GpsSession *, std::__1::allocator<CLFenceMonitor::GpsSession>> {
        struct GpsSession *_field1;
    } _field3;
};

struct vector<CLHomeKitProvider_Type::HomeKitDevice, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice>> {
    struct HomeKitDevice *_field1;
    struct HomeKitDevice *_field2;
    struct __compressed_pair<CLHomeKitProvider_Type::HomeKitDevice *, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice>> {
        struct HomeKitDevice *_field1;
    } _field3;
};

struct vector<CLKappaRecordingGpsItem, std::__1::allocator<CLKappaRecordingGpsItem>> {
    struct CLKappaRecordingGpsItem *_field1;
    struct CLKappaRecordingGpsItem *_field2;
    struct __compressed_pair<CLKappaRecordingGpsItem *, std::__1::allocator<CLKappaRecordingGpsItem>> {
        struct CLKappaRecordingGpsItem *_field1;
    } _field3;
};

struct vector<CLLocationType, std::__1::allocator<CLLocationType>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<CLLocationType *, std::__1::allocator<CLLocationType>> {
        int *_field1;
    } _field3;
};

struct vector<CLMacAddress, std::__1::allocator<CLMacAddress>> {
    struct CLMacAddress *_field1;
    struct CLMacAddress *_field2;
    struct __compressed_pair<CLMacAddress *, std::__1::allocator<CLMacAddress>> {
        struct CLMacAddress *_field1;
    } _field3;
};

struct vector<CLMapsRouteHint, std::__1::allocator<CLMapsRouteHint>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<CLMapsRouteHint *, std::__1::allocator<CLMapsRouteHint>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<CLMarketRegion, std::__1::allocator<CLMarketRegion>> {
    struct CLMarketRegion *_field1;
    struct CLMarketRegion *_field2;
    struct __compressed_pair<CLMarketRegion *, std::__1::allocator<CLMarketRegion>> {
        struct CLMarketRegion *_field1;
    } _field3;
};

struct vector<CLMicroLocationLocalizer::ModelAndIds, std::__1::allocator<CLMicroLocationLocalizer::ModelAndIds>> {
    struct ModelAndIds *_field1;
    struct ModelAndIds *_field2;
    struct __compressed_pair<CLMicroLocationLocalizer::ModelAndIds *, std::__1::allocator<CLMicroLocationLocalizer::ModelAndIds>> {
        struct ModelAndIds *_field1;
    } _field3;
};

struct vector<CLMicroLocationProto::RecordingEvent, std::__1::allocator<CLMicroLocationProto::RecordingEvent>> {
    struct RecordingEvent *_field1;
    struct RecordingEvent *_field2;
    struct __compressed_pair<CLMicroLocationProto::RecordingEvent *, std::__1::allocator<CLMicroLocationProto::RecordingEvent>> {
        struct RecordingEvent *_field1;
    } _field3;
};

struct vector<CLMicroLocationWiFiChannelHistogram, std::__1::allocator<CLMicroLocationWiFiChannelHistogram>> {
    struct CLMicroLocationWiFiChannelHistogram *_field1;
    struct CLMicroLocationWiFiChannelHistogram *_field2;
    struct __compressed_pair<CLMicroLocationWiFiChannelHistogram *, std::__1::allocator<CLMicroLocationWiFiChannelHistogram>> {
        struct CLMicroLocationWiFiChannelHistogram *_field1;
    } _field3;
};

struct vector<CLMobility::BoutMetrics, std::__1::allocator<CLMobility::BoutMetrics>> {
    struct BoutMetrics *_field1;
    struct BoutMetrics *_field2;
    struct __compressed_pair<CLMobility::BoutMetrics *, std::__1::allocator<CLMobility::BoutMetrics>> {
        struct BoutMetrics *_field1;
    } _field3;
};

struct vector<CLNatalieData, std::__1::allocator<CLNatalieData>> {
    struct CLNatalieData *_field1;
    struct CLNatalieData *_field2;
    struct __compressed_pair<CLNatalieData *, std::__1::allocator<CLNatalieData>> {
        struct CLNatalieData *_field1;
    } _field3;
};

struct vector<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound>> {
    struct TemperatureOffsetCoefficientRound *_field1;
    struct TemperatureOffsetCoefficientRound *_field2;
    struct __compressed_pair<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound *, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound>> {
        struct TemperatureOffsetCoefficientRound *_field1;
    } _field3;
};

struct vector<CLRangingPeerInternal, std::__1::allocator<CLRangingPeerInternal>> {
    struct CLRangingPeerInternal *_field1;
    struct CLRangingPeerInternal *_field2;
    struct __compressed_pair<CLRangingPeerInternal *, std::__1::allocator<CLRangingPeerInternal>> {
        struct CLRangingPeerInternal *_field1;
    } _field3;
};

struct vector<CLSedentaryAlarmData, std::__1::allocator<CLSedentaryAlarmData>> {
    struct CLSedentaryAlarmData *_field1;
    struct CLSedentaryAlarmData *_field2;
    struct __compressed_pair<CLSedentaryAlarmData *, std::__1::allocator<CLSedentaryAlarmData>> {
        struct CLSedentaryAlarmData *_field1;
    } _field3;
};

struct vector<CLStepCountEntry, std::__1::allocator<CLStepCountEntry>> {
    struct CLStepCountEntry *_field1;
    struct CLStepCountEntry *_field2;
    struct __compressed_pair<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry>> {
        struct CLStepCountEntry *_field1;
    } _field3;
};

struct vector<CLSwimStrokesPerTurnDistribution, std::__1::allocator<CLSwimStrokesPerTurnDistribution>> {
    struct CLSwimStrokesPerTurnDistribution *_field1;
    struct CLSwimStrokesPerTurnDistribution *_field2;
    struct __compressed_pair<CLSwimStrokesPerTurnDistribution *, std::__1::allocator<CLSwimStrokesPerTurnDistribution>> {
        struct CLSwimStrokesPerTurnDistribution *_field1;
    } _field3;
};

struct vector<CLTelephonyService_Type::CdmaCell, std::__1::allocator<CLTelephonyService_Type::CdmaCell>> {
    struct CdmaCell *_field1;
    struct CdmaCell *_field2;
    struct __compressed_pair<CLTelephonyService_Type::CdmaCell *, std::__1::allocator<CLTelephonyService_Type::CdmaCell>> {
        struct CdmaCell *_field1;
    } _field3;
};

struct vector<CLTelephonyService_Type::Cell, std::__1::allocator<CLTelephonyService_Type::Cell>> {
    struct Cell *_field1;
    struct Cell *_field2;
    struct __compressed_pair<CLTelephonyService_Type::Cell *, std::__1::allocator<CLTelephonyService_Type::Cell>> {
        struct Cell *_field1;
    } _field3;
};

struct vector<CLTelephonyService_Type::LteCell, std::__1::allocator<CLTelephonyService_Type::LteCell>> {
    struct LteCell *_field1;
    struct LteCell *_field2;
    struct __compressed_pair<CLTelephonyService_Type::LteCell *, std::__1::allocator<CLTelephonyService_Type::LteCell>> {
        struct LteCell *_field1;
    } _field3;
};

struct vector<CLTelephonyService_Type::ScdmaCell, std::__1::allocator<CLTelephonyService_Type::ScdmaCell>> {
    struct ScdmaCell *_field1;
    struct ScdmaCell *_field2;
    struct __compressed_pair<CLTelephonyService_Type::ScdmaCell *, std::__1::allocator<CLTelephonyService_Type::ScdmaCell>> {
        struct ScdmaCell *_field1;
    } _field3;
};

struct vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint>> {
    struct AccessPoint *_field1;
    struct AccessPoint *_field2;
    struct __compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint>> {
        struct AccessPoint *_field1;
    } _field3;
};

struct vector<CLWifiService_Type::Notification, std::__1::allocator<CLWifiService_Type::Notification>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<CLWifiService_Type::Notification *, std::__1::allocator<CLWifiService_Type::Notification>> {
        int *_field1;
    } _field3;
};

struct vector<DeviceLocationData, std::__1::allocator<DeviceLocationData>> {
    struct DeviceLocationData *_field1;
    struct DeviceLocationData *_field2;
    struct __compressed_pair<DeviceLocationData *, std::__1::allocator<DeviceLocationData>> {
        struct DeviceLocationData *_field1;
    } _field3;
};

struct vector<TileId, std::__1::allocator<TileId>> {
    struct TileId *_field1;
    struct TileId *_field2;
    struct __compressed_pair<TileId *, std::__1::allocator<TileId>> {
        struct TileId *_field1;
    } _field3;
};

struct vector<VO2MaxModelInput, std::__1::allocator<VO2MaxModelInput>> {
    struct VO2MaxModelInput *_field1;
    struct VO2MaxModelInput *_field2;
    struct __compressed_pair<VO2MaxModelInput *, std::__1::allocator<VO2MaxModelInput>> {
        struct VO2MaxModelInput *_field1;
    } _field3;
};

struct vector<clv::fusion::LocationFuserMeasurement<clv::fusion::LocData>, std::__1::allocator<clv::fusion::LocationFuserMeasurement<clv::fusion::LocData>>> {
    struct LocationFuserMeasurement<clv::fusion::LocData> *_field1;
    struct LocationFuserMeasurement<clv::fusion::LocData> *_field2;
    struct __compressed_pair<clv::fusion::LocationFuserMeasurement<clv::fusion::LocData>*, std::__1::allocator<clv::fusion::LocationFuserMeasurement<clv::fusion::LocData>>> {
        struct LocationFuserMeasurement<clv::fusion::LocData> *_field1;
    } _field3;
};

struct vector<clv::fusion::LocationFuserMeasurement<clv::fusion::VlfData>, std::__1::allocator<clv::fusion::LocationFuserMeasurement<clv::fusion::VlfData>>> {
    struct LocationFuserMeasurement<clv::fusion::VlfData> *_field1;
    struct LocationFuserMeasurement<clv::fusion::VlfData> *_field2;
    struct __compressed_pair<clv::fusion::LocationFuserMeasurement<clv::fusion::VlfData>*, std::__1::allocator<clv::fusion::LocationFuserMeasurement<clv::fusion::VlfData>>> {
        struct LocationFuserMeasurement<clv::fusion::VlfData> *_field1;
    } _field3;
};

struct vector<clv::fusion::LocationFuserState, std::__1::allocator<clv::fusion::LocationFuserState>> {
    struct LocationFuserState *_field1;
    struct LocationFuserState *_field2;
    struct __compressed_pair<clv::fusion::LocationFuserState *, std::__1::allocator<clv::fusion::LocationFuserState>> {
        struct LocationFuserState *_field1;
    } _field3;
};

struct vector<clv::fusion::VioData, std::__1::allocator<clv::fusion::VioData>> {
    struct VioData *_field1;
    struct VioData *_field2;
    struct __compressed_pair<clv::fusion::VioData *, std::__1::allocator<clv::fusion::VioData>> {
        struct VioData *_field1;
    } _field3;
};

struct vector<double, std::__1::allocator<double>> {
    double *__begin_;
    double *__end_;
    struct __compressed_pair<double *, std::__1::allocator<double>> {
        double *__value_;
    } __end_cap_;
};

struct vector<float, std::__1::allocator<float>> {
    float *__begin_;
    float *__end_;
    struct __compressed_pair<float *, std::__1::allocator<float>> {
        float *__value_;
    } __end_cap_;
};

struct vector<int, std::__1::allocator<int>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<int *, std::__1::allocator<int>> {
        int *_field1;
    } _field3;
};

struct vector<std::__1::pair<double, CLMotionActivity::Type>, std::__1::allocator<std::__1::pair<double, CLMotionActivity::Type>>> {
    struct pair<double, CLMotionActivity::Type> *__begin_;
    struct pair<double, CLMotionActivity::Type> *__end_;
    struct __compressed_pair<std::__1::pair<double, CLMotionActivity::Type>*, std::__1::allocator<std::__1::pair<double, CLMotionActivity::Type>>> {
        struct pair<double, CLMotionActivity::Type> *__value_;
    } __end_cap_;
};

struct vector<std::__1::pair<double, double>, std::__1::allocator<std::__1::pair<double, double>>> {
    struct pair<double, double> *_field1;
    struct pair<double, double> *_field2;
    struct __compressed_pair<std::__1::pair<double, double>*, std::__1::allocator<std::__1::pair<double, double>>> {
        struct pair<double, double> *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<CLSubHarvester>, std::__1::allocator<std::__1::shared_ptr<CLSubHarvester>>> {
    struct shared_ptr<CLSubHarvester> *__begin_;
    struct shared_ptr<CLSubHarvester> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<CLSubHarvester>*, std::__1::allocator<std::__1::shared_ptr<CLSubHarvester>>> {
        struct shared_ptr<CLSubHarvester> *__value_;
    } __end_cap_;
};

struct vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet>>, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet>>>> {
    struct unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet>> *_field1;
    struct unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet>> *_field2;
    struct __compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet>>*, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet>>>> {
        struct unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet>> *_field1;
    } _field3;
};

struct vector<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>>, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>>>> {
    struct vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>> *_field1;
    struct vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>> *_field2;
    struct __compressed_pair<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>>*, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>>>> {
        struct vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>> *_field1;
    } _field3;
};

struct vector<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint>>, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint>>>> {
    vector_94cb9693 *_field1;
    vector_94cb9693 *_field2;
    struct __compressed_pair<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint>>*, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint>>>> {
        vector_94cb9693 *_field1;
    } _field3;
};

struct vector<std::__1::vector<float, std::__1::allocator<float>>, std::__1::allocator<std::__1::vector<float, std::__1::allocator<float>>>> {
    struct vector<float, std::__1::allocator<float>> *__begin_;
    struct vector<float, std::__1::allocator<float>> *__end_;
    struct __compressed_pair<std::__1::vector<float, std::__1::allocator<float>>*, std::__1::allocator<std::__1::vector<float, std::__1::allocator<float>>>> {
        struct vector<float, std::__1::allocator<float>> *__value_;
    } __end_cap_;
};

struct vector<unsigned char, std::__1::allocator<unsigned char>> {
    char *_field1;
    char *_field2;
    struct __compressed_pair<unsigned char *, std::__1::allocator<unsigned char>> {
        char *_field1;
    } _field3;
};

struct vector<unsigned int, std::__1::allocator<unsigned int>> {
    unsigned int *_field1;
    unsigned int *_field2;
    struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int>> {
        unsigned int *_field1;
    } _field3;
};

struct weak_ptr<CLPersistentSubscriptionBase> {
    struct CLPersistentSubscriptionBase *_field1;
    struct __shared_weak_count *_field2;
};

struct z_stream_s {
    char *_field1;
    unsigned int _field2;
    unsigned long long _field3;
    char *_field4;
    unsigned int _field5;
    unsigned long long _field6;
    char *_field7;
    struct internal_state *_field8;
    CDUnknownFunctionPointerType _field9;
    CDUnknownFunctionPointerType _field10;
    void *_field11;
    int _field12;
    unsigned long long _field13;
    unsigned long long _field14;
};

#if 0
// Names with conflicting types:
typedef struct {
    int _field1;
    _Bool _field2;
} NotificationData_6933e140;

typedef struct {
    int _field1;
    int _field2;
    int _field3;
    unsigned long long _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
} WristState_5dc64808;

typedef struct {
    unsigned int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    struct LPPRel13MeasSettings _field7;
    unsigned int _field8;
} Settings_70d74696;

typedef struct {
    double _field1;
    double _field2;
    struct WristState {
        int _field1;
        int _field2;
        int _field3;
        unsigned long long _field4;
        _Bool _field5;
        _Bool _field6;
        _Bool _field7;
    } _field3;
} WristState_948f25b1;

typedef struct {
    double _field1;
    struct {
        float _field1;
        float _field2;
    } _field2;
} Sample_b71dd899;

typedef struct {
    struct FallStatsConfig _field1;
    _Bool _field2;
} Config_e2fe5abe;

typedef struct {
    struct FalsePositiveSuppressionFeatures {
        unsigned long long _field1;
        unsigned long long _field2;
        unsigned long long _field3;
        unsigned short _field4;
        float _field5;
        float _field6;
        float _field7;
        int _field8;
        float _field9;
        int _field10;
        unsigned long long _field11;
        unsigned long long _field12;
    } _field1;
    double _field2;
    double _field3;
} FalsePositiveSuppressionFeatures_8c0e6519;

typedef struct {
    struct FilteredPressure {
        unsigned char _field1;
        unsigned char _field2[3];
        float _field3;
        unsigned long long _field4;
        unsigned long long _field5;
    } _field1;
    double _field2;
} FilteredPressure_54a5c05a;

typedef struct {
    struct Pressure {
        unsigned char _field1;
        unsigned char _field2[3];
        float _field3;
        unsigned long long _field4;
        unsigned long long _field5;
    } _field1;
    double _field2;
} Pressure_bceab11c;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    struct MotionState {
        int _field1;
        int _field2;
        int _field3;
        int _field4;
        int _field5;
        _Bool _field6;
        _Bool _field7;
        _Bool _field8;
        int _field9;
        unsigned long long _field10;
        int _field11;
        _Bool _field12;
        int _field13;
        union VehicularFlagsData _field14;
        int _field15;
        float _field16;
        float _field17;
        float _field18;
        int _field19;
        unsigned long long _field20;
        unsigned long long _field21;
        int _field22;
        int _field23;
    } _field4;
    struct CLNatalieFeatures _field5;
} MotionState_978462da;

typedef struct {
    int _field1;
    basic_string_90719d97 _field2;
    _Bool _field3;
} NotificationData_e9385f74;

typedef struct {
    _Bool _field1;
    struct Device _field2;
    _Bool _field3;
    _Bool _field4;
    unsigned int _field5;
    int _field6;
} NotificationData_6f8a9dd3;

typedef struct {
    struct CLDaemonLocation _field1;
    struct CLDaemonLocationPrivate _field2;
    struct shared_ptr<CLBatchedLocations> _field3;
    struct TechnologyStatus _field4;
    _Bool _field5;
    double _field6;
    int _field7;
    CDStruct_d2b197d1 _field8;
    struct {
        double _field1;
        double _field2;
    } _field9;
    struct XtraFileAvailable _field10;
    int _field11;
    struct LocationDerivedSpeed _field12;
    struct {
        double _field1;
        double _field2;
        double _field3;
        int _field4;
    } _field13;
    struct {
        double _field1;
        double _field2;
        double _field3;
        double _field4;
        double _field5;
        double _field6;
        _Bool _field7;
        double _field8[3][3];
        double _field9;
        double _field10;
        double _field11;
        unsigned long long _field12;
        int _field13;
    } _field14;
    struct shared_ptr<const gnss::MeasurementData> _field15;
    int _field16;
    struct {
        int _field1;
        double _field2;
        double _field3;
        double _field4;
        double _field5;
        double _field6;
        double _field7;
        double _field8[5];
        double _field9;
        double _field10;
        double _field11;
        double _field12;
        int _field13;
        int _field14;
    } _field17;
    struct CLStrongPtr<NSData *> _field18;
    struct PredictedGnssAvailability _field19;
} NotificationData_1e451460;

typedef struct {
    struct Name _field1;
    _Bool _field2;
    int _field3;
} NotificationData_f0e9879e;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    unsigned char _field7;
    float _field8;
    char _field9;
    unsigned short _field10;
} CDStruct_63e0ae22;

typedef struct {
    unsigned short fHead;
    unsigned short fSize;
} CDStruct_b91b6b9f;

typedef struct {
    unsigned int _field1[8];
} CDStruct_6ad76789;

typedef struct {
    int *list;
    unsigned long long count;
    unsigned long long size;
} CDStruct_95bda58d;

typedef struct {
    char _field1;
} CDStruct_2920cfb7;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
} CDStruct_7660b417;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    int _field7;
    int _field8;
    unsigned int _field9;
} CDStruct_9f295740;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    double _field9[50];
    double _field10[50];
} CDStruct_5e97c62c;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
} CDStruct_d2b197d1;

typedef struct {
    double speed;
    double timestamp;
    double uncertainty;
} CDStruct_56299a79;

typedef struct {
    double _field1;
    long long _field2;
    int _field3;
    int _field4;
} CDStruct_0a530110;

typedef struct {
    float _field1;
    float _field2;
    float _field3;
} CDStruct_869f9c67;

typedef struct {
    int recordId;
    double startTime;
    unsigned int pacebin;
    double kvalue;
    double kvalueTrack;
    double score;
    double endTime;
    double distance;
    int steps;
    int session;
    double speed;
    double percentGrade;
    int gpsSource;
    double timestamp;
} CDStruct_9878d8f4;

typedef struct {
    int _field1;
    int _field2;
    double _field3;
    int _field4;
} CDStruct_d998682e;

typedef struct {
    int _field1;
    int _field2;
    float _field3;
} CDStruct_e2152fa8;

typedef struct CDStruct_183601bc;

typedef struct {
    double _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    CDStruct_d2b197d1 _field6[50];
} CDStruct_15521927;

typedef struct {
    int _field1;
    struct {
        double _field1;
        double _field2;
    } _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    int _field11;
    double _field12;
    int _field13;
    struct {
        double _field1;
        double _field2;
    } _field14;
    double _field15;
    int _field16;
    unsigned int _field17;
    int _field18;
    int _field19;
    int _field20;
} CDStruct_88736aa7;

typedef struct {
    int _field1;
    double _field2;
    union {
        struct {
            CDStruct_869f9c67 _field1;
            CDStruct_869f9c67 _field2;
        } _field1;
        struct {
            _Bool _field1;
            char _field2[282];
        } _field2;
    } _field3;
} CDStruct_f9107db3;

typedef struct {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
    int _field7;
    basic_string_90719d97 _field8;
    _Bool _field9;
} CDStruct_b12acf94;

// Ambiguous groups
typedef struct {
    unsigned int arfcn:1;
    unsigned int psc:1;
} CDStruct_6bbaae90;

typedef struct {
    unsigned int mode:1;
} CDStruct_ad4540a6;

typedef struct {
    unsigned int timestamp:1;
} CDStruct_b5306035;

typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct {
    double latitude;
    double longitude;
} CDStruct_2c43369c;

typedef struct array<std::__1::deque<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>, std::__1::allocator<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>>>, 7> {
    struct deque<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>, std::__1::allocator<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>>> __elems_[7];
} array_4864b4ac;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *__data_;
                    unsigned long long __size_;
                    unsigned long long __cap_;
                } __l;
                struct __short {
                    char __data_[23];
                    struct {
                        unsigned char __size_;
                    } ;
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __value_;
    } __r_;
} basic_string_90719d97;

typedef struct function<void (CMError)> {
    struct __value_func<void (CMError)> {
        struct type _field1;
        struct __base<void (CMError)> *_field2;
    } _field1;
} function_289fc905;

typedef struct list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>> {
    struct __list_node_base<CLBTLEBeaconRegion_Type::MonitoredRegion, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconRegion_Type::MonitoredRegion, void *>>> {
        unsigned long long _field1;
    } _field2;
} list_602ae561;

typedef struct optional<CLIndoorError> {
    _Bool m_initialized;
    struct aligned_storage<CLIndoorError> m_storage;
} optional_0170c185;

typedef struct optional<CLLastFix> {
    _Bool m_initialized;
    struct aligned_storage<CLLastFix> m_storage;
} optional_fc06d5c3;

typedef struct optional<std::__1::chrono::time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000>>>> {
    _Bool m_initialized;
    struct aligned_storage<std::__1::chrono::time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000>>>> m_storage;
} optional_830905b6;

typedef struct optional<std::__1::vector<int, std::__1::allocator<int>>> {
    union {
        char _field1;
        vector_3203cf93 _field2;
    } _field1;
    _Bool _field2;
} optional_0f28ac0f;

typedef struct set<int, std::__1::less<int>, std::__1::allocator<int>> {
    struct __tree<int, std::__1::less<int>, std::__1::allocator<int>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<int, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<int>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
} set_7b7d70f4;

typedef struct shared_ptr<CLAvengerHarvestInterface::External> {
    struct External *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_c7246d68;

typedef struct shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> {
    struct CLBarometerCalibrationData *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_16a5184d;

typedef struct shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationWifiData> {
    struct CLBarometerCalibrationWifiData *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_760f25b1;

typedef struct shared_ptr<CLStepCountRecorderDb> {
    struct CLStepCountRecorderDb *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_a3117978;

typedef struct time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1>>> {
    struct duration<long double, std::__1::ratio<1, 1>> __d_;
} time_point_406bde99;

typedef struct time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000>>> {
    struct duration<long long, std::__1::ratio<1, 1000000>> _field1;
} time_point_8c9030d0;

typedef struct vector<ALSWifiBand, std::__1::allocator<ALSWifiBand>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<ALSWifiBand *, std::__1::allocator<ALSWifiBand>> {
        int *_field1;
    } _field3;
} vector_5de28f72;

typedef struct vector<CLFenceManager_Type::Fence, std::__1::allocator<CLFenceManager_Type::Fence>> {
    struct Fence *_field1;
    struct Fence *_field2;
    struct __compressed_pair<CLFenceManager_Type::Fence *, std::__1::allocator<CLFenceManager_Type::Fence>> {
        struct Fence *_field1;
    } _field3;
} vector_7520210c;

typedef struct vector<CLMacAddress, std::__1::allocator<CLMacAddress>> {
    struct CLMacAddress *_field1;
    struct CLMacAddress *_field2;
    struct __compressed_pair<CLMacAddress *, std::__1::allocator<CLMacAddress>> {
        struct CLMacAddress *_field1;
    } _field3;
} vector_81654e89;

typedef struct vector<CLMarketRegion, std::__1::allocator<CLMarketRegion>> {
    struct CLMarketRegion *_field1;
    struct CLMarketRegion *_field2;
    struct __compressed_pair<CLMarketRegion *, std::__1::allocator<CLMarketRegion>> {
        struct CLMarketRegion *_field1;
    } _field3;
} vector_ffaa9e0a;

typedef struct vector<CLMobility::BoutMetrics, std::__1::allocator<CLMobility::BoutMetrics>> {
    struct BoutMetrics *_field1;
    struct BoutMetrics *_field2;
    struct __compressed_pair<CLMobility::BoutMetrics *, std::__1::allocator<CLMobility::BoutMetrics>> {
        struct BoutMetrics *_field1;
    } _field3;
} vector_e5d466fb;

typedef struct vector<CLNatalieData, std::__1::allocator<CLNatalieData>> {
    struct CLNatalieData *_field1;
    struct CLNatalieData *_field2;
    struct __compressed_pair<CLNatalieData *, std::__1::allocator<CLNatalieData>> {
        struct CLNatalieData *_field1;
    } _field3;
} vector_31b53fdd;

typedef struct vector<CLRangingPeerInternal, std::__1::allocator<CLRangingPeerInternal>> {
    struct CLRangingPeerInternal *_field1;
    struct CLRangingPeerInternal *_field2;
    struct __compressed_pair<CLRangingPeerInternal *, std::__1::allocator<CLRangingPeerInternal>> {
        struct CLRangingPeerInternal *_field1;
    } _field3;
} vector_a730dc89;

typedef struct vector<CLSedentaryAlarmData, std::__1::allocator<CLSedentaryAlarmData>> {
    struct CLSedentaryAlarmData *_field1;
    struct CLSedentaryAlarmData *_field2;
    struct __compressed_pair<CLSedentaryAlarmData *, std::__1::allocator<CLSedentaryAlarmData>> {
        struct CLSedentaryAlarmData *_field1;
    } _field3;
} vector_50df4d08;

typedef struct vector<CLStepCountEntry, std::__1::allocator<CLStepCountEntry>> {
    struct CLStepCountEntry *_field1;
    struct CLStepCountEntry *_field2;
    struct __compressed_pair<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry>> {
        struct CLStepCountEntry *_field1;
    } _field3;
} vector_e18d6468;

typedef struct vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint>> {
    struct AccessPoint *_field1;
    struct AccessPoint *_field2;
    struct __compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint>> {
        struct AccessPoint *_field1;
    } _field3;
} vector_94cb9693;

typedef struct vector<double, std::__1::allocator<double>> {
    double *__begin_;
    double *__end_;
    struct __compressed_pair<double *, std::__1::allocator<double>> {
        double *__value_;
    } __end_cap_;
} vector_b67dfe3a;

typedef struct vector<int, std::__1::allocator<int>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<int *, std::__1::allocator<int>> {
        int *_field1;
    } _field3;
} vector_3203cf93;

typedef struct vector<unsigned int, std::__1::allocator<unsigned int>> {
    unsigned int *_field1;
    unsigned int *_field2;
    struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int>> {
        unsigned int *_field1;
    } _field3;
} vector_f672cb0f;

#pragma mark Named Unions

union FalseStepDetectorStateUnion {
    struct FalseStepDetectorState falseStepDetectorState;
    unsigned char data;
};

union VehicularFlagsData {
    struct VehicularFlags _field1;
    unsigned char _field2;
};

union WorkoutAttrib {
    struct SwimAttrib _field1;
    unsigned long long _field2;
};

union dummy_u {
    char data[16];
    struct a8 aligner_;
};

#if 0
// Names with conflicting types:
typedef union {
    struct CLCatherineData _field1;
    struct CLCatherineHealthKitData _field2;
} NotificationData_555c407f;

typedef union {
    struct CLOdometerEntry _field1;
    struct CLElevationChangeEntry _field2;
    struct CLCoarseElevationChangeEntry _field3;
    struct CLSignificantElevation _field4;
} NotificationData_2df6b743;

typedef union {
    struct ReachabilityState _field1;
    struct Battery _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    int _field7;
    int _field8;
    _Bool _field9;
} NotificationData_6ebe1ea3;

typedef union {
    struct CLMotionActivity _field1;
    _Bool _field2;
    struct DeviceTouchState _field3;
    CDStruct_88736aa7 _field4;
} NotificationData_880b182c;

typedef union {
    struct CLNatalieData _field1;
    _Bool _field2;
    struct CLBodyMetrics _field3;
    float _field4;
    struct CLExerciseMinuteData _field5;
    struct CLStandMinuteInputData _field6;
    struct VO2MaxResult _field7;
    struct VO2MaxSessionStats _field8;
} NotificationData_dc881339;

typedef union {
    struct CLStepCountEntry _field1;
    struct CLExtendedStepCountEntry _field2;
    struct CLPedometerEvent _field3;
    struct CLOdometerSuitability _field4;
} NotificationData_4bb3756d;

typedef union {
    struct MediatedMotionActivity _field1;
    struct MotionOverride _field2;
    struct WorkoutEvent _field3;
} NotificationData_18d27bef;

#endif

