//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct Backend;

struct CommandQueue;

struct DIIOManager {
    unsigned int _field1;
    unsigned int _field2;
    struct unique_ptr<ExecutionEngine, std::__1::default_delete<ExecutionEngine>> _field3;
    struct unique_ptr<CommandQueue, std::__1::default_delete<CommandQueue>> _field4;
    struct optional<ExecutionWaiter> _field5;
    id _field6;
    struct vector<MachPort, std::__1::allocator<MachPort>> _field7;
    struct unique_ptr<char, std::__1::function<void (char *)>> _field8;
};

struct DiskImage;

struct ExecutionEngine;

struct ExecutionWaiter {
    struct ExecutionEngine *_field1;
};

struct MachPort;

struct __shared_weak_count;

struct format;

struct function<void (char *)> {
    struct __value_func<void (char *)> {
        struct type _field1;
        struct __base<void (char *)> *_field2;
    } _field1;
};

struct header;

struct header_v2;

struct keys {
    struct vector<std::byte, std::__1::allocator<std::byte>> _field1;
    struct vector<std::byte, std::__1::allocator<std::byte>> _field2;
    struct unique_ptr<crypto::format::header_v2, std::__1::default_delete<crypto::format::header_v2>> _field3;
    shared_ptr_90e31b53 _field4;
};

struct optional<ExecutionWaiter> {
    union {
        char _field1;
        struct ExecutionWaiter _field2;
    } _field1;
    _Bool _field2;
};

struct shared_ptr<Backend> {
    struct Backend *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<crypto::format> {
    struct format *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct type {
    unsigned char _field1[24];
};

struct unique_ptr<CommandQueue, std::__1::default_delete<CommandQueue>> {
    struct __compressed_pair<CommandQueue *, std::__1::default_delete<CommandQueue>> {
        struct CommandQueue *_field1;
    } _field1;
};

struct unique_ptr<DiskImage, std::__1::default_delete<DiskImage>> {
    struct __compressed_pair<DiskImage *, std::__1::default_delete<DiskImage>> {
        struct DiskImage *_field1;
    } _field1;
};

struct unique_ptr<ExecutionEngine, std::__1::default_delete<ExecutionEngine>> {
    struct __compressed_pair<ExecutionEngine *, std::__1::default_delete<ExecutionEngine>> {
        struct ExecutionEngine *_field1;
    } _field1;
};

struct unique_ptr<char, std::__1::function<void (char *)>> {
    struct __compressed_pair<char *, std::__1::function<void (char *)>> {
        char *_field1;
        struct function<void (char *)> _field2;
    } _field1;
};

struct unique_ptr<crypto::format::header_v2, std::__1::default_delete<crypto::format::header_v2>> {
    struct __compressed_pair<crypto::format::header_v2 *, std::__1::default_delete<crypto::format::header_v2>> {
        struct header_v2 *_field1;
    } _field1;
};

struct unique_ptr<crypto::header, std::__1::default_delete<crypto::header>> {
    struct __compressed_pair<crypto::header *, std::__1::default_delete<crypto::header>> {
        struct header *__value_;
    } __ptr_;
};

struct unique_ptr<udif::header, std::__1::default_delete<udif::header>> {
    struct __compressed_pair<udif::header *, std::__1::default_delete<udif::header>> {
        struct header *__value_;
    } __ptr_;
};

struct vector<MachPort, std::__1::allocator<MachPort>> {
    struct MachPort *_field1;
    struct MachPort *_field2;
    struct __compressed_pair<MachPort *, std::__1::allocator<MachPort>> {
        struct MachPort *_field1;
    } _field3;
};

struct vector<std::byte, std::__1::allocator<std::byte>> {
    unsigned char *_field1;
    unsigned char *_field2;
    struct __compressed_pair<std::byte *, std::__1::allocator<std::byte>> {
        unsigned char *_field1;
    } _field3;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct shared_ptr<Backend> {
    struct Backend *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_90e31b53;

typedef struct shared_ptr<crypto::format> {
    struct format *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_da0c4976;

typedef struct unique_ptr<DiskImage, std::__1::default_delete<DiskImage>> {
    struct __compressed_pair<DiskImage *, std::__1::default_delete<DiskImage>> {
        struct DiskImage *_field1;
    } _field1;
} unique_ptr_13efee05;

typedef struct unique_ptr<crypto::header, std::__1::default_delete<crypto::header>> {
    struct __compressed_pair<crypto::header *, std::__1::default_delete<crypto::header>> {
        struct header *__value_;
    } __ptr_;
} unique_ptr_e7519619;

typedef struct unique_ptr<udif::header, std::__1::default_delete<udif::header>> {
    struct __compressed_pair<udif::header *, std::__1::default_delete<udif::header>> {
        struct header *__value_;
    } __ptr_;
} unique_ptr_4b18bc19;

