//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "BKIOHIDServiceDisappearanceObserver-Protocol.h"
#import "BKIOHIDServiceMatchObserver-Protocol.h"

@class BKIOHIDService, BKIOHIDServiceMatcher, CMDeviceOrientationManager, NSHashTable, NSOperationQueue, NSString;
@protocol OS_dispatch_queue;

@interface BKOrientationManager : NSObject <BKIOHIDServiceMatchObserver, BKIOHIDServiceDisappearanceObserver>
{
    NSObject<OS_dispatch_queue> *_queue;	// 8 = 0x8
    NSObject<OS_dispatch_queue> *_observerCalloutQueue;	// 16 = 0x10
    NSHashTable *_queue_observers;	// 24 = 0x18
    double _queue_updateInterval;	// 32 = 0x20
    float _queue_interruptEventThresholds;	// 40 = 0x28
    _Bool _queue_isOrientationEventsEnabled;	// 44 = 0x2c
    long long _queue_lastUnambiguousRawAccelerometerDeviceOrientation;	// 48 = 0x30
    long long _queue_currentUserInterfaceOrientation;	// 56 = 0x38
    long long _queue_currentRawAccelerometerDeviceOrientation;	// 64 = 0x40
    long long _queue_lastEffectiveInterfaceOrientation;	// 72 = 0x48
    long long _queue_effectiveDeviceOrientation;	// 80 = 0x50
    unsigned long long _queue_orientationLocksEnabled;	// 88 = 0x58
    _Bool _queue_ignoreAccelerometerAndOrientationEventsForTesting;	// 96 = 0x60
    NSOperationQueue *_queue_orientationManagerOperationQueue;	// 104 = 0x68
    CMDeviceOrientationManager *_queue_orientationManager;	// 112 = 0x70
    BKIOHIDService *_queue_HIDService;	// 120 = 0x78
    BKIOHIDServiceMatcher *_queue_HIDServiceMatcher;	// 128 = 0x80
    NSObject<OS_dispatch_queue> *_notifyQueue;	// 136 = 0x88
}

+ (id)sharedInstance;	// IMP=0x0000000100074ba4
- (void).cxx_destruct;	// IMP=0x0000000100074260
@property(retain, nonatomic, getter=_queue_HIDService, setter=_queue_setHIDService:) BKIOHIDService *queue_HIDService; // @synthesize queue_HIDService=_queue_HIDService;
- (void)_queue_postDeviceOrientationLockChangedNotification:(_Bool)arg1;	// IMP=0x00000001000741f8
- (void)_queue_postUpdatedLastUnambiguousDeviceOrientation:(long long)arg1;	// IMP=0x00000001000741a0
- (void)_queue_postUpdatedRawAccelerometerDeviceOrientation:(long long)arg1;	// IMP=0x0000000100074148
- (void)_queue_postUpdatedOrientation:(long long)arg1;	// IMP=0x00000001000740f0
- (void)_queue_unlockDeviceOrientationForType:(unsigned long long)arg1;	// IMP=0x0000000100073fc8
- (_Bool)_queue_isDeviceLockedForAtLeastOneType:(unsigned long long)arg1;	// IMP=0x0000000100073fb8
- (_Bool)_queue_isDeviceLockedForAllTypes:(unsigned long long)arg1;	// IMP=0x0000000100073fa8
- (void)_queue_lockDeviceOrientation:(unsigned long long)arg1 deviceOrientation:(long long)arg2;	// IMP=0x0000000100073d4c
- (void)_queue_postDeviceOrientationLockChangedNotification;	// IMP=0x0000000100073d14
- (void)_queue_noteUserInterfaceOrientationDidChange:(long long)arg1;	// IMP=0x0000000100073b98
- (void)_queue_noteEffectiveOrRawDeviceOrientationDidChange:(long long)arg1 changeSource:(long long)arg2;	// IMP=0x0000000100073a20
- (void)_queue_updateDeviceOrientation:(long long)arg1 changeSource:(long long)arg2;	// IMP=0x0000000100073990
- (void)_queue_updateDeviceOrientationFromCoreMotion:(id)arg1;	// IMP=0x000000010007387c
- (void)_queue_updateDeviceOrientationWithTemporaryManager;	// IMP=0x0000000100073720
- (void)_queue_updateDeviceOrientationSynchronously;	// IMP=0x0000000100073650
- (void)_queue_setLastUnambiguousDeviceOrientation:(long long)arg1;	// IMP=0x0000000100073630
- (void)_queue_setCurrentRawAccelerometerDeviceOrientation:(long long)arg1;	// IMP=0x0000000100073610
- (void)_queue_setEffectiveDeviceOrientation:(long long)arg1 affectingLastEffectiveInterfaceOrientation:(_Bool)arg2;	// IMP=0x00000001000734e0
- (void)_queue_setCurrentUserInterfaceOrientation:(long long)arg1;	// IMP=0x000000010007334c
- (void)_queue_resetDeviceOrientation;	// IMP=0x0000000100073280
- (void)_queue_setOrientationEventsEnabled:(_Bool)arg1;	// IMP=0x0000000100073110
- (_Bool)_queue_isOrientationLocked;	// IMP=0x0000000100073100
- (void)_queue_setUpdateInterval:(double)arg1;	// IMP=0x0000000100072f8c
- (void)_queue_setInterruptEventThresholds:(float)arg1;	// IMP=0x0000000100072d94
- (void)_systemAppDidExit:(id)arg1;	// IMP=0x0000000100072d84
- (void)_systemAppDidCheckin:(id)arg1;	// IMP=0x0000000100072d2c
- (void)removeObserver:(id)arg1;	// IMP=0x0000000100072c98
- (void)addObserver:(id)arg1;	// IMP=0x0000000100072c04
- (void)refreshEffectiveDeviceOrientation;	// IMP=0x0000000100072bac
- (void)updateDeviceOrientation:(long long)arg1 changeSource:(long long)arg2;	// IMP=0x0000000100072b50
- (void)unlockDeviceOrientation:(unsigned long long)arg1;	// IMP=0x0000000100072af8
- (void)lockDeviceOrientation:(unsigned long long)arg1 deviceOrientation:(long long)arg2;	// IMP=0x0000000100072a9c
- (_Bool)isDeviceOrientationLockedForType:(unsigned long long)arg1;	// IMP=0x0000000100072a08
- (_Bool)isDeviceOrientationLocked:(long long *)arg1;	// IMP=0x0000000100072974
- (_Bool)isDeviceOrientationLocked;	// IMP=0x00000001000728e4
@property(readonly, nonatomic) long long effectiveDeviceOrientation;
@property(readonly, nonatomic) long long currentRawAccelerometerDeviceOrientation;
@property(readonly, nonatomic) long long lastEffectiveInterfaceOrientation;
@property(nonatomic) long long currentUserInterfaceOrientation;
@property(nonatomic, getter=isOrientationEventsEnabled) _Bool orientationEventsEnabled;
@property(nonatomic) double updateInterval;
@property(nonatomic) float interruptEventThresholds;
- (void)serviceDidDisappear:(id)arg1;	// IMP=0x00000001000722e4
- (void)matcher:(id)arg1 servicesDidMatch:(id)arg2;	// IMP=0x000000010007224c
- (void)dealloc;	// IMP=0x00000001000721c4
- (id)_initWithDeviceOrientationManager:(id)arg1;	// IMP=0x0000000100071f28
- (id)init;	// IMP=0x0000000100071ed8

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

